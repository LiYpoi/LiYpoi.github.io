{"meta":{"title":"Thinking&Coding","subtitle":"我们有很多的声音而没有真理，我们来自一个良心却各自藏起。","description":"斜杠青年","author":"LiY","url":"http://yoursite.com","root":"/LiYpoi.github.io/"},"pages":[{"title":"categories","date":"2019-05-19T04:25:10.000Z","updated":"2019-05-19T04:27:50.169Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-05-19T04:18:58.000Z","updated":"2019-05-19T04:24:40.459Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"建站历史","slug":"建站历史-3","date":"2019-06-13T12:23:06.000Z","updated":"2019-06-13T15:30:50.039Z","comments":true,"path":"2019/06/13/建站历史-3/","link":"","permalink":"http://yoursite.com/2019/06/13/建站历史-3/","excerpt":"","text":"添加站点图标 去除图片边框 修改文章内链接文本样式 修改代码块自定义样式 自定义鼠标样式","categories":[{"name":"Study","slug":"Study","permalink":"http://yoursite.com/categories/Study/"}],"tags":[{"name":"建站历史","slug":"建站历史","permalink":"http://yoursite.com/tags/建站历史/"}]},{"title":"读《设计中的设计》第二章","slug":"读《设计中的设计》第二章","date":"2019-06-11T14:08:08.000Z","updated":"2019-06-12T15:49:25.508Z","comments":true,"path":"2019/06/11/读《设计中的设计》第二章/","link":"","permalink":"http://yoursite.com/2019/06/11/读《设计中的设计》第二章/","excerpt":"","text":"第二章是关于原研哉的“RE-DESIGN二十一世纪日常用品再设计”展的一些内容介绍，这个展从日常生活的角度入手，回归现代主义。 所谓设计，就是将人类生活或生存的意义，通过制作的过程予以解释。设计没有自我表象的动机，其落脚点更侧重于社会，解决社会上多数人共同面临的问题，是设计的本质。 “RE-DESIGN”展中，原研哉收集了三十二位来自日本的设计者针对日常用品的重新设计的提案。 坂茂与卫生纸 坂茂以“纸管”建筑闻名世界，纸管有着惊人的强度与耐久度，而且成本低廉易于回收。阪神大地震的时候曾用纸管搭建过临时住宅，德国汉诺威世博会上也展出过日本馆，也是用纸管做的。 坂茂再设计的卫生纸中间的芯是四角形的，卫生纸以四角形的方式卷上去，其设计的用心之处在于它造成的不便，四角形的卫生纸卷筒会产生阻力，抽取时会发出“咔嗒-咔嗒”的声响，这种阻力发出的信息和实现的功能便是节约能源。而且四角形的卫生纸，在搬运和收藏时会节约空间。 坂茂 日本著名建筑师，1957年出生于日本东京，1977年至1980年就读于南加州建筑学院，1980年至1982年就读于库柏联盟建筑学院，1982年至1983年在东京为著名建筑师矶崎新工作室工作，1984年获库柏联盟建筑学院建筑学士学位，1985年在东京建立私人企业，1995年任联合国难民署高级专员顾问，1995年至1999年任横滨国立大学建筑学助理教授，1996年至2000年任日本文化唐纳·基尼中心助理会员2000年任哥伦比亚大学访问教授 。2011年任京都造形艺术大学艺术学部环境设计学科教授。在建筑界，坂茂也以敢大胆使用最廉价、最脆弱的材料而闻名。2006年，他用中国竹编帽子设计的法国蓬皮杜中心新馆，从其他153名竞争对手中脱颖而出；日本神户大地震时，他仅用一天时间，为失去家园的灾民盖起了一座纸筒教堂；他还提出用传真纸筒芯代替钢筋水泥的想法，他特别强调对尖端材料和技术的运用，有充分的好奇心和执着，创新永无止境。 佐藤雅彦与出入境章 佐藤雅彦是一位资深广告导演，他经常研究“沟通的根本”这一问题，并在创作实践中对其发出挑战。他设计的出境印章，是向左飞的飞机，入境印章是向右飞的飞机，印章的设计理念中包含了“感动的萌芽”，这是一种非常可行的互相沟通的方法。 隈研吾与捕蟑盒 建筑家隈研吾的建筑观是“建筑师不能以建筑的名义向世界展示过度华丽的造型”，他提倡“建筑的消失”，将建筑与周围环境融为一体。隈研吾把捕蟑盒设计成半透明的管状黏胶布，像是一个四面都有强力胶的隧道。在使用时，把脚步拉出适当长度后剪切，把剪下来的脚步折成四边形的管状，在两端的连接部分也有胶，使用时可以随意把捕蟑盒粘到墙面。这个设计否定了传统的样式，并又符合极简的理念。 面出薰与火柴 面出薰成立的“照明侦探组”，主要研究城市的晚间照明。他所设计的火柴，是将地上散落的小树枝收集起来，在小树枝的尖端涂上发火剂做成的，这样的设计也许能唤醒人们对自然、火、人以及世界万物的印象。","categories":[{"name":"Life","slug":"Life","permalink":"http://yoursite.com/categories/Life/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]},{"title":"读《设计中的设计》的随笔","slug":"读《设计中的设计》的随笔","date":"2019-06-09T15:13:20.000Z","updated":"2019-06-09T15:58:28.104Z","comments":true,"path":"2019/06/09/读《设计中的设计》的随笔/","link":"","permalink":"http://yoursite.com/2019/06/09/读《设计中的设计》的随笔/","excerpt":"","text":"我个人并不是对某类书有喜恶，所以各种书多少都会看一些，前几天买了本《设计中的设计》，作者原研哉是著名的无印良品的设计委员，他可以算的上是带领无印良品走向变革及成功路的领路人了。今天仔细读了第一章的内容。 第一章作者对设计本身进行了再说明，从一百五十多年前设计的产生，到十九世纪后，随着工业革命的发展，人们对工业生产出来的日用品的审美要求日益增高，随后到美国经济、政治对设计概念的影响，包豪斯学院派的设计大师们对不同流派设计概念，这些都为现代的设计理念构筑了坚实的基础。 欧洲的设计风格在展现各自独创性的同时，保留了一丝手工生产的气息，对资深工匠的手工制作保持崇尚一直存在于欧洲制造业的传统中。 设计在“品牌”的塑造中发挥了重要的作用，二十世纪后半叶，设计的主要动力来源是经济，经济发展越快，人们越热衷追求最新的信息和产品，对设计也越发期待。如果设计只停留在“让今天的东西在明日变旧”，那它无非遵循技术本身的形式。 设计在制造方面承担着思想指导的作用，并不是仅仅只有制造出新奇的东西才算是制造，把熟悉的东西当成未知的领域再度开发也同样具有创造性。设计是从生活中发现新问题的行为，生活所走的方向，就是技术与设计的未来。","categories":[{"name":"Life","slug":"Life","permalink":"http://yoursite.com/categories/Life/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]},{"title":"现代精神鸦片","slug":"“现代精神鸦片","date":"2019-06-08T13:30:08.000Z","updated":"2019-06-08T14:48:34.068Z","comments":true,"path":"2019/06/08/“现代精神鸦片/","link":"","permalink":"http://yoursite.com/2019/06/08/“现代精神鸦片/","excerpt":"","text":"自12839年林则徐虎门硝烟后，那时的清朝，对鸦片的打击力度迎来高峰。时隔百十来年，中国又陷入了“鸦片之中”，现代的精神鸦片靠谁来硝？ 焦虑时代 如今年轻人每天刷着抖音、微博、知乎、贴吧等等app，根本停不下来。这些东西本质上有一个特点，就是在无形之中贩卖着焦虑。凡是能看到的，能够吸引关注的，引发大范围社会讨论的，包括民生热点、医疗事故、学校教育、明星娱乐等一系列的，全都在制造焦虑。 仿佛你的国家各行各行都不安全，国家的任何政策举动自己都能看明白有什么含义。仿佛生活的社会，再不努力就被淘汰了，每天都必须提高自己，不然就落后他人了。仿佛自己的学历不是985、211就不是个人了。仿佛每个女生都要活得精致完美，水果要吃、电影要看、明星要追、微博要发，每天自己都活得精致美美哒。男生？要不打游戏、要努力上进、要说话温和、要有绅士风度、当然，最主要的是帅啊。 各种各样的软文，各种各样的短视频、各种各样的广告，一次一次的告诉你美好的生活是什么样的，逐渐你就被套在这个圈子里。这个圈子每天给你讲故事，让你感同身受，你看完后一拍大腿，这不是说我吗？“我也有这样的家长”、“我也有这样的同学”、“我也有这样的男/女友”。共鸣产生了，焦虑加重了，于是在这个圈子里越陷越深。 至于网络平台？为了流量、日活，它们更要把这种焦虑给你放大了。把这些事给你放到热榜上、推荐上，你们尽情的吵啊，尽情的撕啊，用户越多我越开心。 有些人从这些中看到了商机，大的以咪蒙为代表的一系列田园女权，小的微博上各种大V。Ta们对女生说，现在的男生活得自私，不懂的关心女生，女生的择偶标准应该是什么什么样的，女生活得太不容易了，要爱自己，过精致的生活。Ta们转身又对男生说，现在的女生多么物质，她们索取无度，要车要房还要帅。最后博取认同感后，趁机让你关注一波公众号，说帮你掌握两性心理学，教你过精致生活，然后再出个什么课程，完成一波用户收割。 知识付费 第一次接触这个概念应该是在知乎上，具体在哪已经记不清了，它说当代社会，想学到知识要花钱的，这点我同意。学习什么都要成本，这没问题。但在这种概念下，就出现了一堆所谓的知识专栏，典型的就是知乎的Live了。“考研逆袭”、“高考前三个月逆袭”、“二本考入985”，这些Live是最受欢迎的。还有什么“如何学PS”、“如何学摄影”、“如何学日语”、“如何学英语”，这些问题下面都会有各种大V，先是给你一堆简单的入门教程，让你看个大概，结尾留个公众号，让你关注。成功引流，在公众号上每天给你发一些相关的小技巧，小知识，偶尔发些学了这个技能的人成功的案例，他们自从学了这些东西后，为人生路带来了各种各样的便利。 这些东西的知识壁垒有那么高吗？有必要花钱买个几十分钟的课程吗？ 上下层闭环 以上说的两点正好完美的构成了一个闭环，上层负责制造焦虑，中层负责贩卖焦虑，整个互联网平台负责提供大的环境，你在这个闭环中不停的被动循环。 现代的精神鸦片就无形地存在于网络环境中，你要么选择吸一口，要么选择跟着大环境一起卖它，要么自己走出另外一条路，你怎么选呢？","categories":[{"name":"Life","slug":"Life","permalink":"http://yoursite.com/categories/Life/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]},{"title":"随笔","slug":"随笔-4","date":"2019-06-06T15:58:57.000Z","updated":"2019-06-06T16:06:18.053Z","comments":true,"path":"2019/06/06/随笔-4/","link":"","permalink":"http://yoursite.com/2019/06/06/随笔-4/","excerpt":"","text":"今天 刷了《非自然死亡》 不错","categories":[{"name":"Life","slug":"Life","permalink":"http://yoursite.com/categories/Life/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]},{"title":"建站历史","slug":"建站历史","date":"2019-06-04T03:37:23.000Z","updated":"2019-06-04T03:40:36.128Z","comments":true,"path":"2019/06/04/建站历史/","link":"","permalink":"http://yoursite.com/2019/06/04/建站历史/","excerpt":"","text":"添加了基于LeanCloud的Valine评论功能，添加了全站文章字数统计功能。","categories":[{"name":"Study","slug":"Study","permalink":"http://yoursite.com/categories/Study/"}],"tags":[{"name":"建站历史","slug":"建站历史","permalink":"http://yoursite.com/tags/建站历史/"}]},{"title":"关于利用时间的一些感悟","slug":"关于利用时间的一些感悟","date":"2019-06-03T09:01:20.000Z","updated":"2019-06-04T03:38:47.144Z","comments":true,"path":"2019/06/03/关于利用时间的一些感悟/","link":"","permalink":"http://yoursite.com/2019/06/03/关于利用时间的一些感悟/","excerpt":"","text":"童年时，我在经济上最大的误解是：人们通过高昂的薪水来致富。 这是错的：你变得富有，是因为你用有某种能够快速增值的东西。 它可能是商业、房地产、自然资源、知识产权，或其他什么东西–无论如何，你需要拥有它的权益，而非单靠出卖你的时间。 ​ —Same Altman 在成长中，我们被一直教导做一个努力的人，努力学习，进一个好学校，然后有一份好工作，努力工作。而其中努力一词被许多人误解为在某件事上花费大量时间，人们好像都热衷于做一些花费时间却又不怎么需要动脑的事，有时候比起思考，机械式的完成更让人舒适。 但你的时间真正的价值体现在哪里？时间的价值体现在你在这段时间中所做的事，它意味着成长、积累等等，它有着无限的可能性。将这份可能性只用于机械性的工作似乎是很不划算的，那么如何这份时间利用起来就是下面要说的了。 尽量不做短期的事 我们其实都知道，短期的事情给予的反馈一般微乎其微，长期经营才会有所回报。比如在英语学习上，我们明明知道这是一项需要长期积累长期学习才可以掌握的技能，却总是想着“三十天掌握XXX”的这种课程，我们感性中总是容易短视，总是把目光放在当前的任务上。 在心理学上，这种现象称为“时间贴现”。 用自己举例，以前我想着要好好背英语单词，于是制定了一个计划：每天背30个单词，执行了十几天后，计划失败了。失败的原因在于每天的作业量都不同，有时作业多，加上有一些计划之外的事发生，背单词这件事就被延期了，这种情况发生了几次后，于是计划也破产了。 这也是拖延症的前期症状，如何解决？ 我觉得想要将一件事长期经营下来，并不是要强迫自己去完成它，而是要有去完成它的“趋势”。 什么是完成的“趋势”？我个人认为，完成的“趋势”是在主动的状态下要去做这件事。用我写博客这件事举个例子。我基本上每天都会写，它花费不了多长时间，我也不必要每次写多少实用的内容，哪怕每天只写一些个人的感悟随笔，我依然将这件事坚持了下去。 那么偶尔出现一些突发状况，该如何应对呢？ 搭建一个自运转的系统 在遇到一个突发问题时，先不着急着手去解决，先去思考：这种问题会不会再次出现？ 我们可以设计一套流程去解决相应问题，或者优化环节、减少步骤，来避免它再次出现。 比起遇到一件事就去解决一件事，这是一种更长期的视角，也更行之有效。 延伸自己与世界的接触 或者说拓宽自己的知识网络，在这个时代，比起专精一个领域，多方面的涉猎更为重要。当你接触的知识节点越多，你就越能把它们连接起来，构成一张网。成功的人有一个共同的特点：保持敏锐。 对一切新事物保持好奇心，不断去思考：它会带来什么？它意味着什么？它与我之间有什么关系？绝大多数的机会，都是从各种各样的“可能性”中孕育而生的。 所以为什么要倡导“终生学习”？其实重点不在于知识本身，而是通过学习，不断更新自己的知识触点，扩展自己的知识网络，保持对新事物的好奇心。","categories":[{"name":"Life","slug":"Life","permalink":"http://yoursite.com/categories/Life/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]},{"title":"用CSS实现图片轮播","slug":"用CSS实现图片轮播","date":"2019-06-02T12:47:15.000Z","updated":"2019-06-02T13:15:47.648Z","comments":true,"path":"2019/06/02/用CSS实现图片轮播/","link":"","permalink":"http://yoursite.com/2019/06/02/用CSS实现图片轮播/","excerpt":"","text":"在之前的多媒体作业中为了使banner区的图片不呆板，用CSS实现的对图片的轮播效果，虽然用JS也可以实现，但这对margin的作用也算是一种新的了解。 效果 CSS部分 12345678910111213141516171819202122232425262728#container &#123; width: 800px; height: 400px; overflow: hidden; &#125; #photo &#123; width: 2400px; animation: switch 10s ease-out infinite; &#125; #photo img &#123; float: left; width: 800px; height: 400px; &#125; @keyframes switch &#123; 0%,25%&#123; margin-left: 0; &#125; 35%,60% &#123; margin-left: -800px; &#125; 70%,100%&#123; margin-left: -1600px; &#125; &#125; HTML部分 1234567&lt;div id=\"container\"&gt; &lt;div id=\"photo\"&gt; &lt;img src=\"imageli/banner1.png\" alt=\"樱花节\"&gt; &lt;img src=\"imageli/banner2.png\" alt=\"樱花节\"&gt; &lt;img src=\"imageli/banner3.png\" alt=\"樱花节\"&gt; &lt;/div&gt;&lt;/div&gt; 实现的关键在于@keyframes定义关键帧中margin-left,可以看出来，第二个和第三个margin-left的值为负，在网页的世界中，默认的文档流是水平方向的，当margin-left的值为负时，会使对应的标签向左缩进，从代码中可以看出，图片从0px开始变换了三次到1600px,每一次减少800px，而所加的三张图片的width都为800px,所以图片向左缩进，最终实现了轮播的效果。","categories":[{"name":"Study","slug":"Study","permalink":"http://yoursite.com/categories/Study/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/tags/CSS/"}]},{"title":"HTML5之Canvas动画制作架构","slug":"HTML5之Canvas动画制作架构","date":"2019-06-01T09:21:49.000Z","updated":"2019-06-01T09:25:50.309Z","comments":true,"path":"2019/06/01/HTML5之Canvas动画制作架构/","link":"","permalink":"http://yoursite.com/2019/06/01/HTML5之Canvas动画制作架构/","excerpt":"","text":"Animation 使用setlnterval架构逐帧动画 1234567setlnterval(function()&#123; //匿名函数表示在每一帧的时候做什么事情render(); //绘制当前画面update(); //根据画面所需的数据结构，对数据结构进行调整&#125;,50 //传入时间，单位毫秒，控制动画帧率，表示每隔多长时间执行一次匿名函数)","categories":[{"name":"Study","slug":"Study","permalink":"http://yoursite.com/categories/Study/"}],"tags":[{"name":"Canvas","slug":"Canvas","permalink":"http://yoursite.com/tags/Canvas/"}]},{"title":"Canvas画弧线和圆","slug":"Canvas画弧线和圆","date":"2019-05-30T08:46:01.000Z","updated":"2019-05-30T09:14:14.457Z","comments":true,"path":"2019/05/30/Canvas画弧线和圆/","link":"","permalink":"http://yoursite.com/2019/05/30/Canvas画弧线和圆/","excerpt":"","text":"1234567891011121314151617181920212223242526&lt;script&gt; window.onload = function () &#123; var canvas = document.getElementById(\"canvas\"); var context = canvas.getContext(\"2d\") context.lineWidth =5 context.strokeStyle = \"#005588\" for (var i = 0 ; i &lt; 10 ; i ++)&#123; context.beginPath() context.arc(50 + i*100,60,40,0,2*Math.PI*(i+1)/10) //第六个参数描述绘图的顺序，默认false逆时针，true顺时针 context.closePath() // 当绘制的图形不是封闭的时，closePath（）会自动将图形的首位连接起来 context.stroke() &#125; for (var i = 0 ; i &lt; 10 ; i ++)&#123; context.beginPath() context.arc(50 + i*100,180,40,0,2*Math.PI*(i+1)/10) //context.closePath()/* 当绘制的图形不是封闭的时，closePath（）会自动将图形的首尾连接起来*/ context.stroke()/* 此时图形的首尾不相连*/ &#125; &#125;&lt;/script&gt; Canvas画圆的参数","categories":[{"name":"Study","slug":"Study","permalink":"http://yoursite.com/categories/Study/"}],"tags":[{"name":"Canvas","slug":"Canvas","permalink":"http://yoursite.com/tags/Canvas/"}]},{"title":"创建Canvas以及画条线","slug":"创建Canvas以及画条线","date":"2019-05-30T08:45:07.000Z","updated":"2019-05-30T09:32:39.664Z","comments":true,"path":"2019/05/30/创建Canvas以及画条线/","link":"","permalink":"http://yoursite.com/2019/05/30/创建Canvas以及画条线/","excerpt":"","text":"Canvas的历史这个 HTML 元素是为了客户端矢量图形而设计的。它自己没有行为，但却把一个绘图 API 展现给客户端 JavaScript 以使脚本能够把想绘制的东西都绘制到一块画布上。要从同一图形的一个 canvas标记中移除元素，往往需要擦掉绘图重新绘制它，大多数 Canvas 绘图 API 都没有定义在 canvas元素本身上，而是定义在通过画布的 getContext() 方法获得的一个“绘图环境”对象上。Canvas API 也使用了路径的表示法。但是，路径由一系列的方法调用来定义，而不是描述为字母和数字的字符串，比如调用 beginPath() 和 arc() 方法。一旦定义了路径，其他的方法，如 fill()，都是对此路径操作。绘图环境的各种属性，比如 fillStyle，说明了这些操作如何使用。 注释：Canvas API 非常紧凑的一个原因上它没有对绘制文本提供任何支持。要把文本加入到一个 canvas图形，必须要么自己绘制它再用位图图像合并它，或者在canvas上方使用 CSS 定位来覆盖 HTML 文本。Canvas中的绘图使一种状态绘图，首先要进行状态设置，然后调用函数绘制，画布的设置中，以左上角为圆点，向右为X轴正方向。向下为Y轴正方向，canvas的绘制是基于状态的。 写法Canvas 12HTML&lt;canvas id=\"canvas\"&gt;&lt;/canvas&gt; 1234567Javascriptvar cnavas=document.getElementById('canvas')var context=canvas.getContext('2d')//获得绘图环境,context提供了绘图的接口//使用canvas进行绘制 画一条线123456789101112131415context.beginPath() context.moveTo(100,100) /*线的起点*/ context.lineTo(700,700)/*线的终点*/ context.lineTo(100,700) context.lineTo(100,100) context.closePath() context.lineWidth=5 /*线条宽度*/ context.strokeStyle=\"#66ccff\"/*线条样式，主要是指线条的颜色*/ context.stroke() /*stroke是笔画的意思，在Canvas中用来画线条*/ context.fillStyle=\"rgb(2,100,30)\"/* 对多边形进行颜色填充*/ context.fill() 1使用context.beginPath()和context.closePath()使两个路径分开,beginPath（）和closePath（）不一定要同时出现，beginPath（）代表规划一个路径，closePath（）表四结束当前的路径，如果当前的路径没有封闭上，就会让当前的路径封闭上。","categories":[{"name":"Study","slug":"Study","permalink":"http://yoursite.com/categories/Study/"}],"tags":[{"name":"Canvas","slug":"Canvas","permalink":"http://yoursite.com/tags/Canvas/"}]},{"title":"随笔","slug":"随笔-3","date":"2019-05-29T12:18:10.000Z","updated":"2019-05-29T12:18:10.458Z","comments":true,"path":"2019/05/29/随笔-3/","link":"","permalink":"http://yoursite.com/2019/05/29/随笔-3/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Git标签","slug":"Git标签","date":"2019-05-28T09:25:09.000Z","updated":"2019-05-28T09:33:16.073Z","comments":true,"path":"2019/05/28/Git标签/","link":"","permalink":"http://yoursite.com/2019/05/28/Git标签/","excerpt":"","text":"Git标签我们可以用 git tag -a v1.0 命令给最新一次提交打上（HEAD）”v1.0”的标签。 -a 选项意为”创建一个带注解的标签”。 不用 -a 选项也可以执行的，但它不会记录这标签是啥时候打的，谁打的，也不会让你添加个标签的注解。 我推荐一直创建带注解的标签。 1$ git tag -a v1.0 当你执行 git tag -a 命令时，Git 会打开你的编辑器，让你写一句标签注解，就像你给提交写注解一样。 现在，注意当我们执行 git log –decorate 时，我们可以看到我们的标签了： 12$ git log --oneline --decorate --graph* 88afe0e (HEAD, tag: v1.0, master) Merge branch &apos;change_site&apos; 如果我们要查看所有标签可以使用以下命令： 123$ git tagv0.9v1.0 指定标签信息命令： 1git tag -a &lt;tagname&gt; -m &quot;标签&quot; PGP签名标签命令： 1git tag -s &lt;tagname&gt; -m &quot;标签&quot; 如果我们忘了给某个提交打标签，又将它发布了，我们可以给它追加标签。例如，假设我们发布了提交 85fc7e7，但是那时候忘了给它打标签。 我们现在也可以： 1$ git tag -a v0.9 85fc7e7 更多有关Git的操作见git手册。","categories":[{"name":"Study","slug":"Study","permalink":"http://yoursite.com/categories/Study/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://yoursite.com/tags/Git/"}]},{"title":"分支管理","slug":"分支管理","date":"2019-05-28T09:02:44.000Z","updated":"2019-05-28T09:19:35.289Z","comments":true,"path":"2019/05/28/分支管理/","link":"","permalink":"http://yoursite.com/2019/05/28/分支管理/","excerpt":"","text":"分支管理列出分支列出分支基本命令： 1git branch 没有参数时，git branch 会列出你在本地的分支。 12$ git branch* master 此例的意思就是，我们有一个叫做”master”的分支，并且该分支是当前分支。 当你执行 git init 的时候，缺省情况下 Git 就会为你创建”master”分支。 如果我们要手动创建一个分支，并切换过去。执行 git branch (branchname) 即可。 1234$ git branch testing$ git branch* master testing 现在我们可以看到，有了一个新分支 testing。 合并冲突当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。 解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。 用git log --graph命令可以看到分支合并图。 合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。 查看提交历史使用git log查看提交历史 可以用git log --oneline选项来查看历史记录的简洁的版本。 我们还可以用git log --oneline --graph选项，查看历史中什么时候出现了分支，合并。 也可以用’–reverse’参数来逆向显示所有日志。 1$ git log --reverse --oneline 如果只想查找指定用户的提交日志可以使用命令：git log –author，例如，比方说要找Git源码中Linus提交的部分： 1$ git log --author = Linus 如果你要指定日期，可以执行几个选项： - 因为和–before，但是你也可以用–until和–after。 例如，如果我要看Git项目中三周前且在四月十八日之后的所有提交，我可以执行这个（我还用了–no-merges选项以隐藏合并提交）： 1$ git log --oneline --before = &#123;3.weeks.ago&#125; --after = &#123;2010-04-18&#125; --no-merges","categories":[{"name":"Study","slug":"Study","permalink":"http://yoursite.com/categories/Study/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://yoursite.com/tags/Git/"}]},{"title":"创建分支与合并分支","slug":"创建分支与合并分支","date":"2019-05-27T11:49:36.000Z","updated":"2019-05-27T12:04:19.246Z","comments":true,"path":"2019/05/27/创建分支与合并分支/","link":"","permalink":"http://yoursite.com/2019/05/27/创建分支与合并分支/","excerpt":"","text":"查看分支：git branch 创建分支：git branch &lt;name&gt; 切换分支：git checkout &lt;name&gt; 创建+切换分支：git checkout -b &lt;name&gt; 合并某分支到当前分支：git merge &lt;name&gt; 删除分支：git branch -d &lt;name&gt; 创建一个text的分支,并且切换到text分支： 12$ git checkout -b textSwitched to a new branch &apos;text&apos; 然后，用git branch命令查看当前分支： 123$ git branch* text master git branch命令会列出所有分支，当前分支前面会标一个*号。 然后可以在分支上进行工作,然后提交上去。提交完后切换到master分支： 12$ git checkout masterSwitched to branch &apos;master&apos; 此时查看修改的文件发现添加的内容消失了，这是因为之前的提交是在text分支上，而master分支的提交点没有变。 使用git merge命令用于合并指定分支到当前分支。合并后，再查看修改目标文件的内容，就可以看到，和text分支的最新提交是完全一样的。 合并完成后，就可以放心地删除text分支了： 12$ git branch -d textDeleted branch text (was b17d20e). 删除后，查看branch，就只剩下master分支了： 12$ git branch* master 因为创建、合并和删除分支非常快，所以Git鼓励使用分支完成某个任务，合并后再删掉分支，这和直接在master分支上工作效果是一样的，但过程更安全。","categories":[{"name":"Study","slug":"Study","permalink":"http://yoursite.com/categories/Study/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://yoursite.com/tags/Git/"}]},{"title":"远程仓库","slug":"远程仓库","date":"2019-05-27T11:37:11.000Z","updated":"2019-05-27T11:45:55.905Z","comments":true,"path":"2019/05/27/远程仓库/","link":"","permalink":"http://yoursite.com/2019/05/27/远程仓库/","excerpt":"","text":"一、添加远程仓库所使用的远程仓库是GitHub，要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git； 关联后，使用命令git push -u origin master第一次推送master分支的所有内容； 此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改； 分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步。 二、远程仓库克隆要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。 Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。 在多个人协作开发时，每个人各自从远程克隆一份就可以了。 GitHub给出的地址不止一个，还可以https://github.com/XXXXX/XXXXX.git这样的地址。实际上，Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。 使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https。","categories":[{"name":"Study","slug":"Study","permalink":"http://yoursite.com/categories/Study/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://yoursite.com/tags/Git/"}]},{"title":"撤销修改与删除文件","slug":"撤销修改与删除文件","date":"2019-05-26T09:38:37.000Z","updated":"2019-05-26T09:51:00.679Z","comments":true,"path":"2019/05/26/撤销修改与删除文件/","link":"","permalink":"http://yoursite.com/2019/05/26/撤销修改与删除文件/","excerpt":"","text":"一、撤销修改场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。让这个文件回到最近一次git commit或git add时的状态。 场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD &lt;file&gt;，就回到了场景1，第二步按场景1操作。git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。 场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本退会一文，不过前提是没有推送到远程库。 二、删除文件命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。 如果删错了文件，使用$ git checkout -- 目标文件可以将误删的文件恢复到最新的版本，git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。 注意：从来没有被添加到版本库就被删除的文件，是无法恢复的！","categories":[{"name":"Study","slug":"Study","permalink":"http://yoursite.com/categories/Study/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://yoursite.com/tags/Git/"}]},{"title":"网页配色方案","slug":"网页配色方案","date":"2019-05-26T08:52:41.000Z","updated":"2019-05-26T09:13:58.572Z","comments":true,"path":"2019/05/26/网页配色方案/","link":"","permalink":"http://yoursite.com/2019/05/26/网页配色方案/","excerpt":"","text":"一、Flat UI色表最常用的方法就是在Flat UI官网找配色。 对于简单的网页配色已经够用了。 还提供一些网页元素的配色方案。 二、配色的经典方案原文 1.网页主题色深颜色使用c、f、6、9这四个字符，组合成RGB色值 紫罗兰色，靛蓝色，蓝色，绿色。 黄色，橙色，另一种橙色，红色。 淡颜色使用a、b、c、d、e、f这六个字符，组合生成 RGB 色值。 2.文本颜色文字最好不要使用全黑，而是使用深蓝色，可以从下面几种颜色挑。1a2a3a最深，2a3a4a次之，7a8a9a最浅。 3.背景色、阴影色、边框色背景色、阴影色、边框色都属于衬托，建议使用灰色，可以从aaaaa、bbbbbb、cccccc、dddddd这四个色值挑选。","categories":[{"name":"Study","slug":"Study","permalink":"http://yoursite.com/categories/Study/"}],"tags":[{"name":"网页设计","slug":"网页设计","permalink":"http://yoursite.com/tags/网页设计/"}]},{"title":"Git管理修改","slug":"Git管理修改","date":"2019-05-24T14:02:57.000Z","updated":"2019-05-24T14:04:25.502Z","comments":true,"path":"2019/05/24/Git管理修改/","link":"","permalink":"http://yoursite.com/2019/05/24/Git管理修改/","excerpt":"","text":"Git比其他版本控制器优秀的原因在于，Git跟踪并管理的是修改，而不是文件。 在对目标文件进行一个修改后git add,然后再次修改文件，提交$git commit -m &quot;修改说明&quot;。 提交之后使用$git status查看状态。 会发现第二次的修改并没有提交。 回顾一下操作过程：第一次修改-&gt;git add-&gt;第二次修改-&gt;git commit 在使用git add后，在工作区的第一次修改被放在暂存区，准备提交，但是，在工作区的第二次修改并没有放入暂存区，所以，git commit只负责把暂存区的修改提交了，第二次不会被提交。 如何提交第二次修改呢？ 可以继续git add 再git commit，或进行两次修改后再git add,然后git commit,相当于把两次修改合并后一起提交了。 每次修改，如果不用git add到暂存区。那就不会加入到commit中。","categories":[{"name":"Study","slug":"Study","permalink":"http://yoursite.com/categories/Study/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://yoursite.com/tags/Git/"}]},{"title":"用HTML标签为汉字加拼音","slug":"用HTML标签为汉字加拼音","date":"2019-05-24T12:45:42.000Z","updated":"2019-05-24T13:08:28.551Z","comments":true,"path":"2019/05/24/用HTML标签为汉字加拼音/","link":"","permalink":"http://yoursite.com/2019/05/24/用HTML标签为汉字加拼音/","excerpt":"","text":"在知乎上看到的，一个没有什么用但有趣的小知识。 12345678&lt;html&gt; &lt;head&gt; &lt;title&gt;拼音&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;ruby&gt;拼音&lt;rt&gt;pingyin&lt;/rt&gt;&lt;/ruby&gt; &lt;/body&gt;&lt;/html&gt; 结果是这样的： 但是可以看出拼音和汉字不是一一对应的，因为拼音的长度不是固定的。想要实现对其可以一字一字拼了。 1234567891011&lt;html&gt;&lt;head&gt;&lt;title&gt;拼音&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;ruby&gt;一&lt;rt&gt;&lt;/rt&gt;yi&lt;/ruby&gt;&lt;ruby&gt;字&lt;rt&gt;&lt;/rt&gt;zi&lt;/ruby&gt;&lt;ruby&gt;一&lt;rt&gt;&lt;/rt&gt;yi&lt;/ruby&gt;&lt;ruby&gt;拼&lt;rt&gt;&lt;/rt&gt;pin&lt;/ruby&gt;&lt;/body&gt;&lt;/html&gt; 结果是这样的： 可是这种拼音是没有声调的，这是输入法的问题，我使用的微软输入法不能输入带有音调的字母，想要加上声调，就下个X狗输入法吧。","categories":[{"name":"Study","slug":"Study","permalink":"http://yoursite.com/categories/Study/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"http://yoursite.com/tags/HTML/"}]},{"title":"这一切的开始","slug":"随笔-2","date":"2019-05-23T11:58:53.000Z","updated":"2019-05-23T12:51:06.477Z","comments":true,"path":"2019/05/23/随笔-2/","link":"","permalink":"http://yoursite.com/2019/05/23/随笔-2/","excerpt":"","text":"今天在浏览阮大的博客时想了很多。当初为什么要写博客？以前只知道博客是什么，但从来没有想过会去写，我自认为自己一直是一个特别任性的人，做事只做自己喜欢的，像博客这种费劲的东西在以前我是不会想着搞的。 直到有一次看到这么一段话：“你天天打游戏，我问你，你还记得5天前你玩的这个游戏时赢了还是输了？用的什么英雄？最后的比分是多少？你每天就像打游戏一样过活，大学四年过去了，你还记得四年了每一天干了什么事吗？”当时我就想了，我应该做些什么事去将过去的东西积累沉淀一下。 德国哲学家海德格尔说过一句著名的话：人应该”向死而生”（Being-toward-death）。意思是人面对死亡，才会停止那些无谓琐碎的关注和困扰，体会到什么是重要的事情，从而达到真正的存在。 我应该想着前看了，那样也许才能找到前进的方向。 仔细想想当初为什么要选计算机专业？我自认为自己与计算机也没有什么不解之缘，只知道一句“富学金融，穷学IT”，可这好像也不是选择的理由。 就这样我不清不楚的选择了这个专业。 说实话，我对这个专业还是很有兴趣的，但是我究竟是喜欢编程这件事还是喜欢编程后的结果所带来的成就感，这两点我现在还没有搞明白。这两件事也许没有什么本质上的区别吧。 在一年的大学生活里，我发现主要的核心课程其实能很快学完，很多课程是浪费时间，我个人最讨厌非我主观意愿下的浪费时间。所以我开始学习其他的“旁门左道”来消遣我的时间。 加了一个PPT社群，搭建了自己的博客，开始学Git，在HTML和CSS上较为深入的学习了一下。以后的打算：将博客坚持写下去，将HTML5和CSS3系统学习一下，把Git学完，学ejs、js做一个hexo的主题，假期提前学Java，或许再会找几门网课学些旁门左道,这就牵扯到将来的计划了。 我只能说目前还是没有一个清楚的大方向，只能看到什么感兴趣的就去学什么。 感谢一下互联网，互联网将教育的自主权，交到了每个人自己的手里，我才能有各种学习的渠道，了解了更多的事。","categories":[{"name":"Life","slug":"Life","permalink":"http://yoursite.com/categories/Life/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]},{"title":"随笔","slug":"随笔-1","date":"2019-05-23T11:37:25.000Z","updated":"2019-05-23T11:58:08.450Z","comments":true,"path":"2019/05/23/随笔-1/","link":"","permalink":"http://yoursite.com/2019/05/23/随笔-1/","excerpt":"","text":"今天刷着知乎，偶尔发现一个名字：阮一峰，突然感觉很熟悉，搜索了一下这个人，“中国第一的bloger”、”在阿里任职”，这几个都不是主要的，主要的是《黑客与画家》竟然是由他翻译的！之前在看书时一直没留意过译者是谁，而且《未来世界的幸存者》也是由他所写。 在浏览了阮大的博客后，我对“斜杠青年”这词有了新的认识，什么是斜杆青年啊，阮大才是真正的斜杆青年啊。","categories":[{"name":"Life","slug":"Life","permalink":"http://yoursite.com/categories/Life/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]},{"title":"Git提交远程报错","slug":"git提交远程报错","date":"2019-05-23T10:00:26.000Z","updated":"2019-05-23T10:46:49.866Z","comments":true,"path":"2019/05/23/git提交远程报错/","link":"","permalink":"http://yoursite.com/2019/05/23/git提交远程报错/","excerpt":"","text":"在之前用git push -u origin master时，会出现这种错误： 原因在于第一次在Github中learn-Git仓库里创建的Markdown文件不在本地代码目录中。 之前在出现此错误时，直接使用了git push -f命令强制推送，但会影响commit历史。 解决办法：使用git pull --rebase origin master进行合并，合并之后再使用git push origin master推上去 对Git的一些命令了解的还不是特别透彻。 git push origin master ：本地master分支的最新修改推送至GitHub git push -u origin master：第一次推送master分支时，加上了-u参数，把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。","categories":[{"name":"Study","slug":"Study","permalink":"http://yoursite.com/categories/Study/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://yoursite.com/tags/Git/"}]},{"title":"Git的工作区与暂存区","slug":"git-3","date":"2019-05-23T09:58:26.000Z","updated":"2019-05-23T10:02:47.826Z","comments":true,"path":"2019/05/23/git-3/","link":"","permalink":"http://yoursite.com/2019/05/23/git-3/","excerpt":"","text":"工作区与暂存区Git和其他版本控制系统如SVN的一个不同之处就是有暂存区的概念。 工作区 在电脑中能看到的目录，比如我在电脑中能看到的learn-Git文件夹就是一个工作区. 版本库 工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。 Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。 前面说过把文件往Git版本库里添加的时候，是分两步执行的： 第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区； 第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。 因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。 你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。git add命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行git commit就可以一次性把暂存区的所有修改提交到分支。","categories":[{"name":"Study","slug":"Study","permalink":"http://yoursite.com/categories/Study/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://yoursite.com/tags/Git/"}]},{"title":"Git的版本退回","slug":"git-2","date":"2019-05-22T15:27:22.000Z","updated":"2019-05-23T10:45:48.551Z","comments":true,"path":"2019/05/22/git-2/","link":"","permalink":"http://yoursite.com/2019/05/22/git-2/","excerpt":"","text":"git的版本退回在对文件不断修改后，每一次的修改记录可以通过最近的commit进行恢复，然后重新修改提交，这一点就像我们玩RPG游戏一样，每通过一关都要SAVE一下，下一关的boss打不过时重新LOAD。 举个例子： 版本1：wrote a readme file 12Git is a version control system.Git is free software. 版本2：add distributed 12Git is a distributed version control system.Git is free software. 版本3：append GPL 12Git is a distributed version control system.Git is free software distributed under the GPL. 在Git中，我们可以通过git log命令查看版本系统中的提交修改历史纪录。git log命令显示从最近到最远的提交日志，每提交一个新版本，实际上Git就会把它们自动串成一条时间线。如果使用可视化工具查看Git历史，就可以更清楚地看到提交历史的时间线. 123456789101112131415161718$ git logcommit 1094adb7b9b3807259d8cb349e7df1d4d6477073 (HEAD -&gt; master)Author: Michael Liao &lt;askxuefeng@gmail.com&gt;Date: Fri May 18 21:06:15 2018 +0800 append GPLcommit e475afc93c209a690c39c13a46716e8fa000c366Author: Michael Liao &lt;askxuefeng@gmail.com&gt;Date: Fri May 18 21:03:36 2018 +0800 add distributedcommit eaadf4e385e865d25c48e7ca9c8395c3f7dfaef0Author: Michael Liao &lt;askxuefeng@gmail.com&gt;Date: Fri May 18 20:59:18 2018 +0800 wrote a readme file 我们可以看到3次提交，最近的一次是append GPL，上一次是add distributed，最早的一次是wrote a readme file。 如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数： 1234$ git log --pretty=oneline1094adb7b9b3807259d8cb349e7df1d4d6477073 (HEAD -&gt; master) append GPLe475afc93c209a690c39c13a46716e8fa000c366 add distributedeaadf4e385e865d25c48e7ca9c8395c3f7dfaef0 wrote a readme file 看到的一大串类似1094adb...的是commit id（版本号） 版本返回 在Git中，用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。 现在，我们要把当前版本回退到上一个版本，就可以使用git reset命令。 再用git log查看现在版本库的状态，就会发现已经返回了，当想要再返回去时，只要上面的命令行窗口还没关闭，找到之前的commit id（版本号） 12$ git reset --hard commit id//commit id的名字不必写全HEAD is now at 83b0afe append GPL//之前的版本 Git的版本回退速度非常快，因为Git在内部有个指向当前版本的HEAD指针，当你回退版本的时候，Git仅仅是把HEAD从指向append GPL： 123456789┌────┐│HEAD│└────┘ │ └──&gt; ○ append GPL │ ○ add distributed │ ○ wrote a readme file 改为指向add distributed： 123456789┌────┐│HEAD│└────┘ │ │ ○ append GPL │ │ └──&gt; ○ add distributed │ ○ wrote a readme file 然后顺便把工作区的文件更新了。所以你让HEAD指向哪个版本号，你就把当前版本定位在哪。 现在，你回退到了某个版本，关掉了电脑，第二天早上就后悔了，想恢复到新版本怎么办？找不到新版本的commit id怎么办？ 在Git中，总是有后悔药可以吃的。当你用$ git reset --hard HEAD^回退到add distributed版本时，再想恢复到append GPL，就必须找到append GPL的commit id。Git提供了一个命令git reflog用来记录你的每一次命令： 12345$ git refloge475afc HEAD@&#123;1&#125;: reset: moving to HEAD^1094adb (HEAD -&gt; master) HEAD@&#123;2&#125;: commit: append GPLe475afc HEAD@&#123;3&#125;: commit: add distributedeaadf4e HEAD@&#123;4&#125;: commit (initial): wrote a readme file 终于舒了口气，从输出可知，append GPL的commit id是1094adb，现在，你又可以乘坐时光机回到未来了。 小结 HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。 穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。 要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。","categories":[{"name":"Study","slug":"Study","permalink":"http://yoursite.com/categories/Study/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://yoursite.com/tags/Git/"}]},{"title":"随笔","slug":"随笔1","date":"2019-05-21T15:58:25.000Z","updated":"2019-05-22T16:19:25.991Z","comments":true,"path":"2019/05/21/随笔1/","link":"","permalink":"http://yoursite.com/2019/05/21/随笔1/","excerpt":"","text":"主题成功换成了Next，果然还是Next集成的好，各种功能都有，开始学习Git了。 今天不学习，明天当咸鱼。","categories":[{"name":"Life","slug":"Life","permalink":"http://yoursite.com/categories/Life/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]},{"title":"Git简介","slug":"git-1","date":"2019-05-21T13:27:29.000Z","updated":"2019-05-23T10:46:34.232Z","comments":true,"path":"2019/05/21/git-1/","link":"","permalink":"http://yoursite.com/2019/05/21/git-1/","excerpt":"","text":"一、Git简史1、Git的诞生Linux 内核开源项目有着为数众多的参与者。 绝大多数的 Linux 内核维护工作都花在了提交补丁和保存归档的繁琐事务上（1991－2002年间）。 到 2002 年，整个项目组开始启用一个专有的分布式版本控制系统 BitKeeper 来管理和维护代码。 到了 2005 年，开发 BitKeeper 的商业公司同 Linux 内核开源社区的合作关系结束，他们收回了 Linux 内核社区免费使用 BitKeeper 的权力。 这就迫使 Linux 开源社区（特别是 Linux 的缔造者 Linus Torvalds）基于使用 BitKeeper 时的经验教训，开发出自己的版本系统。 他们对新的系统制订了若干目标： 速度 简单的设计 对非线性开发模式的强力支持 完全分布式 可以管理超大规模项目 于是就有了Git，这个最流行的分布式版本控制系统（据说Git是由Linux之父LInus花了两周的时间自己用C语言写的）。 2、集中式与分布式先说说什么是版本控制系统？ 版本控制最主要的功能就是追踪文件的变更。它将什么时候、什么人更改了文件的什么内容等信息忠实地了已录下来。每一次文件的改变，文件的版本号都将增加。除了记录版本变更外，版本控制的另一个重要功能是并行开发。软件开发往往是多人协同作业，版本控制可以有效地解决版本的同步以及不同开发者之间的开发通信问题，提高协同开发的效率。并行开发中最常见的不同版本软件的错误(Bug)修正问题也可以通过版本控制中分支与合并的方法有效地解决。 版本控制器下分集中式（SVN、CVS）和分布式（Git）的，二者区别在于： 集中式版本控制系统的版本库是集中存放在中央服务器的，而干活的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始干活，干完活了，再把自己的活推送给中央服务器。中央服务器就好比是一个图书馆，你要改一本书，必须先从图书馆借出来，然后回到家自己改，改完了，再放回图书馆，这一切需要联网才能工作。 分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样，在工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？比方说你在自己电脑上改了文件A，你的同事也在他的电脑上改了文件A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。 和集中式版本控制系统相比，分布式版本控制系统的安全性要高很多，因为每个人电脑里都有完整的版本库，某一个人的电脑坏掉了不要紧，随便从其他人那里复制一个就可以了。而集中式版本控制系统的中央服务器要是出了问题，所有人都没法干活了。 在实际使用分布式版本控制系统的时候，其实很少在两人之间的电脑上推送版本库的修改，因为可能你们俩不在一个局域网内，两台电脑互相访问不了，也可能今天你的同事病了，他的电脑压根没有开机。因此，分布式版本控制系统通常也有一台充当“中央服务器”的电脑，但这个服务器的作用仅仅是用来方便“交换”大家的修改，没有它大家也一样干活，只是交换修改不方便而已。 二、Git基础操作1、获取与创建项目命令git inti 用git init在目录中创建新的Git仓库。你可以在任何时候，任何目录中这么做，完全是本地化的。 在目录中执行git init，就可以创建一个Git仓库了。比如我们创建learn-git项目： 12345$ mkdir learn-git$ cd learn-git /$ git initInitialized empty Git repository in /Users/learn-git/www/learn-git/.git/# 在 /www/learn-git/.git/ 目录初始化空 Git 仓库完毕。 现在你可以看到在你的项目中生成了.git这个子目录。这就是你的Git仓库了，所有有关你的此项目的快照数据都存放在这里。 123ls -axxx文件xxx文件 git clone 使用 git clone 拷贝一个 Git 仓库到本地，让自己能够查看该项目，或者进行修改。 如果你需要与他人合作一个项目，或者想要复制一个项目，看看代码，你就可以克隆那个项目。 执行命令： 1git clone [url] [url] 为你想要复制的项目，就可以了。 例如我们克隆 Github 上的项目： 1234567$ git clone git@github.com:schacon/simplegit.gitCloning into &apos;simplegit&apos;...remote: Counting objects: 13, done.remote: Total 13 (delta 0), reused 0 (delta 0), pack-reused 13Receiving objects: 100% (13/13), done.Resolving deltas: 100% (2/2), done.Checking connectivity... done. 克隆完成后，在当前目录下会生成一个 simplegit 目录： 123$ cd simplegit/$ lsREADME Rakefile lib 上述操作将复制该项目的全部记录。 1234567$ ls -a. .. .git README Rakefile lib$ cd .git$ lsHEAD description info packed-refsbranches hooks logs refsconfig index objects 默认情况下，Git 会按照你提供的 URL 所指示的项目的名称创建你的本地项目目录。 通常就是该 URL 最后一个 / 之后的项目名称。如果你想要一个不一样的名字， 你可以在该命令后加上你想要的名称。 2、基本快照编写一个readme.txt文件，内容如下： 12Git is a version control system.Git is free software. 一定要放到learn-git目录下（子目录也行），因为这是一个Git仓库，放到其他地方Git再厉害也找不到这个文件。 和把大象放到冰箱需要3步相比，把一个文件放到Git仓库只需要两步。 第一步，用命令git add告诉Git，把文件添加到仓库： 1$ git add readme.txt 执行上面的命令，没有任何显示，说明添加成功。 第二步，用命令git commit告诉Git，把文件提交到仓库： 1234$ git commit -m &quot;wrote a readme file&quot;[master (root-commit) eaadf4e] wrote a readme file 1 file changed, 2 insertions(+) create mode 100644 readme.txt 简单解释一下git commit命令，-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。 嫌麻烦不想输入-m &quot;xxx&quot;行不行？确实有办法可以这么干，但是强烈不建议你这么干，因为输入说明对自己对别人阅读都很重要。实在不想输入说明的童鞋请自行Google，我不告诉你这个参数。 git commit命令执行成功后会告诉你，1 file changed：1个文件被改动（我们新添加的readme.txt文件）；2 insertions：插入了两行内容（readme.txt有两行内容）。 为什么Git添加文件需要add，commit一共两步呢？因为commit可以一次提交很多文件，所以你可以多次add不同的文件，比如： 123$ git add file1.txt$ git add file2.txt file3.txt$ git commit -m &quot;add 3 files.&quot; 总结 初始化一个Git仓库，使用git init命令。 添加文件到Git仓库，分两步： 使用命令git add &lt;file&gt;，注意，可反复多次使用，添加多个文件； 使用命令git commit -m &lt;message&gt;，完成。","categories":[{"name":"Study","slug":"Study","permalink":"http://yoursite.com/categories/Study/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://yoursite.com/tags/Git/"}]},{"title":"Javascript基础操作","slug":"js2","date":"2019-05-21T13:23:44.000Z","updated":"2019-05-21T15:26:57.462Z","comments":true,"path":"2019/05/21/js2/","link":"","permalink":"http://yoursite.com/2019/05/21/js2/","excerpt":"","text":"JS的引入1.将JS代码嵌入在元素”事件”中 虽然可以写在标签属性中，但是他们属于结构与行为耦合，不方便维护，不推荐使用。 2.将JS代码嵌入在标签中 3.将JS代码写在外部脚本文件中 写在外部文件中在不同的页面中可以同时引用，也可以利用浏览器的缓存机制，推荐使用。 当script标签一旦用于引用外部文件，就不能再编写代码，即使编写了浏览器也会忽略,如果有需要可以再创建一 个新的script标签用于编写内部代码。 123可以将js代码写在超链接的href属性中，这样当点击超链接时，会执行js代码。&lt;a href=\"javascript:alert('让你点你就点')\"&gt;你也点我一下&lt;/a&gt;&lt;a href=\"javascript:\"&gt;你也点我一下&lt;/a&gt;&lt;!--点击后无响应--&gt; JS中添加注释1234561.js中严格区分大小写2.js中每一条语句以分号（;）结尾不写分号也可以，浏览器会自动添加，但是会消耗一些系统，而且有些时候会加错分号，所以开发中分号必须写（英文）3.js中会忽略多个空格和换行，所以我们可以利用空格和换行对代码进行格式化4./*js文件中注释，多行注释，注释中的内容不会被执行，但是可以在源代码中查看*/ //单行注释 JS变量声明变量 1234567&lt;script&gt; var a; /*声明和赋值可以同时,在js中使用var关键字来声明一个变量*/ a= 123; console.log(a); var b=1345; console.log(b);&lt;/script&gt; 标识符 12345678910-在JS中所有可以由我们自主命名的都可以成为标识符-例如：变量名、函数名、属性名都属于标识符-命名标识符时需要遵循一下原则1.标识符中可以含有字母、数字、_、$2.标识符不能以数字开头3.标识符不能是ES中的关键字和保留字4.标识符一般都采用驼峰命名法-首字母小写，每个单词的开头字母大写，其余字母小写例如：helloWorld xxxYyyZzz-JS底层保存标识符实际上是采用Unicode编码，所以理论上讲所有utf-8中含有的内容都可以作为标识符（汉字） 三个关键输出语句123456789101112131415&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;script&gt; alert(\"哥，你真帅啊\");/*在浏览器窗口弹出一个警告框*/ document.write(\"看我出不出来\");/*文档显示，向body中输出一个内容*/ console.log(\"你猜我在哪出来呢\");/*向控制台输出一个内容*/ /*从上到下依次执行*/ &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"Study","slug":"Study","permalink":"http://yoursite.com/categories/Study/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"http://yoursite.com/tags/Javascript/"}]},{"title":"随笔","slug":"随笔","date":"2019-05-16T16:21:14.000Z","updated":"2019-05-16T16:28:47.224Z","comments":true,"path":"2019/05/17/随笔/","link":"","permalink":"http://yoursite.com/2019/05/17/随笔/","excerpt":"","text":"发现写的文章内容过长时会无法正常显示，目前这个问题还没能解决，加&lt;!--more--&gt;会无法显示出“阅读全文”。或许应该换一个主题了，等假期试试能不能自己做一个。","categories":[{"name":"Life","slug":"Life","permalink":"http://yoursite.com/categories/Life/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]},{"title":"JavaScript简介","slug":"Javascript1","date":"2019-05-09T09:09:56.000Z","updated":"2019-05-13T13:27:31.132Z","comments":true,"path":"2019/05/09/Javascript1/","link":"","permalink":"http://yoursite.com/2019/05/09/Javascript1/","excerpt":"Javascript简介简史 Javascript是由网景公司发明，最初命名为LiveScript，后来由于SUN公司的介入更名为Javascript。 1996年微软公司在其最新的IE3浏览器中引入了自己对Javascript的实现JScript。 于是市面上存在两个版本的Javascript，一个是网景公司的Javascript和微软的JScript。 为了确保不同的浏览器上运行的Javascript标准一致，所以几个公司共同制定了JS的标准命名为ECMAScript.","text":"Javascript简介简史 Javascript是由网景公司发明，最初命名为LiveScript，后来由于SUN公司的介入更名为Javascript。 1996年微软公司在其最新的IE3浏览器中引入了自己对Javascript的实现JScript。 于是市面上存在两个版本的Javascript，一个是网景公司的Javascript和微软的JScript。 为了确保不同的浏览器上运行的Javascript标准一致，所以几个公司共同制定了JS的标准命名为ECMAScript. 实现 ECMAScript是一个标准，而这个标准需要各个厂商去实现。 不同的浏览器厂商对该标准有不同的实现。 | 浏览器 | Javascript实现方式 || ———- | —————–: || FireFox | SpiderMonkey || IE | JScript/Chakra || Safari | JavascriptCore || Chrome | V8 | 注：Chrome浏览器是对Javascript实现最好的 特点 JS的特点 —解释型语言 —类似于C和Java的语法结构 —动态语言 —基于原型的面向对象 —弱类型语言由数据来决定数据类型 组成1.核心(ECMAScript)2.文档对象模型(DOM,Document Object Model) 让JS有能力与网页进行对话3.浏览器对象模型(BOM,Browser Object Model) 让JS有能力与浏览器进行对话 运行环境1.直接在浏览器Console（F12）中输入并执行JS2.将JS脚本嵌入在HTML页面中执行","categories":[{"name":"Study","slug":"Study","permalink":"http://yoursite.com/categories/Study/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"http://yoursite.com/tags/Javascript/"}]},{"title":"读书笔记-《黑客与画家》-2","slug":"读书笔记1","date":"2019-05-07T14:43:56.000Z","updated":"2019-05-07T15:49:02.245Z","comments":true,"path":"2019/05/07/读书笔记1/","link":"","permalink":"http://yoursite.com/2019/05/07/读书笔记1/","excerpt":"黑客与画家如何去学习编程?正如画家学习绘画的方法主要是动手去画，黑客学习编程的方法也理应如此。大多数黑客不是通过大学课程学会编程的，他们从实践中学习。黑客通过实践学习编程这是一个标志，说明黑客与科学家的区别在于：科学家不会通过干活来学习科学，而是通过做实验和解题来学习，黑客出发点是原创，最终得到一个优美的","text":"黑客与画家如何去学习编程?正如画家学习绘画的方法主要是动手去画，黑客学习编程的方法也理应如此。大多数黑客不是通过大学课程学会编程的，他们从实践中学习。黑客通过实践学习编程这是一个标志，说明黑客与科学家的区别在于：科学家不会通过干活来学习科学，而是通过做实验和解题来学习，黑客出发点是原创，最终得到一个优美的 结果；而科学家的出发点是别人的优美的结果，最终得到原创性。 创作者另一个学习途径是通过范例。对画家来说，博物馆就是美术技巧的图书馆。同样的，黑客可以通过观看优秀的程序学会编程，不是看它们的执行结果，而是看它们的源代码。 在编程时，你不能盼望先有一个完美的规格设计，然后再动手编程，这样是不现实的。如果你预先承认规格设计是不完美的，在编程的时候，就可以根据需要当场修改规格，最总会有一个更好的结果。 伟大的画家对待自己每一份作品都一丝不苟，优秀的软件也要求对美的狂热追求，如果你查看优秀软件的内部，就会发现那些预料中没有人会看见的部分也是优美的。 黑客与画家一样，工作起来是有心理周期的，在工作时要去投入巨大的热情，其他不需要操心的琐碎事在厌倦的时候去做是一个不错的选择。 普通黑客与优秀黑客的所有区别之中，会不会“换位思考”可能是最总要的单个因素。判断一个人是否具备“换位思考”的能力有一个好方法，那就是看他怎么向没有技术背景的人解释技术问题。软件的部分功能就是解释自身，为了写出优秀的软件你必须假设用户对软件一无所知他们不会看用户手册的。程序是写给人看的，附带能在机器上运行。 现在正是编程的黄金年代，编程到底能够有多酷，取决于我们能够用这种媒介做出怎样的工作!","categories":[{"name":"Life","slug":"Life","permalink":"http://yoursite.com/categories/Life/"}],"tags":[{"name":"读书笔记","slug":"读书笔记","permalink":"http://yoursite.com/tags/读书笔记/"}]},{"title":"读书笔记-《黑客与画家》-3","slug":"读书笔记2","date":"2019-05-07T14:43:56.000Z","updated":"2019-05-08T16:08:07.826Z","comments":true,"path":"2019/05/07/读书笔记2/","link":"","permalink":"http://yoursite.com/2019/05/07/读书笔记2/","excerpt":"","text":"不能说的话所谓“流行”本质上就是自己看不见自己的样子。否则就不会有流行了，对于那些被流行抓住的人，流行就不再是流行，而是应该要做的正确事情。只有保持一定的距离才能观察到人们观念的变化，发现流行（也就是人们自以为正确的事）到底是什么。 你如果想要清晰地思考，就必须远离人群。但走的越远，你的处境就会越困难，受到的阻力也会越大，应为你没有迎合社会习俗，而是一步步地与它背道而驰。小时候每个人都会鼓励你不断成长，但是很少有人鼓励你继续成长，变成一个怀疑和抵制社会错误潮流的人。如果自己就是潮水的一部分，怎么能看见潮流的方向？","categories":[{"name":"Life","slug":"Life","permalink":"http://yoursite.com/categories/Life/"}],"tags":[{"name":"读书笔记","slug":"读书笔记","permalink":"http://yoursite.com/tags/读书笔记/"}]},{"title":"Markdown基础语法","slug":"Markdown基础语法-1","date":"2019-05-05T12:41:20.000Z","updated":"2019-05-06T15:27:09.204Z","comments":true,"path":"2019/05/05/Markdown基础语法-1/","link":"","permalink":"http://yoursite.com/2019/05/05/Markdown基础语法-1/","excerpt":"前言Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，可以使普通文本内容具有一定的格式，应用于文档快速排版，有着简单、轻量的特点。详细介绍见Markdown","text":"前言Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，可以使普通文本内容具有一定的格式，应用于文档快速排版，有着简单、轻量的特点。详细介绍见Markdown 一、标题在想要设为标题的文字前加#，#后面添加空格。 一个#是一级标题，两个#是二级标题，支持1-6级标题（如果你有HTML的基础，相信这些对你来说很好理解） 示例： 1234561.# 一级标题2.## 二级标题3.### 三级标题4.#### 四级标题5.##### 五级标题6.###### 六级标题 效果： 一级标题二级标题三级标题四级标题五级标题六级标题二、字体加粗 要加粗的文字前后用两个*包裹 斜体 要倾斜的文字前后用一个*包裹 斜体加粗 要倾斜加粗的文字前后用三个***包裹 删除线 要加删除线的文字前后用两个~~包裹 示例： 1234**文字加粗***文字倾斜****文字加粗倾斜***~~文字删除线~~ 效果： 文字加粗文字倾斜文字加粗倾斜文字删除线 注脚： 使用 [^keyword] 表示注脚。 这是一个注脚[^footnote]的样例。 这是第二个注脚[^footnote2]的样例。 12345678910111213141516内容区内容区内容区内容区内容区内容区内容区内容区内容区内容区内容区内容区内容区内容区内容区内容区 [^footnote]: 这是一个 注脚 的 文本。[^footnote2]: 这是另一个 注脚 的 文本。 三、引用在引用的文字前加&gt;,引用可以嵌套。 示例： 1&gt;引用内容 效果： 引用内容 四、插入图片1234![图片alt](图片地址 &apos;&apos;图片title&apos;&apos;)图片alt是对图片内容的解释。图片title是图片的标题，当鼠标移到图片上时显示的内容，itle可加可不加。 示例： 五、分割线用三个或三个以上的*或-表示 示例： 12341.---2.----3.***4.**** 效果： 六、超链接1[超链接名]（超链接地址 &quot;超链接title&quot;）title可加可不加 示例： 1[百度](http://baidu.com) 效果： 百度 七、列表一、无序列表 在列表内容前用+或-或 *加空格 示例： 1231.+ 列表内容2.- 列表内容3.* 列表内容 效果： 列表内容 列表内容 列表内容 二、有序列表 在列表内容前数字加点加空格 示例： 1231. 列表内容2. 列表内容3. 列表内容 效果： 列表内容 列表内容 列表内容 三、列表嵌套 可以有序套有序、有序套无序、无序套无序、无序套有序 在上一级和下一级之间加三个空格 八、表格12345| 项目 | 价格 | 数量 || -------- | -----: | :----: || 计算机 | \\$1600 | 5 || 手机 | \\$12 | 12 || 管线 | \\$1 | 234 | 文字默认居左-两边加：表示文字居中-右边加：表示文字居右,第二行分割表头和内容,-有一个就可以。 效果： 项目 价格 数量 计算机 \\$1600 5 手机 \\$12 12 管线 \\$1 234 九、代码块行内代码块，使用 `代码` 表示行内代码块。 示例： 让我们聊聊 html。 单行代码：代码之间分别用一个反引号包起来 1`代码内容` 代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行 1​ 代码… 代码… 代码…​12345678910111213```示例：`代码内容````c++#include &lt;iostream&gt;using namespace std;int main()&#123; return 0;&#125; 十、LaTeX公式LaTeX 公式 $ 表示行内公式： 质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。 $$ 表示整行公式： $$\\sum_{i=1}^n a_i=0$$ $$f(x_1,x_x,\\ldots,x_n) = x_1^2 + x_2^2 + \\cdots + x_n^2 $$ $$\\sum^{j-1}{k=0}{\\widehat{\\gamma}{kj} z_k}$$ 访问 MathJax 参考更多使用方法。 十一、图流程图示例 1123Alice-&gt;Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob--&gt;Alice: I am good thanks! 示例 212345Title: Here is a titleA-&gt;B: Normal lineB--&gt;C: Dashed lineC-&gt;&gt;D: Open arrowD--&gt;&gt;A: Dashed open arrow 更多语法参考：序列图语法参考甘特图甘特图内在思想简单。基本是一条线条图，横轴表示时间，纵轴表示活动（项目），线条表示在整个期间上计划和实际的活动完成情况。它直观地表明任务计划在什么时候进行，及实际进展与计划要求的对比。 12345678910111213title 项目开发流程section 项目确定 需求分析 :a1, 2016-06-22, 3d 可行性报告 :after a1, 5d 概念验证 : 5dsection 项目实施 概要设计 :2016-07-05 , 5d 详细设计 :2016-07-08, 10d 编码 :2016-07-15, 10d 测试 :2016-07-22, 5dsection 发布验收 发布: 2d 验收: 3d 更多语法参考：甘特图语法参考Mermaid 流程图1234A[Hard edge] --&gt;|Link text| B(Round edge)B --&gt; C&#123;Decision&#125;C --&gt;|One| D[Result one]C --&gt;|Two| E[Result two] 更多语法参考：Mermaid 流程图语法参考Mermaid 序列图1234Alice-&gt;John: Hello John, how are you?loop every minute John--&gt;Alice: Great!end 更多语法参考：Mermaid 序列图语法参考后序部分Markdown语法在不同的编译器上显示的效果有小部分不同，有些编译器可以显示出甘特图，有些没有效果的显示，我所用的编译器是Cmd Markdown,功能较为全面而且能同步到云端，后续我会单独写一篇文对当前市面上大部分的Markdown编译器进行一个详细的对比评价。","categories":[],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://yoursite.com/tags/Markdown/"}]},{"title":"建站历史-2","slug":"建站历史-2","date":"2019-05-04T09:59:12.000Z","updated":"2019-05-04T10:07:04.152Z","comments":true,"path":"2019/05/04/建站历史-2/","link":"","permalink":"http://yoursite.com/2019/05/04/建站历史-2/","excerpt":"","text":"解决了文章无法显示标签和分类，问题出在Markdown文本中tags:，再一次被中英文符号坑了。 解决文章摘要问题。 去除了页面右侧看板娘，去除了页面左侧网易云音乐。 添加了站内到访数和页面访问量。","categories":[],"tags":[{"name":"建站历史","slug":"建站历史","permalink":"http://yoursite.com/tags/建站历史/"}]},{"title":"读书笔记-《黑客与画家》-1","slug":"读书笔记","date":"2019-05-04T01:56:58.000Z","updated":"2019-05-05T12:38:07.955Z","comments":true,"path":"2019/05/04/读书笔记/","link":"","permalink":"http://yoursite.com/2019/05/04/读书笔记/","excerpt":"为什么书呆子不受欢迎？书呆子们不受欢迎的原因在于他们脑子中想的其他的事情，这里“其他”是指他们并不热衷于大众、流行的事情，他们清楚的明白做这些事情并不能对自身有所提升，他们的注意力都放在读书或是观察世界上，而不是穿衣打扮、开晚会上面。","text":"为什么书呆子不受欢迎？书呆子们不受欢迎的原因在于他们脑子中想的其他的事情，这里“其他”是指他们并不热衷于大众、流行的事情，他们清楚的明白做这些事情并不能对自身有所提升，他们的注意力都放在读书或是观察世界上，而不是穿衣打扮、开晚会上面。 书呆子在学校中不受欢迎=受欺负。一般来说成年人不回去欺负书呆子 ，小孩子才会这样。其中原因，一方面是为了使自己感觉好些，你踩水时，水踩下去，你就会浮上来。同样，在任何社会等级制度中，那些对自己没自信的人就会通过欺负他们眼中的下等人来凸显自己地位。另一方面，欺负书呆子也与如何受欢迎有关。如何才能更受欢迎，除了个人魅力，考虑结盟是重要一点。没有什么比一个共同的敌人能使人们更团结了。 所以一群人的虐待远比一个人的虐待残酷的多。 事实上，最受欢迎的孩子并不需要踩在书呆子身上来垫高自己，大部分的欺负来自于处于下一等级的学生，那些数量庞大而处于焦虑的中间层。 书呆子并不是失败者，他们只是在玩着一个与众不同的游戏，一个更加接近真实世界的游戏，学校像是一个小型的人生，里面无所不包，但又不是世界真实的样子，它只是一个暂时的过程，只要你向前看，你就能超越它。 校园生活的真正问题是空虚，书呆子们过的却格外丰富。","categories":[{"name":"Life","slug":"Life","permalink":"http://yoursite.com/categories/Life/"}],"tags":[{"name":"读书笔记","slug":"读书笔记","permalink":"http://yoursite.com/tags/读书笔记/"}]},{"title":"建站历史-1","slug":"建站历史-1","date":"2019-05-03T16:32:13.000Z","updated":"2019-05-04T09:53:12.091Z","comments":true,"path":"2019/05/04/建站历史-1/","link":"","permalink":"http://yoursite.com/2019/05/04/建站历史-1/","excerpt":"","text":"标签和分类添加失败，试过多次，这个问题很关键，影响后续博客的整理，一定要解决。文章摘要设置失败，莫名其妙的错误。npm i --save hexo-wordcount安装失败，相同的错误，修复失败，字数和阅读时长统计对文章的美化有很大帮助，总之就是错误一堆。后续要添加的功能： 鼠标点击效果 评论区","categories":[],"tags":[{"name":"建站历史","slug":"建站历史","permalink":"http://yoursite.com/tags/建站历史/"}]},{"title":"我的第一篇博客","slug":"我的第一篇博客","date":"2019-04-28T07:59:30.000Z","updated":"2019-05-04T03:12:32.790Z","comments":true,"path":"2019/04/28/我的第一篇博客/","link":"","permalink":"http://yoursite.com/2019/04/28/我的第一篇博客/","excerpt":"在踩坑中学习在4月28日的时候看着b站上的视频，一步一步将博客搭建部署起来，其中踩过的坑不计其数，git不怎么会用，面对dos界面中的各种error，简直是煎熬。当时也就停留在搭建一个框架了，终于等到五一劳动节，有大把时间可以完善博客后续的功能，添加主题，改图标背景，加头像，加音乐，看似几个简单的步骤，可就是有许多莫名其妙的error,查过的博客已经数不清了，查错的过程也算是历练的一种吧，现在把所有的坑踩完了，以后就不会踩了（或许）。","text":"在踩坑中学习在4月28日的时候看着b站上的视频，一步一步将博客搭建部署起来，其中踩过的坑不计其数，git不怎么会用，面对dos界面中的各种error，简直是煎熬。当时也就停留在搭建一个框架了，终于等到五一劳动节，有大把时间可以完善博客后续的功能，添加主题，改图标背景，加头像，加音乐，看似几个简单的步骤，可就是有许多莫名其妙的error,查过的博客已经数不清了，查错的过程也算是历练的一种吧，现在把所有的坑踩完了，以后就不会踩了（或许）。 为什么要建这个博客？总结下来就八个字：积累自己，分享知识将个人的学习心得记录下来，在初入这个专业的时候，我一直希望有一个人能够带带我，但是这种人太少了，知乎是个好东西，它让我这个普通的人看到了更大的世界，从生活到学习，知乎上的回答给了我很多帮助，上大学后，CSDN也对我影响不小。所以我总想着要做些什么，也能帮助他人，这个博客的内容如果对你有用，那将是我的荣幸了。","categories":[{"name":"Life","slug":"Life","permalink":"http://yoursite.com/categories/Life/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]}]}