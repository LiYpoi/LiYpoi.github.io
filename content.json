{"meta":{"title":"Thinking&Coding","subtitle":"我们有很多的声音而没有真理，我们来自一个良心却各自藏起。","description":"斜杠青年","author":"LiY","url":"http://yoursite.com","root":"/LiYpoi.github.io/"},"pages":[{"title":"categories","date":"2019-05-19T04:25:10.000Z","updated":"2019-05-19T04:27:50.169Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-05-19T04:18:58.000Z","updated":"2019-05-19T04:24:40.459Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"随笔","slug":"随笔1","date":"2019-05-21T15:58:25.000Z","updated":"2019-05-21T16:03:26.591Z","comments":true,"path":"2019/05/21/随笔1/","link":"","permalink":"http://yoursite.com/2019/05/21/随笔1/","excerpt":"","text":"主题成功换成了Next，果然还是Next集成的好，各种功能都有，开始学习Git了。 今天不学习，明天当咸鱼。","categories":[{"name":"Life","slug":"Life","permalink":"http://yoursite.com/categories/Life/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]},{"title":"Git学习笔记-1","slug":"git-1","date":"2019-05-21T13:27:29.000Z","updated":"2019-05-21T13:28:46.930Z","comments":true,"path":"2019/05/21/git-1/","link":"","permalink":"http://yoursite.com/2019/05/21/git-1/","excerpt":"","text":"一、Git简史1、Git的诞生Linux 内核开源项目有着为数众多的参与者。 绝大多数的 Linux 内核维护工作都花在了提交补丁和保存归档的繁琐事务上（1991－2002年间）。 到 2002 年，整个项目组开始启用一个专有的分布式版本控制系统 BitKeeper 来管理和维护代码。 到了 2005 年，开发 BitKeeper 的商业公司同 Linux 内核开源社区的合作关系结束，他们收回了 Linux 内核社区免费使用 BitKeeper 的权力。 这就迫使 Linux 开源社区（特别是 Linux 的缔造者 Linus Torvalds）基于使用 BitKeeper 时的经验教训，开发出自己的版本系统。 他们对新的系统制订了若干目标： 速度 简单的设计 对非线性开发模式的强力支持 完全分布式 可以管理超大规模项目 于是就有了Git，这个最流行的分布式版本控制系统（据说Git是由Linux之父LInus花了两周的时间自己用C语言写的）。 2、集中式与分布式先说说什么是版本控制系统？ 版本控制最主要的功能就是追踪文件的变更。它将什么时候、什么人更改了文件的什么内容等信息忠实地了已录下来。每一次文件的改变，文件的版本号都将增加。除了记录版本变更外，版本控制的另一个重要功能是并行开发。软件开发往往是多人协同作业，版本控制可以有效地解决版本的同步以及不同开发者之间的开发通信问题，提高协同开发的效率。并行开发中最常见的不同版本软件的错误(Bug)修正问题也可以通过版本控制中分支与合并的方法有效地解决。 版本控制器下分集中式（SVN、CVS）和分布式（Git）的，二者区别在于： 集中式版本控制系统的版本库是集中存放在中央服务器的，而干活的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始干活，干完活了，再把自己的活推送给中央服务器。中央服务器就好比是一个图书馆，你要改一本书，必须先从图书馆借出来，然后回到家自己改，改完了，再放回图书馆，这一切需要联网才能工作。 分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样，在工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？比方说你在自己电脑上改了文件A，你的同事也在他的电脑上改了文件A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。 和集中式版本控制系统相比，分布式版本控制系统的安全性要高很多，因为每个人电脑里都有完整的版本库，某一个人的电脑坏掉了不要紧，随便从其他人那里复制一个就可以了。而集中式版本控制系统的中央服务器要是出了问题，所有人都没法干活了。 在实际使用分布式版本控制系统的时候，其实很少在两人之间的电脑上推送版本库的修改，因为可能你们俩不在一个局域网内，两台电脑互相访问不了，也可能今天你的同事病了，他的电脑压根没有开机。因此，分布式版本控制系统通常也有一台充当“中央服务器”的电脑，但这个服务器的作用仅仅是用来方便“交换”大家的修改，没有它大家也一样干活，只是交换修改不方便而已。 二、Git基础操作1、获取与创建项目命令git inti 用git init在目录中创建新的Git仓库。你可以在任何时候，任何目录中这么做，完全是本地化的。 在目录中执行git init，就可以创建一个Git仓库了。比如我们创建learn-git项目： 12345$ mkdir learn-git$ cd learn-git /$ git initInitialized empty Git repository in /Users/learn-git/www/learn-git/.git/# 在 /www/learn-git/.git/ 目录初始化空 Git 仓库完毕。 现在你可以看到在你的项目中生成了.git这个子目录。这就是你的Git仓库了，所有有关你的此项目的快照数据都存放在这里。 123ls -axxx文件xxx文件 git clone 使用 git clone 拷贝一个 Git 仓库到本地，让自己能够查看该项目，或者进行修改。 如果你需要与他人合作一个项目，或者想要复制一个项目，看看代码，你就可以克隆那个项目。 执行命令： 1git clone [url] [url] 为你想要复制的项目，就可以了。 例如我们克隆 Github 上的项目： 1234567$ git clone git@github.com:schacon/simplegit.gitCloning into &apos;simplegit&apos;...remote: Counting objects: 13, done.remote: Total 13 (delta 0), reused 0 (delta 0), pack-reused 13Receiving objects: 100% (13/13), done.Resolving deltas: 100% (2/2), done.Checking connectivity... done. 克隆完成后，在当前目录下会生成一个 simplegit 目录： 123$ cd simplegit/$ lsREADME Rakefile lib 上述操作将复制该项目的全部记录。 1234567$ ls -a. .. .git README Rakefile lib$ cd .git$ lsHEAD description info packed-refsbranches hooks logs refsconfig index objects 默认情况下，Git 会按照你提供的 URL 所指示的项目的名称创建你的本地项目目录。 通常就是该 URL 最后一个 / 之后的项目名称。如果你想要一个不一样的名字， 你可以在该命令后加上你想要的名称。 2、基本快照编写一个readme.txt文件，内容如下： 12Git is a version control system.Git is free software. 一定要放到learn-git目录下（子目录也行），因为这是一个Git仓库，放到其他地方Git再厉害也找不到这个文件。 和把大象放到冰箱需要3步相比，把一个文件放到Git仓库只需要两步。 第一步，用命令git add告诉Git，把文件添加到仓库： 1$ git add readme.txt 执行上面的命令，没有任何显示，说明添加成功。 第二步，用命令git commit告诉Git，把文件提交到仓库： 1234$ git commit -m &quot;wrote a readme file&quot;[master (root-commit) eaadf4e] wrote a readme file 1 file changed, 2 insertions(+) create mode 100644 readme.txt 简单解释一下git commit命令，-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。 嫌麻烦不想输入-m &quot;xxx&quot;行不行？确实有办法可以这么干，但是强烈不建议你这么干，因为输入说明对自己对别人阅读都很重要。实在不想输入说明的童鞋请自行Google，我不告诉你这个参数。 git commit命令执行成功后会告诉你，1 file changed：1个文件被改动（我们新添加的readme.txt文件）；2 insertions：插入了两行内容（readme.txt有两行内容）。 为什么Git添加文件需要add，commit一共两步呢？因为commit可以一次提交很多文件，所以你可以多次add不同的文件，比如： 123$ git add file1.txt$ git add file2.txt file3.txt$ git commit -m &quot;add 3 files.&quot; 总结 初始化一个Git仓库，使用git init命令。 添加文件到Git仓库，分两步： 使用命令git add &lt;file&gt;，注意，可反复多次使用，添加多个文件； 使用命令git commit -m &lt;message&gt;，完成。","categories":[{"name":"Study","slug":"Study","permalink":"http://yoursite.com/categories/Study/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://yoursite.com/tags/Git/"}]},{"title":"Javascript基础操作","slug":"js2","date":"2019-05-21T13:23:44.000Z","updated":"2019-05-21T15:26:57.462Z","comments":true,"path":"2019/05/21/js2/","link":"","permalink":"http://yoursite.com/2019/05/21/js2/","excerpt":"","text":"JS的引入1.将JS代码嵌入在元素”事件”中 虽然可以写在标签属性中，但是他们属于结构与行为耦合，不方便维护，不推荐使用。 2.将JS代码嵌入在标签中 3.将JS代码写在外部脚本文件中 写在外部文件中在不同的页面中可以同时引用，也可以利用浏览器的缓存机制，推荐使用。 当script标签一旦用于引用外部文件，就不能再编写代码，即使编写了浏览器也会忽略,如果有需要可以再创建一 个新的script标签用于编写内部代码。 123可以将js代码写在超链接的href属性中，这样当点击超链接时，会执行js代码。&lt;a href=\"javascript:alert('让你点你就点')\"&gt;你也点我一下&lt;/a&gt;&lt;a href=\"javascript:\"&gt;你也点我一下&lt;/a&gt;&lt;!--点击后无响应--&gt; JS中添加注释1234561.js中严格区分大小写2.js中每一条语句以分号（;）结尾不写分号也可以，浏览器会自动添加，但是会消耗一些系统，而且有些时候会加错分号，所以开发中分号必须写（英文）3.js中会忽略多个空格和换行，所以我们可以利用空格和换行对代码进行格式化4./*js文件中注释，多行注释，注释中的内容不会被执行，但是可以在源代码中查看*/ //单行注释 JS变量声明变量 1234567&lt;script&gt; var a; /*声明和赋值可以同时,在js中使用var关键字来声明一个变量*/ a= 123; console.log(a); var b=1345; console.log(b);&lt;/script&gt; 标识符 12345678910-在JS中所有可以由我们自主命名的都可以成为标识符-例如：变量名、函数名、属性名都属于标识符-命名标识符时需要遵循一下原则1.标识符中可以含有字母、数字、_、$2.标识符不能以数字开头3.标识符不能是ES中的关键字和保留字4.标识符一般都采用驼峰命名法-首字母小写，每个单词的开头字母大写，其余字母小写例如：helloWorld xxxYyyZzz-JS底层保存标识符实际上是采用Unicode编码，所以理论上讲所有utf-8中含有的内容都可以作为标识符（汉字） 三个关键输出语句123456789101112131415&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;script&gt; alert(\"哥，你真帅啊\");/*在浏览器窗口弹出一个警告框*/ document.write(\"看我出不出来\");/*文档显示，向body中输出一个内容*/ console.log(\"你猜我在哪出来呢\");/*向控制台输出一个内容*/ /*从上到下依次执行*/ &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"Study","slug":"Study","permalink":"http://yoursite.com/categories/Study/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"http://yoursite.com/tags/Javascript/"}]},{"title":"随笔","slug":"随笔","date":"2019-05-16T16:21:14.000Z","updated":"2019-05-16T16:28:47.224Z","comments":true,"path":"2019/05/17/随笔/","link":"","permalink":"http://yoursite.com/2019/05/17/随笔/","excerpt":"","text":"发现写的文章内容过长时会无法正常显示，目前这个问题还没能解决，加&lt;!--more--&gt;会无法显示出“阅读全文”。或许应该换一个主题了，等假期试试能不能自己做一个。","categories":[{"name":"Life","slug":"Life","permalink":"http://yoursite.com/categories/Life/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]},{"title":"JavaScript简介","slug":"Javascript1","date":"2019-05-09T09:09:56.000Z","updated":"2019-05-13T13:27:31.132Z","comments":true,"path":"2019/05/09/Javascript1/","link":"","permalink":"http://yoursite.com/2019/05/09/Javascript1/","excerpt":"Javascript简介简史 Javascript是由网景公司发明，最初命名为LiveScript，后来由于SUN公司的介入更名为Javascript。 1996年微软公司在其最新的IE3浏览器中引入了自己对Javascript的实现JScript。 于是市面上存在两个版本的Javascript，一个是网景公司的Javascript和微软的JScript。 为了确保不同的浏览器上运行的Javascript标准一致，所以几个公司共同制定了JS的标准命名为ECMAScript.","text":"Javascript简介简史 Javascript是由网景公司发明，最初命名为LiveScript，后来由于SUN公司的介入更名为Javascript。 1996年微软公司在其最新的IE3浏览器中引入了自己对Javascript的实现JScript。 于是市面上存在两个版本的Javascript，一个是网景公司的Javascript和微软的JScript。 为了确保不同的浏览器上运行的Javascript标准一致，所以几个公司共同制定了JS的标准命名为ECMAScript. 实现 ECMAScript是一个标准，而这个标准需要各个厂商去实现。 不同的浏览器厂商对该标准有不同的实现。 | 浏览器 | Javascript实现方式 || ———- | —————–: || FireFox | SpiderMonkey || IE | JScript/Chakra || Safari | JavascriptCore || Chrome | V8 | 注：Chrome浏览器是对Javascript实现最好的 特点 JS的特点 —解释型语言 —类似于C和Java的语法结构 —动态语言 —基于原型的面向对象 —弱类型语言由数据来决定数据类型 组成1.核心(ECMAScript)2.文档对象模型(DOM,Document Object Model) 让JS有能力与网页进行对话3.浏览器对象模型(BOM,Browser Object Model) 让JS有能力与浏览器进行对话 运行环境1.直接在浏览器Console（F12）中输入并执行JS2.将JS脚本嵌入在HTML页面中执行","categories":[{"name":"Study","slug":"Study","permalink":"http://yoursite.com/categories/Study/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"http://yoursite.com/tags/Javascript/"}]},{"title":"读书笔记-《黑客与画家》-2","slug":"读书笔记1","date":"2019-05-07T14:43:56.000Z","updated":"2019-05-07T15:49:02.245Z","comments":true,"path":"2019/05/07/读书笔记1/","link":"","permalink":"http://yoursite.com/2019/05/07/读书笔记1/","excerpt":"黑客与画家如何去学习编程?正如画家学习绘画的方法主要是动手去画，黑客学习编程的方法也理应如此。大多数黑客不是通过大学课程学会编程的，他们从实践中学习。黑客通过实践学习编程这是一个标志，说明黑客与科学家的区别在于：科学家不会通过干活来学习科学，而是通过做实验和解题来学习，黑客出发点是原创，最终得到一个优美的","text":"黑客与画家如何去学习编程?正如画家学习绘画的方法主要是动手去画，黑客学习编程的方法也理应如此。大多数黑客不是通过大学课程学会编程的，他们从实践中学习。黑客通过实践学习编程这是一个标志，说明黑客与科学家的区别在于：科学家不会通过干活来学习科学，而是通过做实验和解题来学习，黑客出发点是原创，最终得到一个优美的 结果；而科学家的出发点是别人的优美的结果，最终得到原创性。 创作者另一个学习途径是通过范例。对画家来说，博物馆就是美术技巧的图书馆。同样的，黑客可以通过观看优秀的程序学会编程，不是看它们的执行结果，而是看它们的源代码。 在编程时，你不能盼望先有一个完美的规格设计，然后再动手编程，这样是不现实的。如果你预先承认规格设计是不完美的，在编程的时候，就可以根据需要当场修改规格，最总会有一个更好的结果。 伟大的画家对待自己每一份作品都一丝不苟，优秀的软件也要求对美的狂热追求，如果你查看优秀软件的内部，就会发现那些预料中没有人会看见的部分也是优美的。 黑客与画家一样，工作起来是有心理周期的，在工作时要去投入巨大的热情，其他不需要操心的琐碎事在厌倦的时候去做是一个不错的选择。 普通黑客与优秀黑客的所有区别之中，会不会“换位思考”可能是最总要的单个因素。判断一个人是否具备“换位思考”的能力有一个好方法，那就是看他怎么向没有技术背景的人解释技术问题。软件的部分功能就是解释自身，为了写出优秀的软件你必须假设用户对软件一无所知他们不会看用户手册的。程序是写给人看的，附带能在机器上运行。 现在正是编程的黄金年代，编程到底能够有多酷，取决于我们能够用这种媒介做出怎样的工作!","categories":[{"name":"Life","slug":"Life","permalink":"http://yoursite.com/categories/Life/"}],"tags":[{"name":"读书笔记","slug":"读书笔记","permalink":"http://yoursite.com/tags/读书笔记/"}]},{"title":"读书笔记-《黑客与画家》-3","slug":"读书笔记2","date":"2019-05-07T14:43:56.000Z","updated":"2019-05-08T16:08:07.826Z","comments":true,"path":"2019/05/07/读书笔记2/","link":"","permalink":"http://yoursite.com/2019/05/07/读书笔记2/","excerpt":"","text":"不能说的话所谓“流行”本质上就是自己看不见自己的样子。否则就不会有流行了，对于那些被流行抓住的人，流行就不再是流行，而是应该要做的正确事情。只有保持一定的距离才能观察到人们观念的变化，发现流行（也就是人们自以为正确的事）到底是什么。 你如果想要清晰地思考，就必须远离人群。但走的越远，你的处境就会越困难，受到的阻力也会越大，应为你没有迎合社会习俗，而是一步步地与它背道而驰。小时候每个人都会鼓励你不断成长，但是很少有人鼓励你继续成长，变成一个怀疑和抵制社会错误潮流的人。如果自己就是潮水的一部分，怎么能看见潮流的方向？","categories":[{"name":"Life","slug":"Life","permalink":"http://yoursite.com/categories/Life/"}],"tags":[{"name":"读书笔记","slug":"读书笔记","permalink":"http://yoursite.com/tags/读书笔记/"}]},{"title":"Markdown基础语法","slug":"Markdown基础语法-1","date":"2019-05-05T12:41:20.000Z","updated":"2019-05-06T15:27:09.204Z","comments":true,"path":"2019/05/05/Markdown基础语法-1/","link":"","permalink":"http://yoursite.com/2019/05/05/Markdown基础语法-1/","excerpt":"前言Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，可以使普通文本内容具有一定的格式，应用于文档快速排版，有着简单、轻量的特点。详细介绍见Markdown","text":"前言Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，可以使普通文本内容具有一定的格式，应用于文档快速排版，有着简单、轻量的特点。详细介绍见Markdown 一、标题在想要设为标题的文字前加#，#后面添加空格。 一个#是一级标题，两个#是二级标题，支持1-6级标题（如果你有HTML的基础，相信这些对你来说很好理解） 示例： 1234561.# 一级标题2.## 二级标题3.### 三级标题4.#### 四级标题5.##### 五级标题6.###### 六级标题 效果： 一级标题二级标题三级标题四级标题五级标题六级标题二、字体加粗 要加粗的文字前后用两个*包裹 斜体 要倾斜的文字前后用一个*包裹 斜体加粗 要倾斜加粗的文字前后用三个***包裹 删除线 要加删除线的文字前后用两个~~包裹 示例： 1234**文字加粗***文字倾斜****文字加粗倾斜***~~文字删除线~~ 效果： 文字加粗文字倾斜文字加粗倾斜文字删除线 注脚： 使用 [^keyword] 表示注脚。 这是一个注脚[^footnote]的样例。 这是第二个注脚[^footnote2]的样例。 12345678910111213141516内容区内容区内容区内容区内容区内容区内容区内容区内容区内容区内容区内容区内容区内容区内容区内容区 [^footnote]: 这是一个 注脚 的 文本。[^footnote2]: 这是另一个 注脚 的 文本。 三、引用在引用的文字前加&gt;,引用可以嵌套。 示例： 1&gt;引用内容 效果： 引用内容 四、插入图片1234![图片alt](图片地址 &apos;&apos;图片title&apos;&apos;)图片alt是对图片内容的解释。图片title是图片的标题，当鼠标移到图片上时显示的内容，itle可加可不加。 示例： 五、分割线用三个或三个以上的*或-表示 示例： 12341.---2.----3.***4.**** 效果： 六、超链接1[超链接名]（超链接地址 &quot;超链接title&quot;）title可加可不加 示例： 1[百度](http://baidu.com) 效果： 百度 七、列表一、无序列表 在列表内容前用+或-或 *加空格 示例： 1231.+ 列表内容2.- 列表内容3.* 列表内容 效果： 列表内容 列表内容 列表内容 二、有序列表 在列表内容前数字加点加空格 示例： 1231. 列表内容2. 列表内容3. 列表内容 效果： 列表内容 列表内容 列表内容 三、列表嵌套 可以有序套有序、有序套无序、无序套无序、无序套有序 在上一级和下一级之间加三个空格 八、表格12345| 项目 | 价格 | 数量 || -------- | -----: | :----: || 计算机 | \\$1600 | 5 || 手机 | \\$12 | 12 || 管线 | \\$1 | 234 | 文字默认居左-两边加：表示文字居中-右边加：表示文字居右,第二行分割表头和内容,-有一个就可以。 效果： 项目 价格 数量 计算机 \\$1600 5 手机 \\$12 12 管线 \\$1 234 九、代码块行内代码块，使用 `代码` 表示行内代码块。 示例： 让我们聊聊 html。 单行代码：代码之间分别用一个反引号包起来 1`代码内容` 代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行 1​ 代码… 代码… 代码…​12345678910111213```示例：`代码内容````c++#include &lt;iostream&gt;using namespace std;int main()&#123; return 0;&#125; 十、LaTeX公式LaTeX 公式 $ 表示行内公式： 质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。 $$ 表示整行公式： $$\\sum_{i=1}^n a_i=0$$ $$f(x_1,x_x,\\ldots,x_n) = x_1^2 + x_2^2 + \\cdots + x_n^2 $$ $$\\sum^{j-1}{k=0}{\\widehat{\\gamma}{kj} z_k}$$ 访问 MathJax 参考更多使用方法。 十一、图流程图示例 1123Alice-&gt;Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob--&gt;Alice: I am good thanks! 示例 212345Title: Here is a titleA-&gt;B: Normal lineB--&gt;C: Dashed lineC-&gt;&gt;D: Open arrowD--&gt;&gt;A: Dashed open arrow 更多语法参考：序列图语法参考甘特图甘特图内在思想简单。基本是一条线条图，横轴表示时间，纵轴表示活动（项目），线条表示在整个期间上计划和实际的活动完成情况。它直观地表明任务计划在什么时候进行，及实际进展与计划要求的对比。 12345678910111213title 项目开发流程section 项目确定 需求分析 :a1, 2016-06-22, 3d 可行性报告 :after a1, 5d 概念验证 : 5dsection 项目实施 概要设计 :2016-07-05 , 5d 详细设计 :2016-07-08, 10d 编码 :2016-07-15, 10d 测试 :2016-07-22, 5dsection 发布验收 发布: 2d 验收: 3d 更多语法参考：甘特图语法参考Mermaid 流程图1234A[Hard edge] --&gt;|Link text| B(Round edge)B --&gt; C&#123;Decision&#125;C --&gt;|One| D[Result one]C --&gt;|Two| E[Result two] 更多语法参考：Mermaid 流程图语法参考Mermaid 序列图1234Alice-&gt;John: Hello John, how are you?loop every minute John--&gt;Alice: Great!end 更多语法参考：Mermaid 序列图语法参考后序部分Markdown语法在不同的编译器上显示的效果有小部分不同，有些编译器可以显示出甘特图，有些没有效果的显示，我所用的编译器是Cmd Markdown,功能较为全面而且能同步到云端，后续我会单独写一篇文对当前市面上大部分的Markdown编译器进行一个详细的对比评价。","categories":[],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://yoursite.com/tags/Markdown/"}]},{"title":"建站历史-2","slug":"建站历史-2","date":"2019-05-04T09:59:12.000Z","updated":"2019-05-04T10:07:04.152Z","comments":true,"path":"2019/05/04/建站历史-2/","link":"","permalink":"http://yoursite.com/2019/05/04/建站历史-2/","excerpt":"","text":"解决了文章无法显示标签和分类，问题出在Markdown文本中tags:，再一次被中英文符号坑了。 解决文章摘要问题。 去除了页面右侧看板娘，去除了页面左侧网易云音乐。 添加了站内到访数和页面访问量。","categories":[],"tags":[{"name":"建站历史","slug":"建站历史","permalink":"http://yoursite.com/tags/建站历史/"}]},{"title":"读书笔记-《黑客与画家》-1","slug":"读书笔记","date":"2019-05-04T01:56:58.000Z","updated":"2019-05-05T12:38:07.955Z","comments":true,"path":"2019/05/04/读书笔记/","link":"","permalink":"http://yoursite.com/2019/05/04/读书笔记/","excerpt":"为什么书呆子不受欢迎？书呆子们不受欢迎的原因在于他们脑子中想的其他的事情，这里“其他”是指他们并不热衷于大众、流行的事情，他们清楚的明白做这些事情并不能对自身有所提升，他们的注意力都放在读书或是观察世界上，而不是穿衣打扮、开晚会上面。","text":"为什么书呆子不受欢迎？书呆子们不受欢迎的原因在于他们脑子中想的其他的事情，这里“其他”是指他们并不热衷于大众、流行的事情，他们清楚的明白做这些事情并不能对自身有所提升，他们的注意力都放在读书或是观察世界上，而不是穿衣打扮、开晚会上面。 书呆子在学校中不受欢迎=受欺负。一般来说成年人不回去欺负书呆子 ，小孩子才会这样。其中原因，一方面是为了使自己感觉好些，你踩水时，水踩下去，你就会浮上来。同样，在任何社会等级制度中，那些对自己没自信的人就会通过欺负他们眼中的下等人来凸显自己地位。另一方面，欺负书呆子也与如何受欢迎有关。如何才能更受欢迎，除了个人魅力，考虑结盟是重要一点。没有什么比一个共同的敌人能使人们更团结了。 所以一群人的虐待远比一个人的虐待残酷的多。 事实上，最受欢迎的孩子并不需要踩在书呆子身上来垫高自己，大部分的欺负来自于处于下一等级的学生，那些数量庞大而处于焦虑的中间层。 书呆子并不是失败者，他们只是在玩着一个与众不同的游戏，一个更加接近真实世界的游戏，学校像是一个小型的人生，里面无所不包，但又不是世界真实的样子，它只是一个暂时的过程，只要你向前看，你就能超越它。 校园生活的真正问题是空虚，书呆子们过的却格外丰富。","categories":[{"name":"Life","slug":"Life","permalink":"http://yoursite.com/categories/Life/"}],"tags":[{"name":"读书笔记","slug":"读书笔记","permalink":"http://yoursite.com/tags/读书笔记/"}]},{"title":"建站历史-1","slug":"建站历史-1","date":"2019-05-03T16:32:13.000Z","updated":"2019-05-04T09:53:12.091Z","comments":true,"path":"2019/05/04/建站历史-1/","link":"","permalink":"http://yoursite.com/2019/05/04/建站历史-1/","excerpt":"","text":"标签和分类添加失败，试过多次，这个问题很关键，影响后续博客的整理，一定要解决。文章摘要设置失败，莫名其妙的错误。npm i --save hexo-wordcount安装失败，相同的错误，修复失败，字数和阅读时长统计对文章的美化有很大帮助，总之就是错误一堆。后续要添加的功能： 鼠标点击效果 评论区","categories":[],"tags":[{"name":"建站历史","slug":"建站历史","permalink":"http://yoursite.com/tags/建站历史/"}]},{"title":"我的第一篇博客","slug":"我的第一篇博客","date":"2019-04-28T07:59:30.000Z","updated":"2019-05-04T03:12:32.790Z","comments":true,"path":"2019/04/28/我的第一篇博客/","link":"","permalink":"http://yoursite.com/2019/04/28/我的第一篇博客/","excerpt":"在踩坑中学习在4月28日的时候看着b站上的视频，一步一步将博客搭建部署起来，其中踩过的坑不计其数，git不怎么会用，面对dos界面中的各种error，简直是煎熬。当时也就停留在搭建一个框架了，终于等到五一劳动节，有大把时间可以完善博客后续的功能，添加主题，改图标背景，加头像，加音乐，看似几个简单的步骤，可就是有许多莫名其妙的error,查过的博客已经数不清了，查错的过程也算是历练的一种吧，现在把所有的坑踩完了，以后就不会踩了（或许）。","text":"在踩坑中学习在4月28日的时候看着b站上的视频，一步一步将博客搭建部署起来，其中踩过的坑不计其数，git不怎么会用，面对dos界面中的各种error，简直是煎熬。当时也就停留在搭建一个框架了，终于等到五一劳动节，有大把时间可以完善博客后续的功能，添加主题，改图标背景，加头像，加音乐，看似几个简单的步骤，可就是有许多莫名其妙的error,查过的博客已经数不清了，查错的过程也算是历练的一种吧，现在把所有的坑踩完了，以后就不会踩了（或许）。 为什么要建这个博客？总结下来就八个字：积累自己，分享知识将个人的学习心得记录下来，在初入这个专业的时候，我一直希望有一个人能够带带我，但是这种人太少了，知乎是个好东西，它让我这个普通的人看到了更大的世界，从生活到学习，知乎上的回答给了我很多帮助，上大学后，CSDN也对我影响不小。所以我总想着要做些什么，也能帮助他人，这个博客的内容如果对你有用，那将是我的荣幸了。","categories":[{"name":"Life","slug":"Life","permalink":"http://yoursite.com/categories/Life/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]}]}