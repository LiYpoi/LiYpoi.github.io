<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>建站历史</title>
      <link href="/LiYpoi.github.io/2019/07/23/%E5%BB%BA%E7%AB%99%E5%8E%86%E5%8F%B2-6/"/>
      <url>/LiYpoi.github.io/2019/07/23/%E5%BB%BA%E7%AB%99%E5%8E%86%E5%8F%B2-6/</url>
      
        <content type="html"><![CDATA[<ul><li>添加站内搜索功能</li><li>将右下角的top按钮放在侧边栏</li><li>文章图片懒加载(第一次没反应还是很慢，hexo clean一下后图片加载变快了，应该是成功了吧(ˉ▽ˉ；)…)</li></ul>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 建站历史 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我们为什么Coding？</title>
      <link href="/LiYpoi.github.io/2019/07/17/%E6%88%91%E4%BB%AC%E4%B8%BA%E4%BB%80%E4%B9%88Coding%EF%BC%9F/"/>
      <url>/LiYpoi.github.io/2019/07/17/%E6%88%91%E4%BB%AC%E4%B8%BA%E4%BB%80%E4%B9%88Coding%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p>我的微信个性签名是这样一句话:Coding change the world。</p><p>的确，进入信息化时代，我们的生活就与编程或说是程序息息相关了。我们现在的工作，正如第一次工业革命时负责操纵蒸汽机的工人一样，是将社会变得更加美好的一份子，这也是我们Coding的原因。</p><p>往大了说，编程能够训练思维，编程体现了一种抽象交互关系、自动化执行的思维模式，它是一种计算思维，不同于数学上的逻辑思维和物理上的实证思维，它能够促进人类思考，增进观察力和深化对交互关系的理解。</p><p>往小了说，我相信你如果懂编程语言，就一定明白编程带来的乐趣，它是为数不多，只需要坐在椅子前就能进行创造的工作。编程所带来的乐趣在于，你在编写几行代码后，只需按下一个按键，就能及时看到所带来的结果。其次，正如在蒸汽时代一个会操作蒸汽机的工人一样，现在的社会，编程给我们带来了更多的就业机会。</p><p>最后，推荐一个视频：<a href="https://www.bilibili.com/video/av3441238" target="_blank" rel="noopener">为什么我们要做一个程序猿？</a></p>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Liy&#39;s Python笔记01</title>
      <link href="/LiYpoi.github.io/2019/07/17/Liy-s-Python%E7%AC%94%E8%AE%B001/"/>
      <url>/LiYpoi.github.io/2019/07/17/Liy-s-Python%E7%AC%94%E8%AE%B001/</url>
      
        <content type="html"><![CDATA[<h3 id="Python基本语法元素"><a href="#Python基本语法元素" class="headerlink" title="Python基本语法元素"></a>Python基本语法元素</h3><h4 id="程序设计基本方法"><a href="#程序设计基本方法" class="headerlink" title="程序设计基本方法"></a>程序设计基本方法</h4><p>程序的基本编写方法即<code>IPO</code>,其中<code>I</code>是指Input输入，程序的输入，<code>P</code>是指Process处理，程序的主要逻辑，<code>O</code>是指Output输出，程序的输出。</p><p><strong>程序的输入</strong>：文件输入、网络输入、控制台输入、交互界面输入、内部输入等。</p><p><strong>程序的输出</strong>：控制台输出、图形输出、文件输出、网络输出、操作系统内部变量输出等。</p><p><strong>处理</strong>：处理是程序对输入数据进行计算产生输出结果的过程，处理的方法统称为算法。</p><h4 id="Python开发环境配置"><a href="#Python开发环境配置" class="headerlink" title="Python开发环境配置"></a>Python开发环境配置</h4><p><strong>Python的两种编程方式</strong>：交互式和文件式</p><p>交互式：对每个输入语句及时运行结果，适合语法练习。</p><p>文件式：批量执行一组语句并运行结果，是编程的主要方式。</p><h4 id="实例1：温度转换"><a href="#实例1：温度转换" class="headerlink" title="实例1：温度转换"></a>实例1：温度转换</h4><p>我们知道温度刻画分为两种不同的体系：华氏度(F)和摄氏度(C)，华氏度(英国、美国等国家使用)以一个标准大气压下水的结冰点为32度，沸点为212度，将温度进行等分刻画；摄氏度(中国等世界大多数国家使用)以一个标准大气压下水的结冰点为0度，沸点为100度，将温度进行等分刻画。</p><p>关键算法:</p><center>C = (F - 32) / 1.8</center><center>           F = (C * 1.8 + 32)</center><p>代码实现:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">TempStr = input(<span class="string">"请输入带有符号的温度值:"</span>)</span><br><span class="line"><span class="keyword">if</span> TempStr[<span class="number">-1</span>] <span class="keyword">in</span> [<span class="string">'F'</span>,<span class="string">'f'</span>]:</span><br><span class="line">    c = (eval(TempStr[<span class="number">0</span>:<span class="number">-1</span>]) - <span class="number">32</span>)/<span class="number">1.8</span></span><br><span class="line">    print(<span class="string">"转换后的温度是&#123;:.2f&#125;C"</span>.format(c))</span><br><span class="line"><span class="keyword">elif</span> TempStr[<span class="number">-1</span>] <span class="keyword">in</span> [<span class="string">'C'</span>,<span class="string">'c'</span>]:</span><br><span class="line">    F = <span class="number">1.8</span>*eval(TempStr[<span class="number">0</span>:<span class="number">-1</span>]) + <span class="number">32</span></span><br><span class="line">    print(<span class="string">"转换后的温度是&#123;:.2f&#125;F"</span>.format(F))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"输入格式错误!"</span>)</span><br></pre></td></tr></table></figure><h4 id="Python程序语法元素分析"><a href="#Python程序语法元素分析" class="headerlink" title="Python程序语法元素分析"></a>Python程序语法元素分析</h4><p><strong>程序的格式框架</strong></p><font color="red">注释: </font><ul><li>单行注释 以<code>#</code>开头，后面跟注释内容</li><li>多行注释 以<code>&#39;&#39;&#39;</code>开头和结尾</li></ul><p><strong>命名与保留字</strong></p><p>上面程序中的<code>TempStr</code>、<code>C</code>、<code>F</code>是<font color="red">变量</font>,变量采用标识符来表示，关联标识符的过程叫命名，可以使用等号(=)向变量赋值或修改值，=是赋值符号。</p><p>命名规则：数字、大小写字母、下划线和汉字等字符及组合，Python中命名对大小写敏感，且首字符不能是数字、不与保留字相同。</p><p><strong>数据类型</strong></p><p>上面温度转换的代码中，包含了字符串、整数、浮点数、列表共四种数据类型，这里说一下列表，这在C++中是没有的，列表类型用方括号和逗号表示，它是由0个或多个数据组成的有序序列，如<code>[10,110,111]</code>，使用保留字<code>in</code>判断一个元素是否在列表中。</p><p>在字符串中有两种序号体系，正向递增序号和反向递减序号，正向递增序号从左至右，给字符串由0开始编号，反响递减序号则是从右至左，给字符串由-1开始编号。</p><p>这两种字符串体系是为了使用字符串中的<strong>索引</strong>和<strong>切片</strong>功能。</p><p>使用[]获取字符串中一个或多个字符</p><ul><li>索引:返回字符串中单个字符   &lt;字符串&gt;[M]</li></ul><p>例如：“请输入带有符号的温度值:”[0],将获得第0个字符</p><ul><li>切片:返回字符串中一段字符子串   &lt;字符串&gt;[M:N]</li></ul><p>例如：“请输入带有符号的温度值:”[1:3],表示取出其中第一个、第二个字符</p><p><strong>语句与函数</strong></p><p>Python中使用保留字<code>if、elif、else</code>构成条件判断的分支语句，<code>if TempStr[-1] in [&#39;F&#39;,&#39;f&#39;]:</code>如果条件为真则执行冒号后语句，分支语句中，每句话的后面有一个<code>:</code>不能省略。</p><p>Python中函数采用&lt;函数名&gt;(&lt;参数&gt;)方式使用，<code>eval(TempStr[0:-1])</code>中<code>TempStr[0:-1]</code>是参数。</p><p>使用<code>eval()</code>函数(评估函数)可以去掉参数最外侧引号并执行余下语句，基本使用格式：eval(&lt;字符串或字符串变量&gt;)</p><p>例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>eval(<span class="string">"1"</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>eval(<span class="string">"1+2"</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>eval(<span class="string">'print("Hello")'</span>)</span><br><span class="line">Hello</span><br></pre></td></tr></table></figure><p><strong>输入与输出</strong></p><p>Python中输出函数print()有一种格式化方法：print(“转换后的温度是<u>{:.2f}</u>F”.format(F)),<code>{}</code>表示槽，后续变量填充到槽中，<code>{:.2f}</code>表示将函数format中的变量C填充到这个位置时取小数点后2位。</p><h3 id="Python基本图形绘制"><a href="#Python基本图形绘制" class="headerlink" title="Python基本图形绘制"></a>Python基本图形绘制</h3><h4 id="深入理解Python语言"><a href="#深入理解Python语言" class="headerlink" title="深入理解Python语言"></a>深入理解Python语言</h4><p><strong>计算机技术的演进过程</strong></p><table><thead><tr><th style="text-align:center">时间</th><th style="text-align:center">时代</th><th style="text-align:center">问题</th></tr></thead><tbody><tr><td style="text-align:center">1946-1981</td><td style="text-align:center">计算机系统结构时代</td><td style="text-align:center">计算能力问题</td></tr><tr><td style="text-align:center">1981-2008</td><td style="text-align:center">网络和视窗时代</td><td style="text-align:center">交互问题</td></tr><tr><td style="text-align:center">2008-2016</td><td style="text-align:center">复杂信息时代</td><td style="text-align:center">数据问题</td></tr><tr><td style="text-align:center">2017-</td><td style="text-align:center">人工智能时代</td><td style="text-align:center">人类问题</td></tr></tbody></table><p>目前，我们还未真正进入人工智能时代，只能说是处于一种过渡时代，我们还需要综合处理数据问题、交互问题、计算能力问题，应该称这个时代为“新计算时代”。</p><p><strong>不同编程语言的初心</strong></p><table><thead><tr><th style="text-align:center">语言</th><th style="text-align:center">学习内容</th><th style="text-align:center">语言本质</th><th style="text-align:center">解决问题</th><th style="text-align:center">适用对象</th></tr></thead><tbody><tr><td style="text-align:center">C</td><td style="text-align:center">指针、内存、数据类型</td><td style="text-align:center">理解计算机系统结构</td><td style="text-align:center">性能</td><td style="text-align:center">计算机类专业</td></tr><tr><td style="text-align:center">C++</td><td style="text-align:center">对象、多态、继承</td><td style="text-align:center">理解主客体关系</td><td style="text-align:center">d大规模程序</td><td style="text-align:center">计算机类专业</td></tr><tr><td style="text-align:center">Java</td><td style="text-align:center">对象、跨平台、运行时</td><td style="text-align:center">理解主客体关系</td><td style="text-align:center">跨平台</td><td style="text-align:center">软件类专业</td></tr><tr><td style="text-align:center">VB</td><td style="text-align:center">d对象、按钮、文本框</td><td style="text-align:center">理解人机交互</td><td style="text-align:center">桌面应用</td><td style="text-align:center">不确定</td></tr><tr><td style="text-align:center">Python</td><td style="text-align:center">编程逻辑、第三方库</td><td style="text-align:center">l理解问题求解</td><td style="text-align:center">各类问题</td><td style="text-align:center">各种专业</td></tr></tbody></table><p><strong>Python特点与优势</strong></p><ul><li>强制可读性(强制缩进)</li><li>较少的底层语法元素，语法简洁</li><li>多种编程方式</li><li>支持中文字符</li><li>跨操作系统平台</li></ul><h4 id="实例2：Python蟒蛇绘制"><a href="#实例2：Python蟒蛇绘制" class="headerlink" title="实例2：Python蟒蛇绘制"></a>实例2：Python蟒蛇绘制</h4><p>代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#PythonDraw.py</span></span><br><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line">turtle.setup(<span class="number">650</span>,<span class="number">350</span>,<span class="number">200</span>,<span class="number">200</span>)</span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.fd(<span class="number">-250</span>)</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.pensize(<span class="number">25</span>)</span><br><span class="line">turtle.pencolor(<span class="string">"purple"</span>)</span><br><span class="line">turtle.seth(<span class="number">-40</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    turtle.circle(<span class="number">40</span>,<span class="number">80</span>)</span><br><span class="line">    turtle.circle(<span class="number">-40</span>,<span class="number">80</span>)</span><br><span class="line">turtle.circle(<span class="number">40</span>,<span class="number">80</span>/<span class="number">2</span>)</span><br><span class="line">turtle.fd(<span class="number">40</span>)</span><br><span class="line">turtle.circle(<span class="number">16</span>,<span class="number">180</span>)</span><br><span class="line">turtle.fd(<span class="number">40</span> * <span class="number">2</span>/<span class="number">3</span>)</span><br><span class="line">turtle.done()</span><br></pre></td></tr></table></figure><h4 id="turtle库的使用"><a href="#turtle库的使用" class="headerlink" title="turtle库的使用"></a>turtle库的使用</h4><p><strong>turtle库基本介绍</strong></p><p>turtle库，即turtle(海龟)绘图体系，是Python的标准库之一。</p><center>Python计算生态 = 标准库 + 第三方库</center><ul><li><p>标准库：随解释器直接安装到操作系统中的功能模块</p></li><li><p>第三方库：需要经过安装才能使用的功能模块</p></li><li>库Library、包Package、模块Module，统称模块</li></ul><p><strong>turtle库绘图窗体布局</strong></p><p>turtle的画布空间中使用的最小单位是像素。</p><p><code>turtle.setup(width,height,startx,starty)</code>中，<code>setup()</code>设置窗体大小及位置，这个位置是以电脑显示器左上角为原点(0,0)为参考，4个参数中后两个可选，<code>setup()</code>函数不是必须的。</p><p><img src="https://i.loli.net/2019/07/20/5d32cab42c5e643107.png" alt></p><p><strong>turtle空间和角度坐标体系</strong></p><p><code>turtle.goto(x,y)</code>使用goto函数，可以绘出一段直线或图形，正如平面直角坐标系一样。</p><p>类似的函数分为两类：运动命令、画笔控制命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">运动命令</span><br></pre></td></tr></table></figure><p><code>fd(d)</code>:海龟向前移动的距离，d代表距离</p><p><code>bk(d)</code>:海龟向后移动的距离，d代表距离</p><p><code>right/left(degree)</code>:以海龟的视角，向右/左转动多少度</p><p><code>speed(speed)</code> :画笔绘制的速度,范围[0,10]的整数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">画笔控制命令</span><br></pre></td></tr></table></figure><p><code>penup()/pu()/up()</code>:抬起画笔</p><p><code>pendown()/pd()</code>:落下画笔,并不绘制任何内容</p><p><code>pensize(width)/width(width)</code>:画笔的宽度</p><p><code>pencolor(colorstring)</code>: 画笔的颜色</p><p><code>fillcolor(colorstring)</code>:绘制图形的填充颜色</p><p><code>circle(r, extent)</code>: 绘制一个圆形,r为半径,extent为度数,当r为正数，所绘圆的的圆心在左侧正方向，为负时在右侧正方向，如要画一个圆形,可不必写第二个参数</p><p><code>seth(angle)</code>:海龟行进方向，angle为绝对度数</p><p><strong>RGB色彩体系</strong></p><p><img src="https://i.loli.net/2019/07/20/5d32d476557d717276.png" alt></p><p>turtle的RGB色彩模式，默认采用小数值，可切换为整数值</p><p>使用<code>turtle.colormode(mode)</code>,当mode是1.0时，RGB小数值模式，为255时，RGB整数值模式。</p><h4 id="turtle程序语法元素"><a href="#turtle程序语法元素" class="headerlink" title="turtle程序语法元素"></a>turtle程序语法元素</h4><p><strong>库引用与import</strong></p><p>库引用：扩充Python程序功能的方式</p><p>使用<code>import</code>保留字完成，采用<a>.<b>编码风格</b></a></p><pre><code>import&lt;库名&gt;&lt;库名&gt;.&lt;函数名&gt;(&lt;函数参数&gt;)</code></pre><p>但是。。。。。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line">turtle.setup(<span class="number">650</span>,<span class="number">350</span>,<span class="number">200</span>,<span class="number">200</span>)</span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.fd(<span class="number">-250</span>)</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.pensize(<span class="number">25</span>)</span><br><span class="line">turtle.pencolor(<span class="string">"purple"</span>)</span><br><span class="line">turtle.seth(<span class="number">-40</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    turtle.circle(<span class="number">40</span>,<span class="number">80</span>)</span><br><span class="line">    turtle.circle(<span class="number">-40</span>,<span class="number">80</span>)</span><br><span class="line">turtle.circle(<span class="number">40</span>,<span class="number">80</span>/<span class="number">2</span>)</span><br><span class="line">turtle.fd(<span class="number">40</span>)</span><br><span class="line">turtle.circle(<span class="number">16</span>,<span class="number">180</span>)</span><br><span class="line">turtle.fd(<span class="number">40</span> * <span class="number">2</span>/<span class="number">3</span>)</span><br><span class="line">turtle.done()</span><br></pre></td></tr></table></figure><p>这么多turtle,写起来很麻烦，所以可以使用<code>from</code>和<code>import</code>保留字共同完成。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">form&lt;库名&gt;import&lt;函数名&gt;</span><br><span class="line">form&lt;库名&gt;import*</span><br><span class="line">&lt;函数名&gt;(&lt;函数参数&gt;)</span><br></pre></td></tr></table></figure><p>变形一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">from turtle import*</span><br><span class="line">setup(650,350,200,200)</span><br><span class="line">penup()</span><br><span class="line">fd(-250)</span><br><span class="line">pendown()</span><br><span class="line">pensize(25)</span><br><span class="line">pencolor(&quot;purple&quot;)</span><br><span class="line">seth(-40)</span><br><span class="line">for i in range(5):</span><br><span class="line">    circle(40,80)</span><br><span class="line">    circle(-40,80)</span><br><span class="line">circle(40,80/2)</span><br><span class="line">fd(40)</span><br><span class="line">circle(16,180)</span><br><span class="line">fd(40 * 2/3)</span><br><span class="line">done()</span><br></pre></td></tr></table></figure><p>不过这两种方法各有优缺点，第一种方法不会出现函数重名的问题，它使用turtle调用函数，每一次都是调用新程序中的函数；第二种会出现，库中的函数名称可能会与用户自定义的某个函数名称一致，导致二义性。</p><p>所以引出了第三种方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle <span class="keyword">as</span> t</span><br><span class="line">t.setup(<span class="number">650</span>,<span class="number">350</span>,<span class="number">200</span>,<span class="number">200</span>)</span><br><span class="line">t.penup()</span><br><span class="line">t.fd(<span class="number">-250</span>)</span><br><span class="line">t.pendown()</span><br><span class="line">t.pensize(<span class="number">25</span>)</span><br><span class="line">t.pencolor(<span class="string">"purple"</span>)</span><br><span class="line">t.seth(<span class="number">-40</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    t.circle(<span class="number">40</span>,<span class="number">80</span>)</span><br><span class="line">    t.circle(<span class="number">-40</span>,<span class="number">80</span>)</span><br><span class="line">t.circle(<span class="number">40</span>,<span class="number">80</span>/<span class="number">2</span>)</span><br><span class="line">t.fd(<span class="number">40</span>)</span><br><span class="line">t.circle(<span class="number">16</span>,<span class="number">180</span>)</span><br><span class="line">t.fd(<span class="number">40</span> * <span class="number">2</span>/<span class="number">3</span>)</span><br><span class="line">t.done()</span><br></pre></td></tr></table></figure><p>给调用的外部库关联一个更短、更合适的名字，使用<code>import</code>和<code>as</code>保留字共同完成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import&lt;库名&gt;as&lt;库别名&gt;</span><br><span class="line">&lt;库别名&gt;.&lt;函数名&gt;(&lt;函数参数&gt;)</span><br></pre></td></tr></table></figure><p><strong>循环结构与range()函数</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for&lt;变量&gt;in range(&lt;参数&gt;)</span><br><span class="line">&lt;被循环的语句&gt;</span><br></pre></td></tr></table></figure><p>&lt;变量&gt;表示每次循环的计数，0到&lt;次数&gt;-1</p><p><code>range()</code>函数是产生循环计数序列的函数</p><ul><li>range(N)</li></ul><p>产生0到N-1的整数序列，共N个，range(5)的结果是0，1，2，3，4</p><ul><li>range(M,N)</li></ul><p>产生M到N-1的整数序列，共N-M个，range(2,5)的结果是2，3，4</p><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><h4 id="数字类型及操作"><a href="#数字类型及操作" class="headerlink" title="数字类型及操作"></a>数字类型及操作</h4><p><strong>整数类型</strong></p><p>可正可负,提供四种进制表示：</p><ul><li>十进制：1001，99，-111</li><li>二进制：以0b或0B开头，0b010,0B110</li><li>八进制：以0o或0O开头，0o123,0O123</li><li>十六进制：以0x或0X开头，0x9a,0X98</li></ul><p><strong>浮点数类型</strong></p><p>浮点数间运算存在不确定尾数，这是编程语言的通病，例如，0.1+0.2=0.30000000000004，这是因为计算机中，二进制和十进制没有严格的对等关系，0.1用二进制表示是一串无限循环小数，计算机表示为十进制的时候只截取其中的53位，从而无限接近0.1。这一点可以用编程语言验证，输入<code>0.1 + 0.2 == 0.3</code>输出结果<code>False</code>。</p><p>为了解决这个问题，使用<code>round()</code>函数，<code>round()</code>函数是用来保留数字的。<code>round(x,d)</code>即对x四舍五入，d是小数截取位数，<code>round(0.1 + 0.2,1) == 0.3</code>,此时输出结果为<code>True</code></p><p><strong>复数类型(Python特有)</strong></p><p>使用<code>z.real</code>获得复数的实部，<code>z.imag</code>获得虚部</p><p><strong>数值运算操作符</strong></p><p>与其他编程语言的不同：</p><table><thead><tr><th style="text-align:center">操作符</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">x/y</td><td style="text-align:center">除，10/3结果为3.333333333335</td></tr><tr><td style="text-align:center">x//y</td><td style="text-align:center">整数除，10//3结果为3</td></tr><tr><td style="text-align:center">x**y</td><td style="text-align:center">m幂运算，当y为小数时表示开方</td></tr></tbody></table><p>Python中类型间可进行混合运算，生成结果为“最宽”类型，例如：</p><center>整数 -&gt; 浮点数 -&gt; 复数</center><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123</span> + <span class="number">0.4</span> = <span class="number">123.4</span>          //整数 + 浮点数 = 浮点数</span><br></pre></td></tr></table></figure><p><strong>数值运算函数</strong></p><table><thead><tr><th style="text-align:center">函数及使用</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">abs(x)</td><td style="text-align:center">x绝对值，abs(-110)结果为110</td></tr><tr><td style="text-align:center">divmod(x,y)</td><td style="text-align:center">商余,(x//y,x%y),同时输出商和余,divmod(10,3)结果为(3,1)</td></tr><tr><td style="text-align:center">pow(x,y[,z])</td><td style="text-align:center">幂余,(x**y)%z,[..]表示参数z可省略,pow(3,pow(3,99),1000)结果为4587</td></tr><tr><td style="text-align:center">round(x,[,d])</td><td style="text-align:center">四舍五入,d是保留小数位数，默认为0是取整,round(-11.1101,2)结果为-11,11</td></tr><tr><td style="text-align:center">max(x1,x2,..,xn)</td><td style="text-align:center">返回括号中的最大值</td></tr><tr><td style="text-align:center">min(x1,x2,..,xn)</td><td style="text-align:center">返回括号中的最小值</td></tr><tr><td style="text-align:center">int(x)</td><td style="text-align:center">将x转换为整数,舍弃小数部分,int(12.22)结果为12;int(“123”)结果为123</td></tr><tr><td style="text-align:center">float()</td><td style="text-align:center">将x转换为浮点数,增加小数部分,float(12)结果为12.0;float(“123.2”)结果为123.2</td></tr><tr><td style="text-align:center">complex()</td><td style="text-align:center">将x转换为复数,增加虚数部分,complex(4)结果为4 + 0j</td></tr></tbody></table><h4 id="实例3：天天向上"><a href="#实例3：天天向上" class="headerlink" title="实例3：天天向上"></a>实例3：天天向上</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dayup</span><span class="params">(df)</span>:</span></span><br><span class="line">    dayup = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">365</span>):</span><br><span class="line">       <span class="keyword">if</span> i % <span class="number">7</span> <span class="keyword">in</span> [<span class="number">6</span>,<span class="number">0</span>]:</span><br><span class="line">        dayup = dayup*(<span class="number">1</span> - <span class="number">0.01</span>)</span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">           dayup = dayup*(<span class="number">1</span> + df)</span><br><span class="line">    <span class="keyword">return</span> dayup</span><br><span class="line">dayfactor = <span class="number">0.01</span></span><br><span class="line"><span class="keyword">while</span> dayup(dayfactor) &lt; <span class="number">37.78</span>:</span><br><span class="line">        dayfactor += <span class="number">0.001</span></span><br><span class="line">print(<span class="string">"工作日的努力参数是:&#123;:.3f&#125;"</span>.format(dayfactor))</span><br></pre></td></tr></table></figure><p>可以引申到同类型问题：三天打鱼两天晒网</p><h4 id="字符串类型及操作"><a href="#字符串类型及操作" class="headerlink" title="字符串类型及操作"></a>字符串类型及操作</h4><p><strong>字符串类型的表示</strong></p><p>在对字符串进行引用时，如果想字符串中包含单引号，则外围需要用双引号，反之用单引号包含双引号，如果既想包含单引号又想包含双引号，则使用单个单引号在外围进行嵌套。</p><p>字符串切片的高级用法：使用[M:N:K]根据步长对字符串切片</p><ul><li>&lt;字符串&gt;[M:N],M缺失表示至开头，N缺失表示至结尾</li></ul><p>“一二三四五六七八九十”[:3]结果是“一二三”</p><ul><li>&lt;字符串&gt;[M:N:K],j根据步长K对字符串切片</li></ul><p>“一二三四五六七八九十”[1:8:2]结果是“二四六”</p><p>开始的时候下标是1，步长是2 ，则取下标是1的数据二， 还会去 1+步长(2) = 3 那么会取下标是3 的数据四，再往后就是结果3+步长(2) = 5，取下标是5 的数据六。</p><ul><li>“一二三四五六七八九十”[::-1]结果是”十九八七六五四三二一”</li></ul><p>更多关于切片的操作参见：<a href="https://www.jianshu.com/p/15715d6f4dad" target="_blank" rel="noopener">彻底搞懂Python切片操作-简书</a></p><p><strong>字符串操作符</strong></p><p>由0个或多个字符组成的有序字符序列，有三种操作符，前两种是“+”和“*”，第三种是“in”，例如<code>x in s</code>表示：如果x是s的子串，返回True，否则返回False。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#weeknameprintv2.py     //获取星期字符串</span></span><br><span class="line">weekStr = <span class="string">"一二三四五六七"</span></span><br><span class="line">weekId = eval(input(<span class="string">"请输入星期数字（1—7）:"</span>))</span><br><span class="line">print(<span class="string">"星期"</span> + weekStr[weekId<span class="number">-1</span>])</span><br></pre></td></tr></table></figure><p><strong>字符串处理函数</strong></p><p>python中提供了一些函数给字符串使用：</p><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">len(x)</td><td style="text-align:center">返回括号中字符串的长度</td></tr><tr><td style="text-align:center">str(x)</td><td style="text-align:center">将括号中任意类型x转换成字符串</td></tr><tr><td style="text-align:center">hex(x)/oct(x)</td><td style="text-align:center">将括号中的整数x转换成十六进制或八进制</td></tr><tr><td style="text-align:center">chr(u)</td><td style="text-align:center">将括号中Unicode编码返回其字符形式</td></tr><tr><td style="text-align:center">ord(x)</td><td style="text-align:center">将括号中的字符返回其Unicode编码</td></tr></tbody></table><p><a href="https://baike.baidu.com/item/Unicode/750500?fr=aladdin" target="_blank" rel="noopener">Unicode-百度百科</a></p><p><strong>字符串处理方法</strong></p><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">str.lower()/str.upper()</td><td style="text-align:center">将英文字符串全小写或大写</td></tr><tr><td style="text-align:center">str.split(sep=None)</td><td style="text-align:center">返回一个列表，“A,B,C”.split(“,”)结果[‘A’,’B’,’C’]</td></tr><tr><td style="text-align:center">str.count(sub)</td><td style="text-align:center">返回子串sub在str中出现的次数，”day day up”.count(“d”)结果为2</td></tr><tr><td style="text-align:center">str.replace(old,new)</td><td style="text-align:center">将括号中old子串替换成new,并返回str的副本</td></tr><tr><td style="text-align:center">strcenter(width[,fillchar])</td><td style="text-align:center">字符串居中，width为居中的宽度，fillchar是填充宽度的</td></tr><tr><td style="text-align:center">str.strip(chars)</td><td style="text-align:center">去掉str中左侧和右侧chars中列出的字符，”= python= “.strip(“ =np”)结果“ytho”</td></tr><tr><td style="text-align:center">str.join(iter)</td><td style="text-align:center">在iter变量除了最后一个元素外，给每个元素后面加一个字符,“?”.join(“为什么”)结果“为?什?么”</td></tr></tbody></table><p><strong>字符串类型的格式化</strong></p><center>字符串格式化=槽机制+format()方法</center><p><img src="https://i.loli.net/2019/07/24/5d383a7896feb70483.png" alt></p><p>默认槽中从0开始，可以设置槽中数字对format()中的参数进行选择</p><p>槽内部对格式化的配置方式：</p><p><img src="https://i.loli.net/2019/07/24/5d383b14259d264857.png" alt></p><p><img src="https://i.loli.net/2019/07/24/5d383b1570c1e51269.png" alt></p><p algin="right">图片来自中国大学MOOC《Python语言程序设计》</p><h4 id="模块2：time库的使用"><a href="#模块2：time库的使用" class="headerlink" title="模块2：time库的使用"></a>模块2：time库的使用</h4><p><strong>time库基本介绍</strong></p><p>time库是Python中处理时间的标准库，可以用来:</p><ul><li>时间表达</li><li>提供获取系统时间并格式化输出功能</li><li>提供系统级精确计时功能，用于程序性能分析</li></ul><p>time库包括三类函数：</p><ul><li>时间获取：time()  ctime()  gmtime()</li><li>时间格式化：strftime()  strptime()</li><li>程序计时：sleep()  perf_counter()</li></ul><p><strong>时间获取</strong></p><p>使用函数time(),可以获取当前的时间戳，即计算机内部时间值，它是一串浮点数，表示从格林威治时间1970年01月01日00时00分00秒开始到当前的秒数。至于为什么是1970年这个时间点见:[<a href="https://www.cnblogs.com/haitao-fan/archive/2013/01/09/2853740.html" target="_blank" rel="noopener">为什么计算机时间要从1970年1月1日开始算起？</a>]</p><p>但这种方式可读性较差，所以有了函数ctime()，ctime()可以获取当前时间并以易读的方式表示，返回字符串。</p><p>第三种gmtime()函数，获取当前时间，表示为计算机可处理的时间格式。</p><p><strong>时间格式化</strong></p><p>使用strtime()方法将时间以合理的方式展示出来，<code>strtime(tpl,ts)</code>中，tpl是格式化模板字符串，用来定义输出效果，ts是计算机内部时间类型变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;t = time.gtime()</span><br><span class="line">&gt;&gt;&gt;time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>,t)</span><br><span class="line"><span class="string">'2019-07-24 19:53:56'</span></span><br></pre></td></tr></table></figure><p>月份缩写%b，月份名称%B，星期%A，星期缩写%a，上下午%p，12小时制%I。</p><p>可以构造一个字符串，将它作为时间变量来使用，使用strptime()方法可以逐一解析字符串中的含义，并转换为变量。str是字符串形式的时间，tpl是格式化模板字符串，用来定义输入效果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;time.Str = <span class="string">'2019-07-24 19:53:56'</span></span><br><span class="line">&gt;&gt;&gt;time.strptime(timeStr,<span class="string">"%Y-%m-%d %H:%M:%S"</span>)</span><br><span class="line"><span class="number">2019</span><span class="number">-07</span><span class="number">-24</span> <span class="number">19</span>:<span class="number">53</span>:<span class="number">56</span></span><br></pre></td></tr></table></figure><p><strong>程序计时应用</strong></p><p>程序计时指测量起始动作所经历的过程，使用perf_counter()测量时间，sleep()产生时间。在使用perf_counter()函数时，由于函数计数起点不是0，而是从某个值开始的，所以需要连续调用函数并计算两次的差值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;start = time.perf_counter()</span><br><span class="line"><span class="number">328.73647264478827</span></span><br><span class="line">&gt;&gt;&gt;end = time.perf_counter()</span><br><span class="line"><span class="number">344.16472574489317</span></span><br><span class="line">&gt;&gt;&gt;end - start</span><br><span class="line"><span class="number">15.4282531001049</span>‬</span><br></pre></td></tr></table></figure><p>使用函数sleep(s),s是休眠的时间，单位是秒，可以是浮点数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wait</span><span class="params">()</span>:</span></span><br><span class="line">    time.sleep(<span class="number">3.3</span>)</span><br><span class="line">&gt;&gt;&gt;wait()        //程序等待<span class="number">3.3</span>秒后退出</span><br></pre></td></tr></table></figure><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>1.0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#TextProBarV1.py</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">scale = <span class="number">10</span></span><br><span class="line">print(<span class="string">"------进度开始------"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(scale+<span class="number">1</span>):</span><br><span class="line">    a = <span class="string">'*'</span>*i</span><br><span class="line">    b = <span class="string">'.'</span>*(scale - i)</span><br><span class="line">    c = (i/scale)*<span class="number">100</span></span><br><span class="line">    print(<span class="string">"&#123;:^3.0f&#125;%[&#123;&#125;-&gt;&#123;&#125;]"</span>.format(c,a,b))</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">print(<span class="string">"------进度结束------"</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">------进度开始------</span></span><br><span class="line"><span class="string"> 0 %[-&gt;..........]</span></span><br><span class="line"><span class="string">10 %[*-&gt;.........]</span></span><br><span class="line"><span class="string">20 %[**-&gt;........]</span></span><br><span class="line"><span class="string">30 %[***-&gt;.......]</span></span><br><span class="line"><span class="string">40 %[****-&gt;......]</span></span><br><span class="line"><span class="string">50 %[*****-&gt;.....]</span></span><br><span class="line"><span class="string">60 %[******-&gt;....]</span></span><br><span class="line"><span class="string">70 %[*******-&gt;...]</span></span><br><span class="line"><span class="string">80 %[********-&gt;..]</span></span><br><span class="line"><span class="string">90 %[*********-&gt;.]</span></span><br><span class="line"><span class="string">100%[**********-&gt;]</span></span><br><span class="line"><span class="string">------进度结束------</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>2.0实现单行动态刷新</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#TextProBavV2.py</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">101</span>):</span><br><span class="line">    print(<span class="string">"\r&#123;:3&#125;%"</span>.format(i),end=<span class="string">""</span>)  //\r作用是本行内容输出后将光标退回行首，end=<span class="string">""</span>输出不换行</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">  0%</span></span><br><span class="line"><span class="string">  1%</span></span><br><span class="line"><span class="string">  2%</span></span><br><span class="line"><span class="string">  3%</span></span><br><span class="line"><span class="string">  4%</span></span><br><span class="line"><span class="string">  5%</span></span><br><span class="line"><span class="string">  6%</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>V2的代码运行结果在IDLE上是所有的信息都展现出来，并没有实现单行刷新，这是因为IDLE是编写程序的开发环境，不是程序运行的主要环境，所以IDLE中屏蔽了“\r”功能，但可以使用cmd运行。<img src="https://i.loli.net/2019/07/24/5d38549c968fc55869.png" alt></p><p>把上面两种版本相结合V3：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#TextProBarV3.py</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">scale = <span class="number">50</span></span><br><span class="line">print(<span class="string">"执行开始"</span>.center(scale//<span class="number">2</span>, <span class="string">"-"</span>))</span><br><span class="line">start = time.perf_counter()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(scale+<span class="number">1</span>):</span><br><span class="line">    a = <span class="string">'*'</span> * i</span><br><span class="line">    b = <span class="string">'.'</span> * (scale - i)</span><br><span class="line">    c = (i/scale)*<span class="number">100</span></span><br><span class="line">    dur = time.perf_counter() - start</span><br><span class="line">    print(<span class="string">"\r&#123;:^3.0f&#125;%[&#123;&#125;-&gt;&#123;&#125;]&#123;:.2f&#125;s"</span>.format(c,a,b,dur),end=<span class="string">''</span>)</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">print(<span class="string">"\n"</span>+<span class="string">"执行结束"</span>.center(scale//<span class="number">2</span>,<span class="string">'-'</span>))</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/24/5d38594caf43f91614.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建站历史</title>
      <link href="/LiYpoi.github.io/2019/07/16/%E5%BB%BA%E7%AB%99%E5%8E%86%E5%8F%B2-5/"/>
      <url>/LiYpoi.github.io/2019/07/16/%E5%BB%BA%E7%AB%99%E5%8E%86%E5%8F%B2-5/</url>
      
        <content type="html"><![CDATA[<ul><li>博客绑定域名</li><li>添加聊天功能“闲聊么”</li><li>做了一张404页面的图片，添加自定义404页面</li></ul>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 建站历史 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA破解汉化指北</title>
      <link href="/LiYpoi.github.io/2019/07/16/IDEA%E7%A0%B4%E8%A7%A3%E6%B1%89%E5%8C%96%E6%8C%87%E5%8C%97/"/>
      <url>/LiYpoi.github.io/2019/07/16/IDEA%E7%A0%B4%E8%A7%A3%E6%B1%89%E5%8C%96%E6%8C%87%E5%8C%97/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>IDEA即IntelliJ IDEA，是java编程语言的集成开发环境，在业界被公认为最好的java开发工具之一。IntelliJ IDEA官网提供两种下载版本，一种是付费版，功能齐全，另一种是免费版，但部分功能不可用，且官方没有中文版本。本文将教你从零开始破解汉化使用IDEA，如有能力，请支持正版软件。</p><h3 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h3><p><strong>一、下载</strong></p><p>进入<a href="https://www.jetbrains.com/idea/download/#section=windows" target="_blank" rel="noopener">IDEA的官网</a>，点击下图所示，下载IDEA程序</p><p><img src="https://i.loli.net/2019/07/16/5d2dc3f202a5a51879.png" alt></p><p><strong>二、安装</strong></p><p>将软件安装在<strong>非C盘</strong>的区域中(如果你不想电脑变卡的话)，正常安装，不熟悉英文的话就一直点next和finish。</p><h3 id="破解汉化"><a href="#破解汉化" class="headerlink" title="破解汉化"></a>破解汉化</h3><p><strong>一、下载破解所需文件</strong></p><p><a href="https://pan.baidu.com/s/1TNizCLTLQg7oRq9vO6fduw" target="_blank" rel="noopener">在这里下载所需文件</a>(提取码:bbsw),将文件JetbrainsIdesCrack.jar放入<strong>D:\Program Files\JetBrains\IntelliJ IDEA 2019.1.3\bin</strong>，前面的<strong>D:\Program Files</strong>是我的安装路径，你只需将文件放入你的安装路径即可。</p><p><strong>二、修改idea64.exe.vmoptions文件</strong></p><p>在/bin中用记事本打开idea64.exe.vmoptions文件，修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-Xms128m</span><br><span class="line">-Xmx750m</span><br><span class="line">-XX:ReservedCodeCacheSize=240m</span><br><span class="line">-XX:+UseConcMarkSweepGC</span><br><span class="line">-XX:SoftRefLRUPolicyMSPerMB=50</span><br><span class="line">-ea</span><br><span class="line">-Dsun.io.useCanonCaches=false</span><br><span class="line">-Djava.net.preferIPv4Stack=true</span><br><span class="line">-Djdk.http.auth.tunneling.disabledSchemes=&quot;&quot;</span><br><span class="line">-XX:+HeapDumpOnOutOfMemoryError</span><br><span class="line">-XX:-OmitStackTraceInFastThrow</span><br><span class="line"></span><br><span class="line">-javaagent:D:\Program Files\JetBrains\IntelliJ IDEA 2019.1.3\bin\JetbrainsIdesCrack.jar</span><br></pre></td></tr></table></figure><p>同样，将-javaagent:D:\Program Files修改为你的路径。</p><p><strong>三、汉化</strong></p><p>将汉化文件resources_cn.jar拖入D:\Program Files\JetBrains\IntelliJ IDEA 2019.1.3\lib中即可。</p><p><strong>四、激活</strong></p><p>打开IDEA，选择Active code，填入激活码</p><p>有效期至2020年3月11日</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">56ZS5PQ1RF-eyJsaWNlbnNlSWQiOiI1NlpTNVBRMVJGIiwibGljZW5zZWVOYW1lIjoi5q2j54mI5o6I5p2DIC4iLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiRm9yIGVkdWNhdGlvbmFsIHVzZSBvbmx5IiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJJSSIsInBhaWRVcFRvIjoiMjAyMC0wMy0xMCJ9LHsiY29kZSI6IkFDIiwicGFpZFVwVG8iOiIyMDIwLTAzLTEwIn0seyJjb2RlIjoiRFBOIiwicGFpZFVwVG8iOiIyMDIwLTAzLTEwIn0seyJjb2RlIjoiUFMiLCJwYWlkVXBUbyI6IjIwMjAtMDMtMTAifSx7ImNvZGUiOiJHTyIsInBhaWRVcFRvIjoiMjAyMC0wMy0xMCJ9LHsiY29kZSI6IkRNIiwicGFpZFVwVG8iOiIyMDIwLTAzLTEwIn0seyJjb2RlIjoiQ0wiLCJwYWlkVXBUbyI6IjIwMjAtMDMtMTAifSx7ImNvZGUiOiJSUzAiLCJwYWlkVXBUbyI6IjIwMjAtMDMtMTAifSx7ImNvZGUiOiJSQyIsInBhaWRVcFRvIjoiMjAyMC0wMy0xMCJ9LHsiY29kZSI6IlJEIiwicGFpZFVwVG8iOiIyMDIwLTAzLTEwIn0seyJjb2RlIjoiUEMiLCJwYWlkVXBUbyI6IjIwMjAtMDMtMTAifSx7ImNvZGUiOiJSTSIsInBhaWRVcFRvIjoiMjAyMC0wMy0xMCJ9LHsiY29kZSI6IldTIiwicGFpZFVwVG8iOiIyMDIwLTAzLTEwIn0seyJjb2RlIjoiREIiLCJwYWlkVXBUbyI6IjIwMjAtMDMtMTAifSx7ImNvZGUiOiJEQyIsInBhaWRVcFRvIjoiMjAyMC0wMy0xMCJ9LHsiY29kZSI6IlJTVSIsInBhaWRVcFRvIjoiMjAyMC0wMy0xMCJ9XSwiaGFzaCI6IjEyMjkxNDk4LzAiLCJncmFjZVBlcmlvZERheXMiOjAsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZX0=-SYSsDcgL1WJmHnsiGaHUWbaZLPIe2oI3QiIneDtaIbh/SZOqu63G7RGudSjf3ssPb1zxroMti/bK9II1ugHz/nTjw31Uah7D0HqeaCO7Zc0q9BeHysiWmBZ+8bABs5vr25GgIa5pO7CJhL7RitXQbWpAajrMBAeZ2En3wCgNwT6D6hNmiMlhXsWgwkw2OKnyHZ2dl8yEL+oV5SW14t7bdjYGKQrYjSd4+2zc4FnaX88yLnGNO9B3U6G+BuM37pxS5MjHrkHqMTK8W3I66mIj6IB6dYXD5nvKKO1OZREBAr6LV0BqRYSbuJKFhZ8nd6YDG20GvW6leimv0rHVBFmA0w==-MIIElTCCAn2gAwIBAgIBCTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE4MTEwMTEyMjk0NloXDTIwMTEwMjEyMjk0NlowaDELMAkGA1UEBhMCQ1oxDjAMBgNVBAgMBU51c2xlMQ8wDQYDVQQHDAZQcmFndWUxGTAXBgNVBAoMEEpldEJyYWlucyBzLnIuby4xHTAbBgNVBAMMFHByb2QzeS1mcm9tLTIwMTgxMTAxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQAF8uc+YJOHHwOFcPzmbjcxNDuGoOUIP+2h1R75Lecswb7ru2LWWSUMtXVKQzChLNPn/72W0k+oI056tgiwuG7M49LXp4zQVlQnFmWU1wwGvVhq5R63Rpjx1zjGUhcXgayu7+9zMUW596Lbomsg8qVve6euqsrFicYkIIuUu4zYPndJwfe0YkS5nY72SHnNdbPhEnN8wcB2Kz+OIG0lih3yz5EqFhld03bGp222ZQCIghCTVL6QBNadGsiN/lWLl4JdR3lJkZzlpFdiHijoVRdWeSWqM4y0t23c92HXKrgppoSV18XMxrWVdoSM3nuMHwxGhFyde05OdDtLpCv+jlWf5REAHHA201pAU6bJSZINyHDUTB+Beo28rRXSwSh3OUIvYwKNVeoBY+KwOJ7WnuTCUq1meE6GkKc4D/cXmgpOyW/1SmBz3XjVIi/zprZ0zf3qH5mkphtg6ksjKgKjmx1cXfZAAX6wcDBNaCL+Ortep1Dh8xDUbqbBVNBL4jbiL3i3xsfNiyJgaZ5sX7i8tmStEpLbPwvHcByuf59qJhV/bZOl8KqJBETCDJcY6O2aqhTUy+9x93ThKs1GKrRPePrWPluud7ttlgtRveit/pcBrnQcXOl1rHq7ByB8CFAxNotRUYL9IF5n3wJOgkPojMy6jetQA5Ogc8Sm7RG6vg1yow==</span><br></pre></td></tr></table></figure><p>有效期至2020年4月5日</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MNQ043JMTU-eyJsaWNlbnNlSWQiOiJNTlEwNDNKTVRVIiwibGljZW5zZWVOYW1lIjoiR1VPIEJJTiIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiIiLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IklJIiwiZmFsbGJhY2tEYXRlIjoiMjAxOS0wNC0wNSIsInBhaWRVcFRvIjoiMjAyMC0wNC0wNCJ9XSwiaGFzaCI6IjEyNjIxNDIwLzAiLCJncmFjZVBlcmlvZERheXMiOjcsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZX0=-tltrJHc5lqCKLnza1bcLhMzDkfJeBqhRWbvcrPF9Gqo+X+iFWeKQXoEUOlrG38uSzzmX05ph//PgXgyVfP5RXKsaRMfrv/thoouS5sA0aTemm3z6uRiFirTDj60KSGr5XZoP/WAXO4nuti6SRKZUbr/VSAtRPQRiCJvevq+3gWPDGu2aZ0AemiNLq4qIVWH3wxTN7lK2h5uJssZsyy35Yy9O703c5PFU0fxCj2HRgXq7H/91X+ZNLvvAZAVU9B7bOqnY4ZzNNV/cjY8B5gNo53Lo6s2szEV7DsZ+8e7k8P4Yo81DKxneCBoe4wiZmRaCIT6wK3/27KrtQTFMcGeZMA==-MIIElTCCAn2gAwIBAgIBCTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE4MTEwMTEyMjk0NloXDTIwMTEwMjEyMjk0NlowaDELMAkGA1UEBhMCQ1oxDjAMBgNVBAgMBU51c2xlMQ8wDQYDVQQHDAZQcmFndWUxGTAXBgNVBAoMEEpldEJyYWlucyBzLnIuby4xHTAbBgNVBAMMFHByb2QzeS1mcm9tLTIwMTgxMTAxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQAF8uc+YJOHHwOFcPzmbjcxNDuGoOUIP+2h1R75Lecswb7ru2LWWSUMtXVKQzChLNPn/72W0k+oI056tgiwuG7M49LXp4zQVlQnFmWU1wwGvVhq5R63Rpjx1zjGUhcXgayu7+9zMUW596Lbomsg8qVve6euqsrFicYkIIuUu4zYPndJwfe0YkS5nY72SHnNdbPhEnN8wcB2Kz+OIG0lih3yz5EqFhld03bGp222ZQCIghCTVL6QBNadGsiN/lWLl4JdR3lJkZzlpFdiHijoVRdWeSWqM4y0t23c92HXKrgppoSV18XMxrWVdoSM3nuMHwxGhFyde05OdDtLpCv+jlWf5REAHHA201pAU6bJSZINyHDUTB+Beo28rRXSwSh3OUIvYwKNVeoBY+KwOJ7WnuTCUq1meE6GkKc4D/cXmgpOyW/1SmBz3XjVIi/zprZ0zf3qH5mkphtg6ksjKgKjmx1cXfZAAX6wcDBNaCL+Ortep1Dh8xDUbqbBVNBL4jbiL3i3xsfNiyJgaZ5sX7i8tmStEpLbPwvHcByuf59qJhV/bZOl8KqJBETCDJcY6O2aqhTUy+9x93ThKs1GKrRPePrWPluud7ttlgtRveit/pcBrnQcXOl1rHq7ByB8CFAxNotRUYL9IF5n3wJOgkPojMy6jetQA5Ogc8Sm7RG6vg1yow==</span><br></pre></td></tr></table></figure><p>有效期至2020年1月8日</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">N757JE0KCT-eyJsaWNlbnNlSWQiOiJONzU3SkUwS0NUIiwibGljZW5zZWVOYW1lIjoid3UgYW5qdW4iLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiRm9yIGVkdWNhdGlvbmFsIHVzZSBvbmx5IiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJJSSIsInBhaWRVcFRvIjoiMjAyMC0wMS0wNyJ9LHsiY29kZSI6IkFDIiwicGFpZFVwVG8iOiIyMDIwLTAxLTA3In0seyJjb2RlIjoiRFBOIiwicGFpZFVwVG8iOiIyMDIwLTAxLTA3In0seyJjb2RlIjoiUFMiLCJwYWlkVXBUbyI6IjIwMjAtMDEtMDcifSx7ImNvZGUiOiJHTyIsInBhaWRVcFRvIjoiMjAyMC0wMS0wNyJ9LHsiY29kZSI6IkRNIiwicGFpZFVwVG8iOiIyMDIwLTAxLTA3In0seyJjb2RlIjoiQ0wiLCJwYWlkVXBUbyI6IjIwMjAtMDEtMDcifSx7ImNvZGUiOiJSUzAiLCJwYWlkVXBUbyI6IjIwMjAtMDEtMDcifSx7ImNvZGUiOiJSQyIsInBhaWRVcFRvIjoiMjAyMC0wMS0wNyJ9LHsiY29kZSI6IlJEIiwicGFpZFVwVG8iOiIyMDIwLTAxLTA3In0seyJjb2RlIjoiUEMiLCJwYWlkVXBUbyI6IjIwMjAtMDEtMDcifSx7ImNvZGUiOiJSTSIsInBhaWRVcFRvIjoiMjAyMC0wMS0wNyJ9LHsiY29kZSI6IldTIiwicGFpZFVwVG8iOiIyMDIwLTAxLTA3In0seyJjb2RlIjoiREIiLCJwYWlkVXBUbyI6IjIwMjAtMDEtMDcifSx7ImNvZGUiOiJEQyIsInBhaWRVcFRvIjoiMjAyMC0wMS0wNyJ9LHsiY29kZSI6IlJTVSIsInBhaWRVcFRvIjoiMjAyMC0wMS0wNyJ9XSwiaGFzaCI6IjExNTE5OTc4LzAiLCJncmFjZVBlcmlvZERheXMiOjAsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZX0=-AE3x5sRpDellY4SmQVy2Pfc2IT7y1JjZFmDA5JtOv4K5gwVdJOLw5YGiOskZTuGu6JhOi50nnd0WaaNZIuVVVx3T5MlXrAuO3kb2qPtLtQ6/n3lp4fIv+6384D4ciEyRWijG7NA9exQx39Tjk7/xqaGk7ooKgq5yquIfIA+r4jlbW8j9gas1qy3uTGUuZQiPB4lv3P5OIpZzIoWXnFwWhy7s//mjOWRZdf/Du3RP518tMk74wizbTeDn84qxbM+giNAn+ovKQRMYHtLyxntBiP5ByzfAA9Baa5TUGW5wDiZrxFuvBAWTbLrRI0Kd7Nb/tB9n1V9uluB2WWIm7iMxDg==-MIIElTCCAn2gAwIBAgIBCTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE4MTEwMTEyMjk0NloXDTIwMTEwMjEyMjk0NlowaDELMAkGA1UEBhMCQ1oxDjAMBgNVBAgMBU51c2xlMQ8wDQYDVQQHDAZQcmFndWUxGTAXBgNVBAoMEEpldEJyYWlucyBzLnIuby4xHTAbBgNVBAMMFHByb2QzeS1mcm9tLTIwMTgxMTAxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQAF8uc+YJOHHwOFcPzmbjcxNDuGoOUIP+2h1R75Lecswb7ru2LWWSUMtXVKQzChLNPn/72W0k+oI056tgiwuG7M49LXp4zQVlQnFmWU1wwGvVhq5R63Rpjx1zjGUhcXgayu7+9zMUW596Lbomsg8qVve6euqsrFicYkIIuUu4zYPndJwfe0YkS5nY72SHnNdbPhEnN8wcB2Kz+OIG0lih3yz5EqFhld03bGp222ZQCIghCTVL6QBNadGsiN/lWLl4JdR3lJkZzlpFdiHijoVRdWeSWqM4y0t23c92HXKrgppoSV18XMxrWVdoSM3nuMHwxGhFyde05OdDtLpCv+jlWf5REAHHA201pAU6bJSZINyHDUTB+Beo28rRXSwSh3OUIvYwKNVeoBY+KwOJ7WnuTCUq1meE6GkKc4D/cXmgpOyW/1SmBz3XjVIi/zprZ0zf3qH5mkphtg6ksjKgKjmx1cXfZAAX6wcDBNaCL+Ortep1Dh8xDUbqbBVNBL4jbiL3i3xsfNiyJgaZ5sX7i8tmStEpLbPwvHcByuf59qJhV/bZOl8KqJBETCDJcY6O2aqhTUy+9x93ThKs1GKrRPePrWPluud7ttlgtRveit/pcBrnQcXOl1rHq7ByB8CFAxNotRUYL9IF5n3wJOgkPojMy6jetQA5Ogc8Sm7RG6vg1yow==</span><br></pre></td></tr></table></figure><p>点击OK即可完成。</p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大一总结</title>
      <link href="/LiYpoi.github.io/2019/07/11/%E5%A4%A7%E4%B8%80%E6%80%BB%E7%BB%93/"/>
      <url>/LiYpoi.github.io/2019/07/11/%E5%A4%A7%E4%B8%80%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>今天算是大一生活的结束吧，回顾这一年，似乎没做什么事，只是看了写书，算是学了些额外的知识，还有建立这个博客，开始习惯每天记录些东西。如果说最大的收获的话，应该是锻炼的自己的自学能力了，毕竟大学大学，不就是大量的自学吗。不过我现在自学的东西还不算多，前端方面只比班中的同学多一些，C++这门语言，在我看来，是一把高级厨具，以我目前的能力，还不能用它做出好菜来，将来还需要继续打磨。</p><p>大二希望自己能坚持自我，爱自己做的事，做自己爱的事。</p><p><img src="https://i.loli.net/2019/07/11/5d275110e5b8725255.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>立Flag</title>
      <link href="/LiYpoi.github.io/2019/07/03/%E7%AB%8BFlag/"/>
      <url>/LiYpoi.github.io/2019/07/03/%E7%AB%8BFlag/</url>
      
        <content type="html"><![CDATA[<p>最近总在想着暑假做些什么事，大致安排了这些：</p><ul><li style="list-style: none"><input type="checkbox"> 将驾照考下来</li><li style="list-style: none"><input type="checkbox"> 把汇编系列的视频看完</li><li style="list-style: none"><input type="checkbox"> 将家里的台式机重新装一下系统(以前Win7升Win10，升完C盘只剩4G的空间了😭)</li><li style="list-style: none"><input type="checkbox"> 自学Java</li><li style="list-style: none"><input type="checkbox"> 自学离散数学</li><li style="list-style: none"><input type="checkbox"> 自学Python(去年买了Python的书，一直没怎么看，只在电脑里安装了开发环境)</li><li style="list-style: none"><input type="checkbox"> 练练自己的PPT技术，加了知识星球后，只做了两次作业，还拿了两次抽奖的奖品😂</li><li style="list-style: none"><input type="checkbox"> 多看看书吧，上了大学后，感觉读的书比中学的时候还多，我阅读的巅峰时期停留在小学了 (ˉ▽ˉ；)…</li></ul>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端之N个问题</title>
      <link href="/LiYpoi.github.io/2019/06/30/%E5%89%8D%E7%AB%AF%E4%B9%8BN%E4%B8%AA%E9%97%AE%E9%A2%98/"/>
      <url>/LiYpoi.github.io/2019/06/30/%E5%89%8D%E7%AB%AF%E4%B9%8BN%E4%B8%AA%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>这篇文章会汇总在学习前端过程中一些基础的问题，目前学了一些东西，但是，单拿出来确很难说清楚，究其原因还是基础知识掌握不好，只记住了一些操作，理论上的知识理解不到位，以下问题的答案都是以我的个人理解所写，其作用是帮助我对基础的知识进行复盘。</p><h4 id="Web语义化是什么，是为了解决什么问题？"><a href="#Web语义化是什么，是为了解决什么问题？" class="headerlink" title="Web语义化是什么，是为了解决什么问题？"></a>Web语义化是什么，是为了解决什么问题？</h4><p><a href="[https://liypoi.github.io/LiYpoi.github.io/2019/06/26/%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3Web%E8%AF%AD%E4%B9%89%E5%8C%96%EF%BC%9F/#more](https://liypoi.github.io/LiYpoi.github.io/2019/06/26/如何理解Web语义化？/#more">如何理解Web语义化?</a>)</p><h4 id="HTML是什么，HTML5是什么"><a href="#HTML是什么，HTML5是什么" class="headerlink" title="HTML是什么，HTML5是什么?"></a>HTML是什么，HTML5是什么?</h4><p>HTML(超文本标记语言)是一种用于创建网页的标准标记语言。</p><p>HTML5是HTML最新的修订版，由W3C制定。</p><h4 id="HTML元素标签、属性都是什么概念？"><a href="#HTML元素标签、属性都是什么概念？" class="headerlink" title="HTML元素标签、属性都是什么概念？"></a>HTML元素标签、属性都是什么概念？</h4><p>一个HTML元素是HTML文件的一个基本组成单元。</p><p>属性为HTML元素提供附加信息，可以是列表、标题、段落等匹配DTD要求的格式。</p><h4 id="DTD是什么？"><a href="#DTD是什么？" class="headerlink" title="DTD是什么？"></a>DTD是什么？</h4><p>DTD(文档类型定义)是一套为了进行程序间数据交换而建立的关于标记符的语法规则，可定义合法的XML文档构建模块。但对XML文件而言，DTD并非必需，DTD有四个组成：元素、属性、实体、注释。</p><h4 id="什么是CSS，CSS是如何工作的"><a href="#什么是CSS，CSS是如何工作的" class="headerlink" title="什么是CSS，CSS是如何工作的?"></a>什么是CSS，CSS是如何工作的?</h4><p>CSS(层叠样式表)是一种用来结构化文档添加样式的计算机语言，由W3C制定。</p><p>CSS不能单独使用，必须与HTML或XML一起协同工作，它将文件的内容和显示分离。CSS的使用灵活，但会频繁出现规则冲突，CSS的规则冲突可以分为不同来源之间的规则冲突和同一来源内部的规则冲突，CSS分层次、立体化的比较不同规则的优先级的方式，这就是所谓层叠性的体现。</p><h4 id="CSS选择器是什么概念"><a href="#CSS选择器是什么概念" class="headerlink" title="CSS选择器是什么概念?"></a>CSS选择器是什么概念?</h4><p>选择器是针对没有标签定义范围进行样式设定的。</p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> N个问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编基础</title>
      <link href="/LiYpoi.github.io/2019/06/28/%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80/"/>
      <url>/LiYpoi.github.io/2019/06/28/%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>汇编的学习完全出于偶然，学校好像大三才有嵌入式的课程，但是这几天正值Steam夏季促销，买了一款游戏<code>SHENZHENI/O</code>,看着游戏自带的近50的PDF手册以及汇编的说明，我就知道这游戏并不简单，只过了第一关，一些关于汇编的指令完全不懂，全网关于汇编的教程又比较少，多方搜索后找到了<a href="https://www.bilibili.com/video/av28132657?zw" target="_blank" rel="noopener">小甲鱼零基础学汇编</a>和<a href="http://www.ruanyifeng.com/blog/2018/01/assembly-language-primer.html" target="_blank" rel="noopener">阮一峰的汇编语言入门教程</a>。将学习的笔记整理于此。</p><p>推荐阅读：<a href="https://milapneupane.com.np/2019/07/06/how-does-a-cpu-work/" target="_blank" rel="noopener">CPU如何工作？</a></p><h2 id="一、基础知识"><a href="#一、基础知识" class="headerlink" title="一、基础知识"></a>一、基础知识</h2><p><strong>汇编语言是二进制指令的文本形式</strong>，与指令是一一对应的关系。CPU只负责运算，本身不具备只能，当CPU接受到一条输入的指令后，它就运行一次，然后等待下一条指令。这些指令都是二进制的(是机器的语言)，但对于人类来说，二进制的指令过于难读，所以就诞生了与二进制指令一一对应的汇编语言。由于汇编语言最接近机器语言，所以汇编语言的执行效率是所有语言中最快的，但其所写代码量也是最大的。每一种CPU的机器指令都是不一样的，因此对应的汇编语言也不一样，笔记中所写的是目前最常见的x86汇编语言，即Intel公司的CPU使用的那一种。</p><h3 id="汇编语言的组成"><a href="#汇编语言的组成" class="headerlink" title="汇编语言的组成"></a>汇编语言的组成</h3><p>汇编语言由以下3类组成：</p><p>1.汇编指令（机器码的助记符）汇编语言的核心是汇编指令</p><p>2.伪指令（由编译器执行）</p><p>3.其他符号（由编译器识别） </p><p><img src="https://i.loli.net/2019/06/30/5d18c9fcaed2073958.png" alt></p><h3 id="CPU的三种总线"><a href="#CPU的三种总线" class="headerlink" title="CPU的三种总线"></a>CPU的三种总线</h3><p>1.地址总线：决定CPU的寻址能力</p><p>２.数据总线：决定CPU与其它器件进行数据传送时的一次数据传送量</p><p>３.控制总线：决定CPU对系统中其它器件的控制能力</p><hr><h2 id="二、寄存器-CPU工作原理"><a href="#二、寄存器-CPU工作原理" class="headerlink" title="二、寄存器(CPU工作原理)"></a>二、寄存器(CPU工作原理)</h2><p>CPU 本身只负责运算，不负责储存数据。数据一般都储存在内存之中，所以CPU需要到内存中读取数据，但是，CPU的运算速度比内存的读写速度快，为了保持一致，CPU中自带了一级缓存和二级缓存，CPU缓存用于减少处理器访问内存所需平均时间的部件。其容量远小于内存，但速度却接近CPU的频率。</p><p>但是，数据在缓存里面的地址是不固定的，CPU 每次读写都要寻址会拖慢速度。因此，除了缓存之外，CPU 还自带了寄存器，用来储存最常用的数据。CPU对存储器中的数据进行处理时，往往先把数据取到内部寄存器中，而后再作处理。寄存器不依靠地址区分数据，而依靠名称。每一个寄存器都有自己的名称。早期的 x86 CPU 只有8个寄存器，而且每个都有不同的用途。现在的寄存器已经有100多个了，都变成通用寄存器，不特别指定用途了，但是早期寄存器的名字都被保存了下来。</p><p>x86CPU所有寄存器都是16位的，可以存放两个字节，<code>AX</code>、<code>BX</code>、<code>CX</code>、<code>DX</code>通常用来存放一般性的数据被称为通用寄存器。</p><p>下面以AX为例解释16位寄存器的逻辑结构</p><ul><li><p>数据：18</p></li><li><p>二进制表示：10010</p></li><li><p>在寄存器AX中的存储：</p><p><img src="https://i.loli.net/2019/06/29/5d174bdb849b325059.png" alt></p></li></ul><p>x86以上的一代CPU寄存器都是8位的，从x86开始寄存器开始了16位的时代，但为了兼容上一代，AX、BX、CX、DX都可以分为两个独立的8位寄存器使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AX可以分为AH和AL    //累加寄存器，常用于运算</span><br><span class="line">BX可以分为BH和BL    //基址寄存器，常用于地址索引</span><br><span class="line">CX可以分为CH和CL    //计数寄存器，常用于计数</span><br><span class="line">DX可以分为DH和DL    //数据寄存器，常用于数据传递</span><br></pre></td></tr></table></figure><h3 id="几条汇编指令"><a href="#几条汇编指令" class="headerlink" title="几条汇编指令"></a>几条汇编指令</h3><p><strong>汇编指令不区分大小写</strong></p><table><thead><tr><th>汇编指令</th><th>控制CPU完成的操作</th><th>用高级语言的语法描述</th></tr></thead><tbody><tr><td>mov  ax,18</td><td>将8送入AX</td><td>AX=18</td></tr><tr><td>mov  ah,78</td><td>将78送入AH</td><td>AH=78</td></tr><tr><td>add  ax,8</td><td>将寄存器AX中的数值加上8</td><td>AX=AX+8</td></tr><tr><td>mov  ax,bx</td><td>将寄存器BX中的数值送入寄存器AX</td><td>AX=BX</td></tr><tr><td>add  ax,bx</td><td>将AX，BX中的内容相加，结果存在AX中</td><td>AX=AX+BX</td></tr></tbody></table><h3 id="物理地址"><a href="#物理地址" class="headerlink" title="物理地址"></a>物理地址</h3><p>CPU访问内存单元时要给出内存单元的地址，所有的内存单元构成的存储空间是一个<code>一维的线性空间</code>。</p><p><strong>16位结构的CPU</strong></p><p>16位结构描述一个CPU具有以下特征：1.运算器一次最多可以处理16位的数据 2.寄存器的最大宽度为16位 3.寄存器和运算器之间的通路是16位的</p><p><strong>x86给出物理地址的方法</strong></p><p>x86外部有20位地址总线，可以传送20位地址，寻址能力为1M；x86内部为16位结构，它只能传送16位的地址，寻址能力只有64K,x86采用一种在内部用两个16位地址合成的方法来形成一个20位的物理地址。</p><p><img src="https://i.loli.net/2019/06/30/5d18cb4e0831f64751.png" alt></p><p>地址加法器合成物理地址的方法：物理地址=段地址x16+偏移地址。</p><p>“段地址x16”有一个更常用的说法是左移4位，其中的“位”，指的是二进制位。</p><p>例如：一个数据为2H，二进制形式为10B，对其进行左移运算</p><table><thead><tr><th style="text-align:center">左移位数</th><th style="text-align:center">二进制</th><th style="text-align:center">十六进制</th><th style="text-align:center">十进制</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">10B</td><td style="text-align:center">2H</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">100B</td><td style="text-align:center">4H</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">1000B</td><td style="text-align:center">8H</td><td style="text-align:center">8</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">10000B</td><td style="text-align:center">10H</td><td style="text-align:center">16</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">100000B</td><td style="text-align:center">20H</td><td style="text-align:center">32</td></tr></tbody></table><p>由上表可以得出：</p><ul><li>一个数据的二进制形式左移1位，相当于该数据乘以2；</li><li>一个数据的二进制形式左移N位，相当于该数据乘以2的N次方；</li><li>一个数据的十六进制形式左移1位，相当于乘以16；</li><li>一个数据的十进制形式左移一位，相当于乘以10；</li><li>一个数据的x进制形式左移1位，相当于乘以x;</li></ul><p><strong>段的概念</strong></p><p>内存没有分段，段的划分来自于CPU，在编程时可以根据需要，将若干地址连续的内存单元看作一个段，用段地址x16定位段的起始地址，用偏移地址定位段中的内存单元；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">段地址x16必然是16的倍数，所以一个段的起始地址也是16的倍数；</span><br><span class="line">偏移地址为16位，16位地址的寻址能力为64KB(2的16次方)，所以一个段的长度最大为64KB</span><br></pre></td></tr></table></figure><p>小结：</p><ul><li>CPU访问内存单元时，必须向内存提供内存单元的物理地址</li><li>x86CPU在内部用不同的段地址和偏移地址移位相加的方法形成最终的同一个物理地址</li></ul><p><strong>段寄存器</strong></p><p>段寄存器就是提供段地址的，x86CPU有４个段寄存器：<code>CS</code>、<code>DS</code>、<code>SS</code>、<code>ES</code>。当x86CPU要访问内存时，由这四个段寄存器提供内存单元的段地址。</p><p><code>CS</code>(代码段寄存器)和IP(指令指针寄存器)时x86CPU中最关键的寄存器，它们指示了CPU当前读取指令的地址。</p><p><code>mov</code>指令不能用于设置<code>CS</code>、<code>IP</code>的值，而使用转移指令<code>jmp</code>，<code>jmp</code>用指令中给出的段地址修改CS，偏移地址修改IP，<code>jmp</code>是具有一个操作对象的指令。</p><table><thead><tr><th style="text-align:center">同时修改CS、IP内容</th><th style="text-align:center">仅修改IP的内容</th></tr></thead><tbody><tr><td style="text-align:center">jmp 段地址:偏移地址</td><td style="text-align:center">jmp 某一合法寄存器</td></tr><tr><td style="text-align:center">jmp 2AE3:3</td><td style="text-align:center">jmp ax(类似于mov IP,ax)</td></tr></tbody></table><p><strong>代码段</strong></p><p>可以将长度为N(N$\leq$64KB )的一组代码，存在一组地址连续、起始地址为16的倍数的内存单元，这段内存是用来存放代码的，从而定义了一个代码段。但CPU并不会将定义的代码段中的指令当作指令来执行，<strong>CPU只认被CS:IP指向的内存单元中的内容为指令。</strong></p><h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><p><strong>注意：</strong>Win10没有<code>debug</code>，<code>debug</code>是16位的程序，32位系统可以兼容，64位系统已经不能兼容了。解决办法<a href="https://jingyan.baidu.com/article/9faa7231fd2775473c28cb26.html" target="_blank" rel="noopener">window10如何使用debug</a></p><ul><li>R命令查看、改变CPU寄存器的内容</li><li>D命令查看内存中的内容</li><li>E命令改写内存中的内容</li><li>U命令将内存中的机器指令翻译成汇编指令</li><li>T命令执行一条机器指令</li><li>A命令以汇编指令的格式在内存中写入一条机器指令</li></ul><h2 id="三、寄存器-内存访问"><a href="#三、寄存器-内存访问" class="headerlink" title="三、寄存器(内存访问)"></a>三、寄存器(内存访问)</h2><p>x86CPU中有一个<code>DS</code>寄存器，通常用来存放要访问的数据的段地址。</p><h3 id="DS和-address"><a href="#DS和-address" class="headerlink" title="DS和[address]"></a>DS和[address]</h3><p>已知的<code>mov</code>指令可以完成的两种传送功能：1.将数据直接送入寄存器，例如：<code>mov  ax,2</code>2.将一个寄存器中的内容送入另一个寄存器中，例如：<code>mov bx, ax</code>;除此之外，<code>mov</code>指令还可以将一个内存单元中的内容送入一个寄存器，例如：<code>mov al,[0]</code>。[address]表示一个偏移地址为address的内存单元。</p><p><code>mov</code>指令的格式：</p><table><thead><tr><th><code>mov</code> 寄存器，数据;</th><th>mov  ax,6</th></tr></thead><tbody><tr><td><code>mov</code>寄存器，寄存器</td><td>mov  bx,ax</td></tr><tr><td><code>mov</code>寄存器，内存单元地址</td><td>mov  ax,[0]</td></tr><tr><td><code>mov</code> 内存单元，寄存器</td><td>mov  [0],ax</td></tr><tr><td><code>mov</code>段寄存器，寄存器</td><td>mov  ds,ax</td></tr></tbody></table><h3 id="mov、add、sub指令"><a href="#mov、add、sub指令" class="headerlink" title="mov、add、sub指令"></a>mov、add、sub指令</h3><p><code>add</code>指令和<code>sub</code>指令同<code>mov</code>一样，都有两个操作对象</p><table><thead><tr><th><code>add</code> 寄存器，数据;</th><th>add  ax,6</th></tr></thead><tbody><tr><td><code>add</code>寄存器，寄存器</td><td>add  bx,ax</td></tr><tr><td><code>add</code>寄存器，内存单元地址</td><td>add  ax,[0]</td></tr><tr><td><code>add</code> 内存单元，寄存器</td><td>add  [0],ax</td></tr></tbody></table><table><thead><tr><th><code>sub</code> 寄存器，数据;</th><th>sub  ax,6</th></tr></thead><tbody><tr><td><code>sub</code>寄存器，寄存器</td><td>sub  bx,ax</td></tr><tr><td><code>sub</code>寄存器，内存单元地址</td><td>sub  ax,[0]</td></tr><tr><td><code>sub</code> 内存单元，寄存器</td><td>sub  [0],ax</td></tr></tbody></table><p><strong>数据段</strong></p><p>可以将一组长度为N(N$\leq$64KB )、地址连续、起始地址为16的倍数的内存单元当作专门存储数据的内存空间，从而定义了一个数据段。</p><p>访问时，用ds存放数据的的段地址，再根据需要，用相关指令访问数据段中的具体单元。</p><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>栈是一种具有特殊的访问方式的存储空间。它的特殊性在于，最后进入栈的，最先出栈，即:LIFO(Last In First Out)。现今的CPU中都有栈的设计，这就意味着，在基于x86CPU编程的时候，可以将一段内存当作栈来使用。</p><p>x86CPU提供入栈和出栈指令：(最基本的)<code>PUSH</code>入栈 、<code>POP</code>出栈，x86CPU的入栈和出栈操作都是以字为单位进行的，字型数据用两个单元存放，高地址单元放高8位，低地址单元放低8位</p><p><code>push ax</code>:将寄存器<code>ax</code>中的数据送入栈中；<code>pop ax</code>:从栈顶取出数据送入<code>ax</code>;除此之外，<code>push</code> <code>pop</code>指令还可以对段寄存器和内存单元执行。</p><p>这就引出两个问题：1.CPU如何指导当前要执行的指令所在的位置？2.执行<code>push</code>和<code>pop</code>的时候，如何知道哪个单元是栈顶单元？</p><p>答:寄存器<code>CS</code>和<code>IP</code>中存放着当前指令的段地址和偏移地址；x86CPU中，有两个寄存器:段寄存器<code>SS</code>存放栈顶的段地址，寄存器<code>SP</code>存放栈顶的偏移地址，任意时刻，<code>SS:SP</code>指向栈顶元素。</p><p>任意时刻，<code>SS:SP</code>指向栈顶元素，当栈为空的时候，栈中没有元素，也就不存在栈顶元素。所以<code>SS:SP</code>只能指向栈的最底部单元下面的单元，该单元的偏移地址为<strong>栈最底部的字单元的偏移地址+2</strong>，即<code>SP=SP-2</code>。</p><h3 id="栈顶越界的问题"><a href="#栈顶越界的问题" class="headerlink" title="栈顶越界的问题"></a>栈顶越界的问题</h3><p><code>SS</code>和<code>SP</code>只记录了栈顶的地址，依靠<code>SS</code>和<code>SP</code>可以保证在入栈和出栈时找到栈顶。但如何能保证在入栈、出栈时，栈顶不会超出栈空间？</p><p>x86CPU不保证对栈的操作不会越界，这就是说，<strong>x86CPU只知道栈顶在何处，而不知道安排的栈空间有多大</strong>，这好比CPU只知道当前要执行的指令在何处，而不知道要执行的指令有多少。</p><p>在编程的时候要自己关注栈顶越界的问题，根据可能用到的最大栈空间，来安排栈的大小，防止入栈的数据太多而导致的越界；执行出栈操作的时候也要注意，以防栈空的时候继续出栈而导致的越界。</p><p>push和pop实质上就是一种内存传送指令，可以在寄存器和内存之间传送数据，与mov指令不同的是，push和pop指令访问的内存单元的地址不是在指令中给出的，而是由SS:SP指出的。</p><h3 id="栈段"><a href="#栈段" class="headerlink" title="栈段"></a>栈段</h3><p>可以将一组长度为N(N$\leq$64KB )、地址连续、起始地址为16的倍数的内存单元，当作栈来使用，从而定义了一个栈段。</p><p>任意时刻，<code>SS:SP</code>指向栈顶元素，当栈为空的时候，栈中没有元素，也就不存在栈顶元素，所以<code>SS:SP</code>只能指向栈的最底部单元下面的单元，该单元的偏移地址为栈最底部的字单元的偏移地址+2</p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何理解Web语义化？</title>
      <link href="/LiYpoi.github.io/2019/06/26/%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3Web%E8%AF%AD%E4%B9%89%E5%8C%96%EF%BC%9F/"/>
      <url>/LiYpoi.github.io/2019/06/26/%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3Web%E8%AF%AD%E4%B9%89%E5%8C%96%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p>第二天百度前端学院的任务里有推荐读<a href="https://www.zhihu.com/question/20455165" target="_blank" rel="noopener">顾轶灵的如何理解Web语义化?</a>,这里先贴一下链接。文中所说，目前Web上的内容越来越多，只能通过机器对其处理，为了使机器对内容的精确可读，有两个发展方向。一是大力发展人工智能，朝着人类水平的方向发展；二是语义网，这也是万维网的创始人Tim Berners-Lee提出的美好想法。</p><p>两条路的目标都很难实现，第一条路技术上难，第二条路实施起来障碍多。为什么说第二条路障碍多？这要说到语义网了。语义网简单来说就是能够根据语义进行判断的智能网络，可以实现人与电脑之间的无障碍沟通，它的智能化程度极高，协调能力也非常强大。它将一切信息和信息之间的逻辑关系包含在一起，一个个的信息孤岛整合成一个巨大的数据库。同时，语义化也是Web3.0的特征之一。</p><p>现在的HTML规范、HTML5一直在往语义化的方向努力，许多属性、元素在设计的时候就是为了让用户代理更好理解HTML文档，Ｈ5更是在之前的规范基础上，对所有表现层的语义描述都进行了修改或删除，增加了表达更丰富语义的元素，它使对应的信息认可程度提高。</p>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔</title>
      <link href="/LiYpoi.github.io/2019/06/24/%E9%9A%8F%E7%AC%94-7/"/>
      <url>/LiYpoi.github.io/2019/06/24/%E9%9A%8F%E7%AC%94-7/</url>
      
        <content type="html"><![CDATA[<p>今天在百度前端技术学院报了名，开始系统学习一下前端的东西，这学期的课程只是HTML+CSS+JS的基础，顺便贴一篇文章<a href="https://www.zhihu.com/question/22689579" target="_blank" rel="noopener">Web 建站技术中，HTML、HTML5、XHTML、CSS、SQL、JavaScript、PHP、ASP.NET、Web Services 是什么？</a></p>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔</title>
      <link href="/LiYpoi.github.io/2019/06/23/%E9%9A%8F%E7%AC%94-6/"/>
      <url>/LiYpoi.github.io/2019/06/23/%E9%9A%8F%E7%AC%94-6/</url>
      
        <content type="html"><![CDATA[<p>名字要跟着NASA的火箭上火星了，哈哈哈哈哈哈哈哈哈哈哈哈</p><p><img src="https://i.loli.net/2019/06/23/5d0f8dc08a3c725530.png" alt="1"></p><p><img src="https://i.loli.net/2019/06/23/5d0f8df0199b735922.png" alt="2"></p>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery效果</title>
      <link href="/LiYpoi.github.io/2019/06/20/jQuery%E6%95%88%E6%9E%9C/"/>
      <url>/LiYpoi.github.io/2019/06/20/jQuery%E6%95%88%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="jQuery-效果-隐藏和显示"><a href="#jQuery-效果-隐藏和显示" class="headerlink" title="jQuery 效果 - 隐藏和显示"></a>jQuery 效果 - 隐藏和显示</h2><h3 id="jQuery-hide-和-show"><a href="#jQuery-hide-和-show" class="headerlink" title="jQuery hide() 和 show()"></a>jQuery hide() 和 show()</h3><p>  通过hide()和show()方法来隐藏和显示HTML元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#hide"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"p"</span>).hide();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">"#show"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"p"</span>).show();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>语法：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(selsctor).hide(speed,callback);</span><br><span class="line">$(selsctor).show(speed,callback);</span><br></pre></td></tr></table></figure><p>speed参数规定隐藏或显示的速度，可取:”slow”、”fast”或者毫秒。</p><p>callback参数是隐藏或者显示完成后所执行的函数名称。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;   <span class="comment">//带有 speed 参数的 hide() 方法：</span></span><br><span class="line">  $(<span class="string">"p"</span>).hide(<span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="jQuery-toggle"><a href="#jQuery-toggle" class="headerlink" title="jQuery toggle()"></a>jQuery toggle()</h3><p>使用toggle()方法来切换hide()和show()方法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/jquery/jquery-1.11.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">  $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">  $(<span class="string">"p"</span>).toggle();</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是另一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>语法:</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).toggle(speed,callback);</span><br></pre></td></tr></table></figure><p>speed参数规定隐藏或显示的速度，可取:”slow”、”fast”或者毫秒。</p><p>callback参数是toggle()方法完成后所执行的函数名称。</p><p><strong>更多参见<a href="http://www.w3school.com.cn/jquery/jquery_ref_effects.asp" target="_blank" rel="noopener">jQuery效果参考手册</a></strong></p><hr><h2 id="jQuery-效果-淡入淡出"><a href="#jQuery-效果-淡入淡出" class="headerlink" title="jQuery 效果 - 淡入淡出"></a>jQuery 效果 - 淡入淡出</h2><h3 id="jQuery-Fading-方法"><a href="#jQuery-Fading-方法" class="headerlink" title="jQuery Fading 方法"></a>jQuery Fading 方法</h3><p>通过 jQuery，可以实现元素的淡入淡出效果。</p><p>jQuery 拥有下面四种 fade 方法：</p><ul><li>fadeIn()</li><li>fadeOut()</li><li>fadeToggle()</li><li>fadeTo()</li></ul><p>jQuery fadeIn() 用于淡入已隐藏的元素。</p><p><strong>语法：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).fadeIn(speed,callback);</span><br></pre></td></tr></table></figure><p>可选的 speed 参数规定效果的时长。它可以取以下值：”slow”、”fast” 或毫秒。</p><p>可选的 callback 参数是 fading 完成后所执行的函数名称。</p><p>举例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/jquery/jquery-1.11.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">  $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">"#div1"</span>).fadeIn();</span></span><br><span class="line"><span class="javascript">    $(<span class="string">"#div2"</span>).fadeIn(<span class="string">"slow"</span>);</span></span><br><span class="line"><span class="javascript">    $(<span class="string">"#div3"</span>).fadeIn(<span class="number">3000</span>);</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>演示带有不同参数的 fadeIn() 方法。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>点击这里，使三个矩形淡入<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span> <span class="attr">style</span>=<span class="string">"width:80px;height:80px;display:none;background-color:red;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div2"</span> <span class="attr">style</span>=<span class="string">"width:80px;height:80px;display:none;background-color:green;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div3"</span> <span class="attr">style</span>=<span class="string">"width:80px;height:80px;display:none;background-color:blue;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="jQuery-fadeToggle-方法"><a href="#jQuery-fadeToggle-方法" class="headerlink" title="jQuery fadeToggle() 方法"></a>jQuery fadeToggle() 方法</h3><p>jQuery fadeToggle() 方法可以在 fadeIn() 与 fadeOut() 方法之间进行切换。</p><p>如果元素已淡出，则 fadeToggle() 会向元素添加淡入效果。</p><p>如果元素已淡入，则 fadeToggle() 会向元素添加淡出效果。</p><p><strong>语法：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).fadeToggle(speed,callback);</span><br></pre></td></tr></table></figure><p>可选的 speed 参数规定效果的时长。它可以取以下值：”slow”、”fast” 或毫秒。</p><p>可选的 callback 参数是 fading 完成后所执行的函数名称。</p><p>举例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/jquery/jquery-1.11.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">  $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">"#div1"</span>).fadeToggle();</span></span><br><span class="line"><span class="javascript">    $(<span class="string">"#div2"</span>).fadeToggle(<span class="string">"slow"</span>);</span></span><br><span class="line"><span class="javascript">    $(<span class="string">"#div3"</span>).fadeToggle(<span class="number">3000</span>);</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>演示带有不同参数的 fadeToggle() 方法。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>点击这里，使三个矩形淡入淡出<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span> <span class="attr">style</span>=<span class="string">"width:80px;height:80px;background-color:red;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div2"</span> <span class="attr">style</span>=<span class="string">"width:80px;height:80px;background-color:green;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div3"</span> <span class="attr">style</span>=<span class="string">"width:80px;height:80px;background-color:blue;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="jQuery-fadeTo-方法"><a href="#jQuery-fadeTo-方法" class="headerlink" title="jQuery fadeTo() 方法"></a>jQuery fadeTo() 方法</h3><p>jQuery fadeTo() 方法允许渐变为给定的不透明度（值介于 0 与 1 之间）。</p><p><strong>语法：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).fadeTo(speed,opacity,callback);</span><br></pre></td></tr></table></figure><p>必需的 speed 参数规定效果的时长。它可以取以下值：”slow”、”fast” 或毫秒。</p><p>fadeTo() 方法中必需的 opacity 参数将淡入淡出效果设置为给定的不透明度（值介于 0 与 1 之间）。</p><p>可选的 callback 参数是该函数完成后所执行的函数名称。</p><p>举例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/jquery/jquery-1.11.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">  $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">"#div1"</span>).fadeTo(<span class="string">"slow"</span>,<span class="number">0.15</span>);</span></span><br><span class="line"><span class="javascript">    $(<span class="string">"#div2"</span>).fadeTo(<span class="string">"slow"</span>,<span class="number">0.4</span>);</span></span><br><span class="line"><span class="javascript">    $(<span class="string">"#div3"</span>).fadeTo(<span class="string">"slow"</span>,<span class="number">0.7</span>);</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>演示带有不同参数的 fadeTo() 方法。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>点击这里，使三个矩形淡出<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span> <span class="attr">style</span>=<span class="string">"width:80px;height:80px;background-color:red;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div2"</span> <span class="attr">style</span>=<span class="string">"width:80px;height:80px;background-color:green;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div3"</span> <span class="attr">style</span>=<span class="string">"width:80px;height:80px;background-color:blue;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="jQuery效果-滑动"><a href="#jQuery效果-滑动" class="headerlink" title="jQuery效果-滑动"></a>jQuery效果-滑动</h2><h3 id="jQuery-滑动方法"><a href="#jQuery-滑动方法" class="headerlink" title="jQuery 滑动方法"></a>jQuery 滑动方法</h3><p>通过 jQuery，可以在元素上创建滑动效果。</p><p>jQuery 拥有以下滑动方法：</p><ul><li>slideDown()</li><li>slideUp()</li><li>slideToggle()</li></ul><h3 id="jQuery-slideDown-方法"><a href="#jQuery-slideDown-方法" class="headerlink" title="jQuery slideDown() 方法"></a>jQuery slideDown() 方法</h3><p>jQuery slideDown() 方法用于向下滑动元素。</p><p><strong>语法：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).slideDown(speed,callback);</span><br></pre></td></tr></table></figure><p>可选的 speed 参数规定效果的时长。它可以取以下值：”slow”、”fast” 或毫秒。</p><p>可选的 callbackjQuery slideUp() 方法</p><p>jQuery slideUp() 方法用于向上滑动元素。</p><p><strong>语法：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).slideUp(speed,callback);</span><br></pre></td></tr></table></figure><p>可选的 speed 参数规定效果的时长。它可以取以下值：”slow”、”fast” 或毫秒。</p><p>可选的 callback 参数是滑动完成后所执行的函数名称。 参数是滑动完成后所执行的函数名称。</p><h3 id="jQuery-slideToggle-方法"><a href="#jQuery-slideToggle-方法" class="headerlink" title="jQuery slideToggle() 方法"></a>jQuery slideToggle() 方法</h3><p>jQuery slideToggle() 方法可以在 slideDown() 与 slideUp() 方法之间进行切换。</p><p>如果元素向下滑动，则 slideToggle() 可向上滑动它们。</p><p>如果元素向上滑动，则 slideToggle() 可向下滑动它们。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).slideToggle(speed,callback);</span><br></pre></td></tr></table></figure><p>可选的 speed 参数规定效果的时长。它可以取以下值：”slow”、”fast” 或毫秒。</p><p>可选的 callback 参数是滑动完成后所执行的函数名称。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/jquery/jquery-1.11.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"> </span></span><br><span class="line"><span class="javascript">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">$(<span class="string">".flip"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">".panel"</span>).slideToggle(<span class="string">"slow"</span>);</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"> </span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span><span class="selector-class">.panel</span>,<span class="selector-tag">p</span><span class="selector-class">.flip</span></span></span><br><span class="line"><span class="undefined">&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">margin</span><span class="selector-pseudo">:0px</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">padding</span><span class="selector-pseudo">:5px</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">text-align</span><span class="selector-pseudo">:center</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">background</span>:<span class="selector-id">#e5eecc</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">border</span><span class="selector-pseudo">:solid</span> 1<span class="selector-tag">px</span> <span class="selector-id">#c3c3c3</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span><span class="selector-class">.panel</span></span></span><br><span class="line"><span class="undefined">&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">height</span><span class="selector-pseudo">:120px</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">display</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>HELLO<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Welcome To jQuery<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"flip"</span>&gt;</span>请点击这里<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="jQuery-效果-动画"><a href="#jQuery-效果-动画" class="headerlink" title="jQuery 效果 - 动画"></a>jQuery 效果 - 动画</h2><h3 id="jQuery-动画-animate-方法"><a href="#jQuery-动画-animate-方法" class="headerlink" title="jQuery 动画 - animate() 方法"></a>jQuery 动画 - animate() 方法</h3><p>jQuery animate() 方法用于创建自定义动画。</p><p><strong>语法：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).animate(&#123;params&#125;,speed,callback);</span><br></pre></td></tr></table></figure><p>必需的 params 参数定义形成动画的 CSS 属性。</p><p>可选的 speed 参数规定效果的时长。它可以取以下值：”slow”、”fast” 或毫秒。</p><p>可选的 callback 参数是动画完成后所执行的函数名称。</p><p>默认地，所有 HTML 元素都有一个静态位置，且无法移动。</p><p>如需对位置进行操作，要记得首先把元素的 CSS position 属性设置为 relative、fixed 或 absolute！</p><h3 id="jQuery-animate-操作多个属性"><a href="#jQuery-animate-操作多个属性" class="headerlink" title="jQuery animate() - 操作多个属性"></a>jQuery animate() - 操作多个属性</h3><p>生成动画的过程中可同时使用多个属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"div"</span>).animate(&#123;</span><br><span class="line">    left:<span class="string">'250px'</span>,</span><br><span class="line">    opacity:<span class="string">'0.5'</span>,</span><br><span class="line">    height:<span class="string">'150px'</span>,</span><br><span class="line">    width:<span class="string">'150px'</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>几乎可以用animate() 方法来操作所有 CSS 属性，但当使用 animate() 时，<strong>必须使用 Camel 标记法(首字母小写，接下来的单词都以大写字母开头的方法)书写所有的属性名，</strong>比如，必须使用 paddingLeft 而不是 padding-left，使用 marginRight 而不是 margin-right，等等。</p><p>同时，色彩动画并不包含在核心 jQuery 库中。</p><p>如果需要生成颜色动画，需要从 <a href="https://jquery.com/" target="_blank" rel="noopener">jQuery.com</a> 下载 <a href="https://plugins.jquery.com/" target="_blank" rel="noopener">Color Animations</a> 插件。</p><h3 id="jQuery-animate-使用相对值"><a href="#jQuery-animate-使用相对值" class="headerlink" title="jQuery animate() - 使用相对值"></a>jQuery animate() - 使用相对值</h3><p>也可以定义相对值（该值相对于元素的当前值）。需要在值的前面加上 += 或 -=：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"div"</span>).animate(&#123;</span><br><span class="line">    left:<span class="string">'250px'</span>,</span><br><span class="line">    height:<span class="string">'+=150px'</span>,</span><br><span class="line">    width:<span class="string">'+=150px'</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="jQuery-animate-使用预定义的值"><a href="#jQuery-animate-使用预定义的值" class="headerlink" title="jQuery animate() - 使用预定义的值"></a>jQuery animate() - 使用预定义的值</h3><p>甚至可以把属性的动画值设置为 “show”、”hide” 或 “toggle”：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"div"</span>).animate(&#123;</span><br><span class="line">    height:<span class="string">'toggle'</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="jQuery-animate-使用队列功能"><a href="#jQuery-animate-使用队列功能" class="headerlink" title="jQuery animate() - 使用队列功能"></a>jQuery animate() - 使用队列功能</h3><p>编写多个 animate() 调用，jQuery 会创建包含这些方法调用的“内部”队列。然后逐一运行这些 animate 调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> div=$(<span class="string">"div"</span>);</span><br><span class="line">  div.animate(&#123;<span class="attr">height</span>:<span class="string">'300px'</span>,<span class="attr">opacity</span>:<span class="string">'0.4'</span>&#125;,<span class="string">"slow"</span>);</span><br><span class="line">  div.animate(&#123;<span class="attr">width</span>:<span class="string">'300px'</span>,<span class="attr">opacity</span>:<span class="string">'0.8'</span>&#125;,<span class="string">"slow"</span>);</span><br><span class="line">  div.animate(&#123;<span class="attr">height</span>:<span class="string">'100px'</span>,<span class="attr">opacity</span>:<span class="string">'0.4'</span>&#125;,<span class="string">"slow"</span>);</span><br><span class="line">  div.animate(&#123;<span class="attr">width</span>:<span class="string">'100px'</span>,<span class="attr">opacity</span>:<span class="string">'0.8'</span>&#125;,<span class="string">"slow"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> div=$(<span class="string">"div"</span>);</span><br><span class="line">  div.animate(&#123;<span class="attr">left</span>:<span class="string">'100px'</span>&#125;,<span class="string">"slow"</span>);</span><br><span class="line">  div.animate(&#123;<span class="attr">fontSize</span>:<span class="string">'3em'</span>&#125;,<span class="string">"slow"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h2 id="jQuery-停止动画"><a href="#jQuery-停止动画" class="headerlink" title="jQuery 停止动画"></a>jQuery 停止动画</h2><p>jQuery stop()方法在动画或效果完成前对它们进行停止。stop()方法适用于所用jQuery函数，包括滑动、淡入淡出和自定义动画。</p><p><strong>语法：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).stop(stopAll,goToEnd);</span><br></pre></td></tr></table></figure><p>stopAll参数规定是否清除动画队列，默认值是false；goToEnd参数规定是否立即完成当前的动画，默认是false。</p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery入口函数</title>
      <link href="/LiYpoi.github.io/2019/06/19/jQuery%E5%85%A5%E5%8F%A3%E5%87%BD%E6%95%B0/"/>
      <url>/LiYpoi.github.io/2019/06/19/jQuery%E5%85%A5%E5%8F%A3%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="一、jQuery与JavaScript加载模式对比"><a href="#一、jQuery与JavaScript加载模式对比" class="headerlink" title="一、jQuery与JavaScript加载模式对比"></a>一、jQuery与JavaScript加载模式对比</h3><ul><li>原生JS和jQuery入口函数加载模式不同</li></ul><ul><li>原生JS会等到DOM元素加载完毕，并且图片也加载完毕后才会执行</li><li>jQuery会等到DOM元素加载完毕，但不会等到图片也加载完毕就会执行</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//通过原生的JS入口函数可以拿到DOM元素</span></span><br><span class="line">            <span class="keyword">var</span> img = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"img"</span>)[<span class="number">0</span>];</span><br><span class="line">            <span class="built_in">console</span>.log(img);</span><br><span class="line">        &#125;</span><br><span class="line">        $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//通过jQuery的入口函数可以拿到DOM元素</span></span><br><span class="line">            <span class="keyword">var</span> $img = $(<span class="string">"img"</span>);</span><br><span class="line">            <span class="built_in">console</span>.log($img);</span><br><span class="line">        &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//2.通过原生的JS入口函数可以拿到DOM元素的宽高</span></span><br><span class="line">            <span class="keyword">var</span> width = <span class="built_in">window</span>.getComputedStyle(img).width;</span><br><span class="line">            onsole.log(<span class="string">"onload"</span>,width);</span><br><span class="line">        &#125;</span><br><span class="line">        $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//通过jQuery的入口函数不可以拿到DOM元素的宽高</span></span><br><span class="line">            <span class="keyword">var</span> $width = $img.width();</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"ready"</span>,$width);</span><br><span class="line">        &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><ul><li>原生的JS如果编写多个入口函数，后面编写的会覆盖前面编写的</li></ul><ul><li>jQuery中编写多个入口函数，后面编写的会覆盖前面编写的</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//后面的会覆盖前面的</span></span><br><span class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">"hello world1"</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">"hello world2"</span>);</span><br><span class="line">        &#125;;  </span><br><span class="line">    <span class="comment">//后面的不会覆盖前面的</span></span><br><span class="line">        $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">"hello wd1"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">"hello wd2"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="二、jQuery入口函数的其他写法"><a href="#二、jQuery入口函数的其他写法" class="headerlink" title="二、jQuery入口函数的其他写法"></a>二、jQuery入口函数的其他写法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="comment">//1.第一种写法</span></span><br><span class="line">        $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">"hello"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="comment">//2.第二种写法</span></span><br><span class="line">        jQuery(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">"hello"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="comment">//3.第三种写法（推荐）</span></span><br><span class="line">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">"hello"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="comment">//4.第四种写法</span></span><br><span class="line">        jQuery(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">"hello"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery教程</title>
      <link href="/LiYpoi.github.io/2019/06/18/01-jQuery-%E5%88%9D%E8%AF%86%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
      <url>/LiYpoi.github.io/2019/06/18/01-jQuery-%E5%88%9D%E8%AF%86%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一、jQuery简介"><a href="#一、jQuery简介" class="headerlink" title="一、jQuery简介"></a>一、jQuery简介</h2><h3 id="jQuery是什么？"><a href="#jQuery是什么？" class="headerlink" title="jQuery是什么？"></a>jQuery是什么？</h3><p>jQuery是一款优秀的JavaScript库，主要用途是来做查询(jQuery=js+Query),使用jQuery能让我们对HTML文档遍历和操作、事件处理、动画及Ajax变得简单。</p><h3 id="为什么使用jQuery？"><a href="#为什么使用jQuery？" class="headerlink" title="为什么使用jQuery？"></a>为什么使用jQuery？</h3><ul><li>强大的选择器：方便快速查找DOM元素</li><li>隐式遍历（迭代）：一次操作多个元素</li><li>事件处理</li><li>DOM操作（C增U改D删）</li><li>样式操作</li><li>动画</li><li>丰富的插件支持</li><li><strong>浏览器的兼容</strong></li><li>读写合一: 读数据/写数据使用是一个函数</li></ul><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原生js的固定写法</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">   <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/jQuery的固定写法</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">   $(document).ready(function()&#123;</span></span><br><span class="line"><span class="regexp">    </span></span><br><span class="line"><span class="regexp">&#125;) ;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="二、jQuery语法"><a href="#二、jQuery语法" class="headerlink" title="二、jQuery语法"></a>二、jQuery语法</h2><p>基础语法是：<em>$(selector).action()</em></p><ul><li>美元符号定义 jQuery</li><li>选择符（selector）“查询”和“查找” HTML 元素</li><li>jQuery 的 action() 执行对元素的操作</li></ul><p>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">this</span>).hide() <span class="comment">// 隐藏(action)当前元素(selector)</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">"p"</span>).hide() <span class="comment">// 隐藏所有段落</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">".test"</span>).hide() <span class="comment">// 隐藏所有 class="test" 的所有元素</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">"#test"</span>).hide() <span class="comment">// 隐藏所有 id="test" 的元素</span></span><br></pre></td></tr></table></figure><p>所有 jQuery 函数位于一个 document ready 函数中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这是为了防止文档在完全加载（就绪）之前运行 jQuery 代码。</p><p>jQuery 使用的语法是 XPath 与 CSS 选择器语法的组合。</p><hr><h2 id="三、jQuery选择器"><a href="#三、jQuery选择器" class="headerlink" title="三、jQuery选择器"></a>三、jQuery选择器</h2><p>jQuery 元素选择器和属性选择器允许您通过标签名、属性名或内容对 HTML 元素进行选择。选择器允许您对 HTML 元素组或单个元素进行操作。在 HTML DOM 术语中：选择器允许您对 DOM 元素组或单个 DOM 节点进行操作。</p><h3 id="jQuery元素选择器"><a href="#jQuery元素选择器" class="headerlink" title="jQuery元素选择器"></a>jQuery元素选择器</h3><p>jQuery 使用 CSS 选择器来选取 HTML 元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p"</span>) <span class="comment">//选取 &lt;p&gt; 元素。</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">"p.intro"</span>) <span class="comment">//选取所有 class="intro" 的 &lt;p&gt; 元素。</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">"p#demo"</span>) <span class="comment">//选取所有 id="demo" 的 &lt;p&gt; 元素。</span></span><br></pre></td></tr></table></figure><h3 id="jQuery属性选择器"><a href="#jQuery属性选择器" class="headerlink" title="jQuery属性选择器"></a>jQuery属性选择器</h3><p>jQuery 使用 <a href="https://baike.baidu.com/item/XPath/5574064?fr=aladdin" target="_blank" rel="noopener">XPath</a>表达式来选择带有给定属性的元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"[href]"</span>) <span class="comment">//选取所有带有 href 属性的元素。</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">"[href='#']"</span>) <span class="comment">//选取所有带有 href 值等于 "#" 的元素。</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">"[href!='#']"</span>) <span class="comment">//选取所有带有 href 值不等于 "#" 的元素。</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">"[href$='.jpg']"</span>) <span class="comment">//选取所有 href 值以 ".jpg" 结尾的元素。</span></span><br></pre></td></tr></table></figure><h3 id="jQuery-CSS-选择器"><a href="#jQuery-CSS-选择器" class="headerlink" title="jQuery CSS 选择器"></a>jQuery CSS 选择器</h3><p>jQuery CSS 选择器可用于改变 HTML 元素的 CSS 属性。下面的例子把所有 p 元素的背景颜色更改为红色：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p"</span>).css(<span class="string">"background-color"</span>,<span class="string">"red"</span>);</span><br></pre></td></tr></table></figure><p><strong>更多jQuery选择器参见<a href="http://www.w3school.com.cn/jquery/jquery_ref_selectors.asp" target="_blank" rel="noopener">jQuery参考手册</a></strong></p><hr><h2 id="三、jQuery事件"><a href="#三、jQuery事件" class="headerlink" title="三、jQuery事件"></a>三、jQuery事件</h2><h3 id="jQuery事件函数"><a href="#jQuery事件函数" class="headerlink" title="jQuery事件函数"></a>jQuery事件函数</h3><p>jQuery 事件处理方法是 jQuery 中的核心函数。</p><p>事件处理程序指的是<strong>当 HTML 中发生某些事件时所调用的方法</strong>。术语由事件“触发”（或“激发”）经常会被使用。</p><p>通常会把 jQuery 代码放到 <head><meta name="generator" content="Hexo 3.8.0">部分的事件处理方法中：</head></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"jquery.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"p"</span>).hide();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;This is a heading&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">&lt;p&gt;This is a paragraph.&lt;/</span>p&gt;</span><br><span class="line">&lt;p&gt;This is another paragraph.&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;button&gt;Click me&lt;/</span>button&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><p>在上面的例子中，当按钮的点击事件被触发时会调用一个函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;..some code... &#125; )<span class="comment">//发生点击按钮这一事件</span></span><br></pre></td></tr></table></figure><p>该方法隐藏所有 </p><p> 元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p"</span>).hide();<span class="comment">//调用隐藏&lt;p&gt;标签的方法</span></span><br></pre></td></tr></table></figure><h3 id="单独文件中的函数"><a href="#单独文件中的函数" class="headerlink" title="单独文件中的函数"></a>单独文件中的函数</h3><p>当网站包含许多页面时，为了jQuery函数易于维护，可以将jQuery函数放到独立的.js文件中，使用时用src属性来引用文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;jquery.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;my_jquery_functions.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure><h3 id="jQuery名称冲突"><a href="#jQuery名称冲突" class="headerlink" title="jQuery名称冲突"></a>jQuery名称冲突</h3><p>jQUery使用<code>$</code>符号作为jQuery的简介方式，但因为js库中的函数（Prototype函数）同样使用$符号，为解决冲突问题，jQuery 使用名为 noConflict() 的方法来解决该问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jq=jQuery.noConflict()<span class="comment">//使用自己的名称（比如 jq）来代替 $ 符号。</span></span><br></pre></td></tr></table></figure><p>由于 jQuery 是为处理 HTML 事件而特别设计的，那么当您遵循以下原则时，您的代码会更恰当且更易维护：</p><ul><li>把所有 jQuery 代码置于事件处理函数中</li><li>把所有事件处理函数置于文档就绪事件处理器中</li><li>把 jQuery 代码置于单独的 .js 文件中</li><li>如果存在名称冲突，则重命名 jQuery 库</li></ul><p>下面是 jQuery 中事件方法的一些例子：</p><table><thead><tr><th style="text-align:left">Event 函数</th><th style="text-align:center">绑定函数至</th></tr></thead><tbody><tr><td style="text-align:left">$(document).ready(function)</td><td style="text-align:center">将函数绑定到文档的就绪事件（当文档完成加载时）</td></tr><tr><td style="text-align:left">$(selector).click(function)</td><td style="text-align:center">触发或将函数绑定到被选元素的点击事件</td></tr><tr><td style="text-align:left">$(selector).dblclick(function)</td><td style="text-align:center">触发或将函数绑定到被选元素的双击事件</td></tr><tr><td style="text-align:left">$(selector).focus(function)</td><td style="text-align:center">触发或将函数绑定到被选元素的获得焦点事件</td></tr><tr><td style="text-align:left">$(selector).mouseover(function)</td><td style="text-align:center">触发或将函数绑定到被选元素的鼠标悬停事件</td></tr></tbody></table><p><strong>更多jQuery事件参见<a href="http://www.w3school.com.cn/jquery/jquery_ref_events.asp" target="_blank" rel="noopener">jQuery事件参考手册</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔</title>
      <link href="/LiYpoi.github.io/2019/06/15/%E9%9A%8F%E7%AC%94-5/"/>
      <url>/LiYpoi.github.io/2019/06/15/%E9%9A%8F%E7%AC%94-5/</url>
      
        <content type="html"><![CDATA[<p>博客是个无底洞，就像打游戏一样，升到50级时，还想升60级。看到别人的博客后总想往自己的博客上加东西，以后应该不会再有什么改动了，简单点就好。</p>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建站历史</title>
      <link href="/LiYpoi.github.io/2019/06/15/%E5%BB%BA%E7%AB%99%E5%8E%86%E5%8F%B2-4/"/>
      <url>/LiYpoi.github.io/2019/06/15/%E5%BB%BA%E7%AB%99%E5%8E%86%E5%8F%B2-4/</url>
      
        <content type="html"><![CDATA[<ul><li>添加网页静态资源压缩</li><li>去除动态背景</li></ul>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 建站历史 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建站历史</title>
      <link href="/LiYpoi.github.io/2019/06/13/%E5%BB%BA%E7%AB%99%E5%8E%86%E5%8F%B2-3/"/>
      <url>/LiYpoi.github.io/2019/06/13/%E5%BB%BA%E7%AB%99%E5%8E%86%E5%8F%B2-3/</url>
      
        <content type="html"><![CDATA[<ul><li>添加站点图标</li><li>去除图片边框</li><li>修改文章内链接文本样式</li><li>修改<code></code>代码块自定义样式</li><li>自定义鼠标样式</li></ul>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 建站历史 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书笔记—《设计中的设计》</title>
      <link href="/LiYpoi.github.io/2019/06/09/%E8%AF%BB%E3%80%8A%E8%AE%BE%E8%AE%A1%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E3%80%8B%E7%9A%84%E9%9A%8F%E7%AC%94/"/>
      <url>/LiYpoi.github.io/2019/06/09/%E8%AF%BB%E3%80%8A%E8%AE%BE%E8%AE%A1%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E3%80%8B%E7%9A%84%E9%9A%8F%E7%AC%94/</url>
      
        <content type="html"><![CDATA[<p>我个人并不是对某类书有喜恶，所以各种书多少都会看一些，前几天买了本《设计中的设计》，作者原研哉是著名的无印良品的设计委员，他可以算的上是带领无印良品走向变革及成功路的领路人了。今天仔细读了第一章的内容。</p><p>第一章作者对设计本身进行了再说明，从一百五十多年前设计的产生，到十九世纪后，随着工业革命的发展，人们对工业生产出来的日用品的审美要求日益增高，随后到美国经济、政治对设计概念的影响，包豪斯学院派的设计大师们对不同流派设计概念，这些都为现代的设计理念构筑了坚实的基础。</p><p>欧洲的设计风格在展现各自独创性的同时，保留了一丝手工生产的气息，对资深工匠的手工制作保持崇尚一直存在于欧洲制造业的传统中。</p><p>设计在“品牌”的塑造中发挥了重要的作用，二十世纪后半叶，设计的主要动力来源是经济，经济发展越快，人们越热衷追求最新的信息和产品，对设计也越发期待。如果设计只停留在“让今天的东西在明日变旧”，那它无非遵循技术本身的形式。</p><p>设计在制造方面承担着思想指导的作用，并不是仅仅只有制造出新奇的东西才算是制造，把熟悉的东西当成未知的领域再度开发也同样具有创造性。设计是从生活中发现新问题的行为，生活所走的方向，就是技术与设计的未来。</p><p>第二章是关于原研哉的“RE-DESIGN二十一世纪日常用品再设计”展的一些内容介绍，这个展从日常生活的角度入手，回归现代主义。</p><p>所谓设计，就是将人类生活或生存的意义，通过制作的过程予以解释。设计没有自我表象的动机，其落脚点更侧重于社会，解决社会上多数人共同面临的问题，是设计的本质。</p><p>“RE-DESIGN”展中，原研哉收集了三十二位来自日本的设计者针对日常用品的重新设计的提案。</p><p><strong>坂茂与卫生纸</strong></p><p>坂茂以“纸管”建筑闻名世界，纸管有着惊人的强度与耐久度，而且成本低廉易于回收。阪神大地震的时候曾用纸管搭建过临时住宅，德国汉诺威世博会上也展出过日本馆，也是用纸管做的。</p><p>坂茂再设计的卫生纸中间的芯是四角形的，卫生纸以四角形的方式卷上去，其设计的用心之处在于它造成的不便，四角形的卫生纸卷筒会产生阻力，抽取时会发出“咔嗒-咔嗒”的声响，这种阻力发出的信息和实现的功能便是节约能源。而且四角形的卫生纸，在搬运和收藏时会节约空间。</p><hr><p><strong>坂茂</strong></p><p>日本著名建筑师，1957年出生于日本东京，1977年至1980年就读于南加州建筑学院，1980年至1982年就读于库柏联盟建筑学院，1982年至1983年在东京为著名建筑师<a href="https://baike.baidu.com/item/矶崎新" target="_blank" rel="noopener">矶崎新</a>工作室工作，1984年获库柏联盟建筑学院建筑学士学位，1985年在东京建立私人企业，1995年任联合国难民署高级专员顾问，1995年至1999年任<a href="https://baike.baidu.com/item/横滨国立大学/4516109" target="_blank" rel="noopener">横滨国立大学</a>建筑学助理教授，1996年至2000年任日本文化唐纳·基尼中心助理会员2000年任<a href="https://baike.baidu.com/item/哥伦比亚大学/513683" target="_blank" rel="noopener">哥伦比亚大学</a>访问教授 。2011年任<a href="https://baike.baidu.com/item/京都造形艺术大学" target="_blank" rel="noopener">京都造形艺术大学</a>艺术学部环境设计学科教授。<br>在建筑界，坂茂也以敢大胆使用最廉价、最脆弱的材料而闻名。2006年，他用中国竹编帽子设计的法国蓬皮杜中心新馆，从其他153名竞争对手中脱颖而出；日本神户大地震时，他仅用一天时间，为失去家园的灾民盖起了一座纸筒教堂；他还提出用传真纸筒芯代替钢筋水泥的想法，他特别强调对尖端材料和技术的运用，有充分的好奇心和执着，创新永无止境。</p><p><strong>佐藤雅彦与出入境章</strong></p><p>佐藤雅彦是一位资深广告导演，他经常研究“沟通的根本”这一问题，并在创作实践中对其发出挑战。他设计的出境印章，是向左飞的飞机，入境印章是向右飞的飞机，印章的设计理念中包含了“感动的萌芽”，这是一种非常可行的互相沟通的方法。</p><p><strong>隈研吾与捕蟑盒</strong></p><p>建筑家隈研吾的建筑观是“建筑师不能以建筑的名义向世界展示过度华丽的造型”，他提倡“建筑的消失”，将建筑与周围环境融为一体。隈研吾把捕蟑盒设计成半透明的管状黏胶布，像是一个四面都有强力胶的隧道。在使用时，把脚步拉出适当长度后剪切，把剪下来的脚步折成四边形的管状，在两端的连接部分也有胶，使用时可以随意把捕蟑盒粘到墙面。这个设计否定了传统的样式，并又符合极简的理念。</p><p><strong>面出薰与火柴</strong></p><p>面出薰成立的“照明侦探组”，主要研究城市的晚间照明。他所设计的火柴，是将地上散落的小树枝收集起来，在小树枝的尖端涂上发火剂做成的，这样的设计也许能唤醒人们对自然、火、人以及世界万物的印象。</p>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>现代精神鸦片</title>
      <link href="/LiYpoi.github.io/2019/06/08/%E2%80%9C%E7%8E%B0%E4%BB%A3%E7%B2%BE%E7%A5%9E%E9%B8%A6%E7%89%87/"/>
      <url>/LiYpoi.github.io/2019/06/08/%E2%80%9C%E7%8E%B0%E4%BB%A3%E7%B2%BE%E7%A5%9E%E9%B8%A6%E7%89%87/</url>
      
        <content type="html"><![CDATA[<p>自12839年林则徐虎门硝烟后，那时的清朝，对鸦片的打击力度迎来高峰。时隔百十来年，中国又陷入了“鸦片之中”，现代的精神鸦片靠谁来硝？</p><p><strong>焦虑时代</strong></p><p>如今年轻人每天刷着抖音、微博、知乎、贴吧等等app，根本停不下来。这些东西本质上有一个特点，就是在无形之中贩卖着焦虑。凡是能看到的，能够吸引关注的，引发大范围社会讨论的，包括民生热点、医疗事故、学校教育、明星娱乐等一系列的，全都在制造焦虑。</p><p>仿佛你的国家各行各行都不安全，国家的任何政策举动自己都能看明白有什么含义。仿佛生活的社会，再不努力就被淘汰了，每天都必须提高自己，不然就落后他人了。仿佛自己的学历不是985、211就不是个人了。仿佛每个女生都要活得精致完美，水果要吃、电影要看、明星要追、微博要发，每天自己都活得精致美美哒。男生？要不打游戏、要努力上进、要说话温和、要有绅士风度、当然，最主要的是帅啊。</p><p>各种各样的软文，各种各样的短视频、各种各样的广告，一次一次的告诉你美好的生活是什么样的，逐渐你就被套在这个圈子里。这个圈子每天给你讲故事，让你感同身受，你看完后一拍大腿，这不是说我吗？“我也有这样的家长”、“我也有这样的同学”、“我也有这样的男/女友”。共鸣产生了，焦虑加重了，于是在这个圈子里越陷越深。</p><p>至于网络平台？为了流量、日活，它们更要把这种焦虑给你放大了。把这些事给你放到热榜上、推荐上，你们尽情的吵啊，尽情的撕啊，用户越多我越开心。</p><p>有些人从这些中看到了商机，大的以咪蒙为代表的一系列田园女权，小的微博上各种大V。Ta们对女生说，现在的男生活得自私，不懂的关心女生，女生的择偶标准应该是什么什么样的，女生活得太不容易了，要爱自己，过精致的生活。Ta们转身又对男生说，现在的女生多么物质，她们索取无度，要车要房还要帅。最后博取认同感后，趁机让你关注一波公众号，说帮你掌握两性心理学，教你过精致生活，然后再出个什么课程，完成一波用户收割。</p><p><strong>知识付费</strong></p><p>第一次接触这个概念应该是在知乎上，具体在哪已经记不清了，它说当代社会，想学到知识要花钱的，这点我同意。学习什么都要成本，这没问题。但在这种概念下，就出现了一堆所谓的知识专栏，典型的就是知乎的Live了。“考研逆袭”、“高考前三个月逆袭”、“二本考入985”，这些Live是最受欢迎的。还有什么“如何学PS”、“如何学摄影”、“如何学日语”、“如何学英语”，这些问题下面都会有各种大V，先是给你一堆简单的入门教程，让你看个大概，结尾留个公众号，让你关注。成功引流，在公众号上每天给你发一些相关的小技巧，小知识，偶尔发些学了这个技能的人成功的案例，他们自从学了这些东西后，为人生路带来了各种各样的便利。</p><p>这些东西的知识壁垒有那么高吗？有必要花钱买个几十分钟的课程吗？</p><p><strong>上下层闭环</strong></p><p>以上说的两点正好完美的构成了一个闭环，上层负责制造焦虑，中层负责贩卖焦虑，整个互联网平台负责提供大的环境，你在这个闭环中不停的被动循环。</p><p>现代的精神鸦片就无形地存在于网络环境中，你要么选择吸一口，要么选择跟着大环境一起卖它，要么自己走出另外一条路，你怎么选呢？</p>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔</title>
      <link href="/LiYpoi.github.io/2019/06/06/%E9%9A%8F%E7%AC%94-4/"/>
      <url>/LiYpoi.github.io/2019/06/06/%E9%9A%8F%E7%AC%94-4/</url>
      
        <content type="html"><![CDATA[<p>今天</p><p>刷了《非自然死亡》</p><p>不错</p>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建站历史</title>
      <link href="/LiYpoi.github.io/2019/06/04/%E5%BB%BA%E7%AB%99%E5%8E%86%E5%8F%B2/"/>
      <url>/LiYpoi.github.io/2019/06/04/%E5%BB%BA%E7%AB%99%E5%8E%86%E5%8F%B2/</url>
      
        <content type="html"><![CDATA[<ul><li>添加了基于LeanCloud的Valine评论功能</li><li>添加了全站文章字数统计功能。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 建站历史 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于时间的利用</title>
      <link href="/LiYpoi.github.io/2019/06/03/%E5%85%B3%E4%BA%8E%E5%88%A9%E7%94%A8%E6%97%B6%E9%97%B4%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%82%9F/"/>
      <url>/LiYpoi.github.io/2019/06/03/%E5%85%B3%E4%BA%8E%E5%88%A9%E7%94%A8%E6%97%B6%E9%97%B4%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%82%9F/</url>
      
        <content type="html"><![CDATA[<p><em>童年时，我在经济上最大的误解是：人们通过高昂的薪水来致富。</em></p><p><em>这是错的：你变得富有，是因为你用有某种能够快速增值的东西。</em></p><p><em>它可能是商业、房地产、自然资源、知识产权，或其他什么东西–无论如何，你需要拥有它的权益，而非单靠出卖你的时间。</em></p><p>​                                                                                                                                   <em>—Same Altman</em></p><p>在成长中，我们被一直教导做一个努力的人，努力学习，进一个好学校，然后有一份好工作，努力工作。而其中<code>努力</code>一词被许多人误解为在某件事上花费大量时间，人们好像都热衷于做一些花费时间却又不怎么需要动脑的事，有时候比起思考，机械式的完成更让人舒适。</p><p>但你的<code>时间</code>真正的价值体现在哪里？时间的价值体现在你在这段时间中所做的事，它意味着成长、积累等等，它有着无限的可能性。将这份可能性只用于机械性的工作似乎是很不划算的，那么如何这份时间利用起来就是下面要说的了。</p><p><strong>尽量不做短期的事</strong></p><p>我们其实都知道，短期的事情给予的反馈一般微乎其微，长期经营才会有所回报。比如在英语学习上，我们明明知道这是一项需要长期积累长期学习才可以掌握的技能，却总是想着“三十天掌握XXX”的这种课程，我们感性中总是容易短视，总是把目光放在当前的任务上。</p><p>在心理学上，这种现象称为“时间贴现”。</p><p>用自己举例，以前我想着要好好背英语单词，于是制定了一个计划：每天背30个单词，执行了十几天后，计划失败了。失败的原因在于每天的作业量都不同，有时作业多，加上有一些计划之外的事发生，背单词这件事就被延期了，这种情况发生了几次后，于是计划也破产了。</p><p>这也是拖延症的前期症状，如何解决？</p><p>我觉得想要将一件事长期经营下来，并不是要强迫自己去完成它，而是要有去完成它的“趋势”。</p><p>什么是完成的“趋势”？我个人认为，完成的“趋势”是在主动的状态下要去做这件事。用我写博客这件事举个例子。我基本上每天都会写，它花费不了多长时间，我也不必要每次写多少实用的内容，哪怕每天只写一些个人的感悟随笔，我依然将这件事坚持了下去。</p><p>那么偶尔出现一些突发状况，该如何应对呢？</p><p><strong>搭建一个自运转的系统</strong></p><p>在遇到一个突发问题时，先不着急着手去解决，先去思考：这种问题会不会再次出现？</p><p>我们可以设计一套流程去解决相应问题，或者优化环节、减少步骤，来避免它再次出现。</p><p>比起遇到一件事就去解决一件事，这是一种更长期的视角，也更行之有效。</p><p><strong>延伸自己与世界的接触</strong></p><p>或者说拓宽自己的知识网络，在这个时代，比起专精一个领域，多方面的涉猎更为重要。当你接触的知识节点越多，你就越能把它们连接起来，构成一张网。成功的人有一个共同的特点：保持敏锐。</p><p>对一切新事物保持好奇心，不断去思考：它会带来什么？它意味着什么？它与我之间有什么关系？绝大多数的机会，都是从各种各样的“可能性”中孕育而生的。</p><p>所以为什么要倡导“终生学习”？其实重点不在于知识本身，而是通过学习，不断更新自己的知识触点，扩展自己的知识网络，保持对新事物的好奇心。</p>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用CSS实现图片轮播</title>
      <link href="/LiYpoi.github.io/2019/06/02/%E7%94%A8CSS%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E8%BD%AE%E6%92%AD/"/>
      <url>/LiYpoi.github.io/2019/06/02/%E7%94%A8CSS%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E8%BD%AE%E6%92%AD/</url>
      
        <content type="html"><![CDATA[<p>在之前的多媒体作业中为了使banner区的图片不呆板，用CSS实现的对图片的轮播效果，虽然用JS也可以实现，但这对<code>margin</code>的作用也算是一种新的了解。</p><p><strong>效果</strong></p><p><img src="https://i.loli.net/2019/06/02/5cf3c6903235c24426.gif" alt="xiaoguo"></p><p><strong>CSS部分</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#container</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">            <span class="attribute">overflow</span>: hidden;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-id">#photo</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">2400px</span>;</span><br><span class="line">            <span class="attribute">animation</span>: switch <span class="number">10s</span> ease-out infinite;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-id">#photo</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">            <span class="attribute">float</span>: left;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @<span class="keyword">keyframes</span> switch &#123;</span><br><span class="line">            0%,25%&#123;</span><br><span class="line">                <span class="attribute">margin-left</span>: <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          35%,60% &#123;</span><br><span class="line">                <span class="attribute">margin-left</span>: -<span class="number">800px</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            70%,100%&#123;</span><br><span class="line">                <span class="attribute">margin-left</span>: -<span class="number">1600px</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><strong>HTML部分</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"photo"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"imageli/banner1.png"</span> <span class="attr">alt</span>=<span class="string">"樱花节"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"imageli/banner2.png"</span> <span class="attr">alt</span>=<span class="string">"樱花节"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"imageli/banner3.png"</span> <span class="attr">alt</span>=<span class="string">"樱花节"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实现的关键在于<code>@keyframes</code>定义关键帧中<code>margin-left</code>,可以看出来，第二个和第三个<code>margin-left</code>的值为负，在网页的世界中，默认的文档流是水平方向的，当<code>margin-left</code>的值为负时，会使对应的标签向左缩进，从代码中可以看出，图片从0px开始变换了三次到1600px,每一次减少800px，而所加的三张图片的<code>width</code>都为800px,所以图片向左缩进，最终实现了轮播的效果。</p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5之Canvas动画制作架构</title>
      <link href="/LiYpoi.github.io/2019/06/01/HTML5%E4%B9%8BCanvas%E5%8A%A8%E7%94%BB%E5%88%B6%E4%BD%9C%E6%9E%B6%E6%9E%84/"/>
      <url>/LiYpoi.github.io/2019/06/01/HTML5%E4%B9%8BCanvas%E5%8A%A8%E7%94%BB%E5%88%B6%E4%BD%9C%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>Animation</p><p>使用<code>setlnterval</code>架构逐帧动画</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">setlnterval(</span><br><span class="line">function()&#123;      //匿名函数表示在每一帧的时候做什么事情</span><br><span class="line">render();    //绘制当前画面</span><br><span class="line">update();    //根据画面所需的数据结构，对数据结构进行调整</span><br><span class="line">&#125;,</span><br><span class="line">50              //传入时间，单位毫秒，控制动画帧率，表示每隔多长时间执行一次匿名函数</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Canvas画弧线和圆</title>
      <link href="/LiYpoi.github.io/2019/05/30/Canvas%E7%94%BB%E5%BC%A7%E7%BA%BF%E5%92%8C%E5%9C%86/"/>
      <url>/LiYpoi.github.io/2019/05/30/Canvas%E7%94%BB%E5%BC%A7%E7%BA%BF%E5%92%8C%E5%9C%86/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line">        <span class="keyword">var</span> context = canvas.getContext(<span class="string">"2d"</span>) </span><br><span class="line">        context.lineWidth =<span class="number">5</span></span><br><span class="line">        context.strokeStyle = <span class="string">"#005588"</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="number">10</span>  ; i ++)&#123;</span><br><span class="line">            </span><br><span class="line">            context.beginPath()</span><br><span class="line">            context.arc(<span class="number">50</span> + i*<span class="number">100</span>,<span class="number">60</span>,<span class="number">40</span>,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI*(i+<span class="number">1</span>)/<span class="number">10</span>) </span><br><span class="line">            <span class="comment">//第六个参数描述绘图的顺序，默认false逆时针，true顺时针</span></span><br><span class="line">            context.closePath()</span><br><span class="line">            <span class="comment">// 当绘制的图形不是封闭的时，closePath（）会自动将图形的首位连接起来</span></span><br><span class="line">            context.stroke()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="number">10</span>  ; i ++)&#123;</span><br><span class="line">            context.beginPath()</span><br><span class="line">            context.arc(<span class="number">50</span> + i*<span class="number">100</span>,<span class="number">180</span>,<span class="number">40</span>,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI*(i+<span class="number">1</span>)/<span class="number">10</span>)</span><br><span class="line">            <span class="comment">//context.closePath()/* 当绘制的图形不是封闭的时，closePath（）会自动将图形的首尾连接起来*/</span></span><br><span class="line">            context.stroke()<span class="comment">/* 此时图形的首尾不相连*/</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/05/30/5cef9dd95a86e53188.png" alt="2"></p><p>Canvas画圆的参数</p><p><img src="https://i.loli.net/2019/05/30/5cef9e567e93454885.png" alt="4"></p><p><img src="https://i.loli.net/2019/05/30/5cef9dfc7b1f613603.png" alt="5"></p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建Canvas以及画条线</title>
      <link href="/LiYpoi.github.io/2019/05/30/%E5%88%9B%E5%BB%BACanvas%E4%BB%A5%E5%8F%8A%E7%94%BB%E6%9D%A1%E7%BA%BF/"/>
      <url>/LiYpoi.github.io/2019/05/30/%E5%88%9B%E5%BB%BACanvas%E4%BB%A5%E5%8F%8A%E7%94%BB%E6%9D%A1%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="Canvas的历史"><a href="#Canvas的历史" class="headerlink" title="Canvas的历史"></a>Canvas的历史</h2><p>这个 HTML 元素是为了客户端矢量图形而设计的。它自己没有行为，但却把一个绘图 API 展现给客户端 JavaScript 以使脚本能够把想绘制的东西都绘制到一块画布上。要从同一图形的一个 canvas标记中移除元素，往往需要擦掉绘图重新绘制它，大多数 Canvas 绘图 API 都没有定义在 canvas元素本身上，而是定义在通过画布的 <a href="http://www.w3school.com.cn/jsref/met_canvas_getcontext.asp" target="_blank" rel="noopener">getContext() 方法</a>获得的一个“绘图环境”对象上。Canvas API 也使用了路径的表示法。但是，路径由一系列的方法调用来定义，而不是描述为字母和数字的字符串，比如调用 beginPath() 和 arc() 方法。一旦定义了路径，其他的方法，如 fill()，都是对此路径操作。绘图环境的各种属性，比如 fillStyle，说明了这些操作如何使用。</p><p><strong>注释：</strong>Canvas API 非常紧凑的一个原因上它没有对绘制文本提供任何支持。要把文本加入到一个 canvas图形，必须要么自己绘制它再用位图图像合并它，或者在canvas上方使用 CSS 定位来覆盖 HTML 文本。<strong>Canvas中的绘图使一种状态绘图，首先要进行状态设置，然后调用函数绘制，画布的设置中，以左上角为圆点，向右为X轴正方向。向下为Y轴正方向，canvas的绘制是基于状态的。</strong></p><hr><h2 id="写法"><a href="#写法" class="headerlink" title="写法"></a>写法</h2><p>Canvas</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HTML</span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Javascript</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cnavas=<span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> context=canvas.getContext(<span class="string">'2d'</span>)<span class="comment">//获得绘图环境,context提供了绘图的接口</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用canvas进行绘制</span></span><br></pre></td></tr></table></figure><h2 id="画一条线"><a href="#画一条线" class="headerlink" title="画一条线"></a>画一条线</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">context.beginPath()</span><br><span class="line">        context.moveTo(100,100) /*线的起点*/</span><br><span class="line">        context.lineTo(700,700)/*线的终点*/</span><br><span class="line">        context.lineTo(100,700)</span><br><span class="line">        context.lineTo(100,100)</span><br><span class="line">        context.closePath()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        context.lineWidth=5 /*线条宽度*/</span><br><span class="line">        context.strokeStyle="#66ccff"/*线条样式，主要是指线条的颜色*/</span><br><span class="line">        context.stroke()   /*stroke是笔画的意思，在Canvas中用来画线条*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        context.fillStyle="rgb(2,100,30)"/* 对多边形进行颜色填充*/</span><br><span class="line">        context.fill()</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/05/30/5cef9b1fb5ebd44215.png" alt="1"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用context.beginPath()和context.closePath()使两个路径分开,beginPath（）和closePath（）不一定要同时出现，beginPath（）代表规划一个路径，closePath（）表四结束当前的路径，如果当前的路径没有封闭上，就会让当前的路径封闭上。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔</title>
      <link href="/LiYpoi.github.io/2019/05/29/%E9%9A%8F%E7%AC%94-3/"/>
      <url>/LiYpoi.github.io/2019/05/29/%E9%9A%8F%E7%AC%94-3/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git标签</title>
      <link href="/LiYpoi.github.io/2019/05/28/Git%E6%A0%87%E7%AD%BE/"/>
      <url>/LiYpoi.github.io/2019/05/28/Git%E6%A0%87%E7%AD%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="Git标签"><a href="#Git标签" class="headerlink" title="Git标签"></a>Git标签</h2><p>我们可以用 git tag -a v1.0 命令给最新一次提交打上（HEAD）”v1.0”的标签。</p><p>-a 选项意为”创建一个带注解的标签”。 不用 -a 选项也可以执行的，但它不会记录这标签是啥时候打的，谁打的，也不会让你添加个标签的注解。 我推荐一直创建带注解的标签。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -a v1.0</span><br></pre></td></tr></table></figure><p>当你执行 git tag -a 命令时，Git 会打开你的编辑器，让你写一句标签注解，就像你给提交写注解一样。</p><p>现在，注意当我们执行 git log –decorate 时，我们可以看到我们的标签了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git log --oneline --decorate --graph</span><br><span class="line">*   88afe0e (HEAD, tag: v1.0, master) Merge branch &apos;change_site&apos;</span><br></pre></td></tr></table></figure><p>如果我们要查看所有标签可以使用以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git tag</span><br><span class="line">v0.9</span><br><span class="line">v1.0</span><br></pre></td></tr></table></figure><p>指定标签信息命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -a &lt;tagname&gt; -m &quot;标签&quot;</span><br></pre></td></tr></table></figure><p>PGP签名标签命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -s &lt;tagname&gt; -m &quot;标签&quot;</span><br></pre></td></tr></table></figure><p>如果我们忘了给某个提交打标签，又将它发布了，我们可以给它追加标签。例如，假设我们发布了提交 85fc7e7，但是那时候忘了给它打标签。 我们现在也可以：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -a v0.9 85fc7e7</span><br></pre></td></tr></table></figure><hr><p><strong>更多有关Git的操作见<a href="https://www.w3cschool.cn/git/?" target="_blank" rel="noopener">git手册</a>。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分支管理</title>
      <link href="/LiYpoi.github.io/2019/05/28/%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/"/>
      <url>/LiYpoi.github.io/2019/05/28/%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><h4 id="列出分支"><a href="#列出分支" class="headerlink" title="列出分支"></a>列出分支</h4><p>列出分支基本命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><p>没有参数时，git branch 会列出你在本地的分支。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* master</span><br></pre></td></tr></table></figure><p>此例的意思就是，我们有一个叫做”master”的分支，并且该分支是当前分支。</p><p>当你执行 git init 的时候，缺省情况下 Git 就会为你创建”master”分支。</p><p>如果我们要手动创建一个分支，并切换过去。执行 git branch (branchname) 即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git branch testing</span><br><span class="line">$ git branch</span><br><span class="line">* master</span><br><span class="line">  testing</span><br></pre></td></tr></table></figure><p>现在我们可以看到，有了一个新分支 testing。</p><h4 id="合并冲突"><a href="#合并冲突" class="headerlink" title="合并冲突"></a>合并冲突</h4><p>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。</p><p>解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。</p><p>用<code>git log --graph</code>命令可以看到分支合并图。</p><p>合并分支时，加上<code>--no-ff</code>参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而<code>fast forward</code>合并就看不出来曾经做过合并。</p><h4 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h4><p>使用<code>git log</code>查看提交历史</p><p><img src="https://i.loli.net/2019/05/28/5cecfbe67adcd44419.png" alt="tijiao"></p><p>可以用<code>git log --oneline</code>选项来查看历史记录的简洁的版本。</p><p>我们还可以用<code>git log --oneline --graph</code>选项，查看历史中什么时候出现了分支，合并。</p><p>也可以用’–reverse’参数来逆向显示所有日志。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log --reverse --oneline</span><br></pre></td></tr></table></figure><p>如果只想查找指定用户的提交日志可以使用命令：git log –author，例如，比方说要找Git源码中Linus提交的部分：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log --author = Linus</span><br></pre></td></tr></table></figure><p>如果你要指定日期，可以执行几个选项： - 因为和–before，但是你也可以用–until和–after。</p><p>例如，如果我要看Git项目中三周前且在四月十八日之后的所有提交，我可以执行这个（我还用了–no-merges选项以隐藏合并提交）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log --oneline --before = &#123;3.weeks.ago&#125; --after = &#123;2010-04-18&#125; --no-merges</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建分支与合并分支</title>
      <link href="/LiYpoi.github.io/2019/05/27/%E5%88%9B%E5%BB%BA%E5%88%86%E6%94%AF%E4%B8%8E%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF/"/>
      <url>/LiYpoi.github.io/2019/05/27/%E5%88%9B%E5%BB%BA%E5%88%86%E6%94%AF%E4%B8%8E%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF/</url>
      
        <content type="html"><![CDATA[<p>查看分支：<code>git branch</code></p><p>创建分支：<code>git branch &lt;name&gt;</code></p><p>切换分支：<code>git checkout &lt;name&gt;</code></p><p>创建+切换分支：<code>git checkout -b &lt;name&gt;</code></p><p>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></p><p>删除分支：<code>git branch -d &lt;name&gt;</code></p><hr><p>创建一个text的分支,并且切换到text分支：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b text</span><br><span class="line">Switched to a new branch &apos;text&apos;</span><br></pre></td></tr></table></figure><p>然后，用<code>git branch</code>命令查看当前分支：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* text</span><br><span class="line">  master</span><br></pre></td></tr></table></figure><p><code>git branch</code>命令会列出所有分支，当前分支前面会标一个<code>*</code>号。</p><p>然后可以在分支上进行工作,然后提交上去。提交完后切换到<code>master</code>分支：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">Switched to branch &apos;master&apos;</span><br></pre></td></tr></table></figure><p>此时查看修改的文件发现添加的内容消失了，这是因为之前的提交是在<code>text</code>分支上，而<code>master</code>分支的提交点没有变。</p><p>使用<code>git merge</code>命令用于合并指定分支到当前分支。合并后，再查看修改目标文件的内容，就可以看到，和<code>text</code>分支的最新提交是完全一样的。</p><p>合并完成后，就可以放心地删除<code>text</code>分支了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d text</span><br><span class="line">Deleted branch text (was b17d20e).</span><br></pre></td></tr></table></figure><p>删除后，查看<code>branch</code>，就只剩下<code>master</code>分支了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* master</span><br></pre></td></tr></table></figure><p>因为创建、合并和删除分支非常快，所以Git鼓励使用分支完成某个任务，合并后再删掉分支，这和直接在<code>master</code>分支上工作效果是一样的，但过程更安全。</p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>远程仓库</title>
      <link href="/LiYpoi.github.io/2019/05/27/%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/"/>
      <url>/LiYpoi.github.io/2019/05/27/%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h3 id="一、添加远程仓库"><a href="#一、添加远程仓库" class="headerlink" title="一、添加远程仓库"></a>一、添加远程仓库</h3><p>所使用的远程仓库是<strong>GitHub</strong>，要关联一个远程库，使用命令<code>git remote add origin git@server-name:path/repo-name.git</code>；</p><p>关联后，使用命令<code>git push -u origin master</code>第一次推送master分支的所有内容；</p><p>此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改；</p><p>分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步。</p><h3 id="二、远程仓库克隆"><a href="#二、远程仓库克隆" class="headerlink" title="二、远程仓库克隆"></a>二、远程仓库克隆</h3><p>要克隆一个仓库，首先必须知道仓库的地址，然后使用<code>git clone</code>命令克隆。</p><p>Git支持多种协议，包括<code>https</code>，但通过<code>ssh</code>支持的原生<code>git</code>协议速度最快。</p><p>在多个人协作开发时，每个人各自从远程克隆一份就可以了。</p><p>GitHub给出的地址不止一个，还可以<code>https://github.com/XXXXX/XXXXX.git</code>这样的地址。实际上，Git支持多种协议，默认的<code>git://</code>使用ssh，但也可以使用<code>https</code>等其他协议。</p><p>使用<code>https</code>除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用<code>ssh</code>协议而只能用<code>https</code>。</p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>撤销修改与删除文件</title>
      <link href="/LiYpoi.github.io/2019/05/26/%E6%92%A4%E9%94%80%E4%BF%AE%E6%94%B9%E4%B8%8E%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6/"/>
      <url>/LiYpoi.github.io/2019/05/26/%E6%92%A4%E9%94%80%E4%BF%AE%E6%94%B9%E4%B8%8E%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="一、撤销修改"><a href="#一、撤销修改" class="headerlink" title="一、撤销修改"></a>一、撤销修改</h3><p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。让这个文件回到最近一次<code>git commit</code>或<code>git add</code>时的状态。</p><p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD &lt;file&gt;</code>，就回到了场景1，第二步按场景1操作。<code>git reset</code>命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用<code>HEAD</code>时，表示最新的版本。</p><p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本退会一文，不过前提是没有推送到远程库。</p><h3 id="二、删除文件"><a href="#二、删除文件" class="headerlink" title="二、删除文件"></a>二、删除文件</h3><p>命令<code>git rm</code>用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失<strong>最近一次提交后你修改的内容</strong>。</p><p>如果删错了文件，使用<code>$ git checkout -- 目标文件</code>可以将误删的文件恢复到最新的版本，<code>git checkout</code>其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</p><p><strong><code>注意：从来没有被添加到版本库就被删除的文件，是无法恢复的！</code></strong></p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网页配色方案</title>
      <link href="/LiYpoi.github.io/2019/05/26/%E7%BD%91%E9%A1%B5%E9%85%8D%E8%89%B2%E6%96%B9%E6%A1%88/"/>
      <url>/LiYpoi.github.io/2019/05/26/%E7%BD%91%E9%A1%B5%E9%85%8D%E8%89%B2%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h3 id="一、Flat-UI色表"><a href="#一、Flat-UI色表" class="headerlink" title="一、Flat UI色表"></a>一、Flat UI色表</h3><p>最常用的方法就是在<a href="http://designmodo.github.io/Flat-UI/" target="_blank" rel="noopener">Flat UI官网</a>找配色。</p><p><img src="https://i.loli.net/2019/05/26/5cea55516f26153359.png" alt="色图"></p><p>对于简单的网页配色已经够用了。</p><p><img src="https://i.loli.net/2019/05/26/5cea55f957e6f59817.png" alt="setu"></p><p>还提供一些网页元素的配色方案。</p><h3 id="二、配色的经典方案"><a href="#二、配色的经典方案" class="headerlink" title="二、配色的经典方案"></a>二、配色的经典方案</h3><p><a href="https://docs.sendwithses.com/random-stuff/easy-to-remember-color-guide-for-non-designers" target="_blank" rel="noopener">原文</a></p><h4 id="1-网页主题色"><a href="#1-网页主题色" class="headerlink" title="1.网页主题色"></a>1.网页主题色</h4><p>深颜色使用<code>c</code>、<code>f</code>、<code>6</code>、<code>9</code>这四个字符，组合成RGB色值</p><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019031608.jpg" alt="lizi"></p><p>紫罗兰色，靛蓝色，蓝色，绿色。</p><p><img src="https://blobscdn.gitbook.com/v0/b/gitbook-28427.appspot.com/o/assets%2F-LUFI_-_gHZ4pIVzoRlq%2F-L_bOd9rj2aX7LMVYlPE%2F-L_bfI-npsXbpu-N2oQS%2FYOOR.png?alt=media&amp;token=f00c3544-2239-487f-a67a-0e45c5952691" alt="lizi2"></p><p>黄色，橙色，另一种橙色，红色。</p><p>淡颜色使用<code>a</code>、<code>b</code>、<code>c</code>、<code>d</code>、<code>e</code>、<code>f</code>这六个字符，组合生成 RGB 色值。</p><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019031610.jpg" alt="lizi3"></p><h4 id="2-文本颜色"><a href="#2-文本颜色" class="headerlink" title="2.文本颜色"></a>2.文本颜色</h4><p>文字最好不要使用全黑，而是使用深蓝色，可以从下面几种颜色挑。<code>1a2a3a</code>最深，<code>2a3a4a</code>次之，<code>7a8a9a</code>最浅。</p><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019031611.jpg" alt="lizi4"></p><h4 id="3-背景色、阴影色、边框色"><a href="#3-背景色、阴影色、边框色" class="headerlink" title="3.背景色、阴影色、边框色"></a>3.背景色、阴影色、边框色</h4><p>背景色、阴影色、边框色都属于衬托，建议使用灰色，可以从<code>aaaaa</code>、<code>bbbbbb</code>、<code>cccccc</code>、<code>dddddd</code>这四个色值挑选。</p><p><img src="https://blobscdn.gitbook.com/v0/b/gitbook-28427.appspot.com/o/assets%2F-LUFI_-_gHZ4pIVzoRlq%2F-L_bOd9rj2aX7LMVYlPE%2F-L_bngDe3TB8V2KdsQ6L%2FGREYS.png?alt=media&amp;token=b66786d6-d154-4af0-97ff-ba1a0ee449de" alt="lizi5"></p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网页设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git管理修改</title>
      <link href="/LiYpoi.github.io/2019/05/24/Git%E7%AE%A1%E7%90%86%E4%BF%AE%E6%94%B9/"/>
      <url>/LiYpoi.github.io/2019/05/24/Git%E7%AE%A1%E7%90%86%E4%BF%AE%E6%94%B9/</url>
      
        <content type="html"><![CDATA[<p>Git比其他版本控制器优秀的原因在于，Git跟踪并管理的是修改，而不是文件。</p><p>在对目标文件进行一个修改后<code>git add</code>,然后再次修改文件，提交<code>$git commit -m &quot;修改说明&quot;</code>。</p><p>提交之后使用<code>$git status</code>查看状态。 会发现第二次的修改并没有提交。</p><p>回顾一下操作过程：第一次修改-&gt;<code>git add</code>-&gt;第二次修改-&gt;<code>git commit</code></p><p>在使用<code>git add</code>后，在工作区的第一次修改被放在<strong>暂存区</strong>，准备提交，但是，在工作区的<strong>第二次修改并没有放入暂存区</strong>，所以，<code>git commit</code>只负责把暂存区的修改提交了，第二次不会被提交。</p><p>如何提交第二次修改呢？</p><p>可以继续<code>git add</code> 再<code>git commit</code>，或进行两次修改后再<code>git add</code>,然后<code>git commit</code>,相当于把两次修改合并后一起提交了。</p><p><strong>每次修改，如果不用<code>git add</code>到暂存区。那就不会加入到<code>commit</code>中。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用HTML标签为汉字加拼音</title>
      <link href="/LiYpoi.github.io/2019/05/24/%E7%94%A8HTML%E6%A0%87%E7%AD%BE%E4%B8%BA%E6%B1%89%E5%AD%97%E5%8A%A0%E6%8B%BC%E9%9F%B3/"/>
      <url>/LiYpoi.github.io/2019/05/24/%E7%94%A8HTML%E6%A0%87%E7%AD%BE%E4%B8%BA%E6%B1%89%E5%AD%97%E5%8A%A0%E6%8B%BC%E9%9F%B3/</url>
      
        <content type="html"><![CDATA[<p>在知乎上看到的，一个没有什么用但有趣的小知识。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>拼音<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ruby</span>&gt;</span>拼音<span class="tag">&lt;<span class="name">rt</span>&gt;</span>pingyin<span class="tag">&lt;/<span class="name">rt</span>&gt;</span><span class="tag">&lt;/<span class="name">ruby</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果是这样的：</p><p><img src="https://i.loli.net/2019/05/24/5ce7e9301614927314.png" alt="运行结果"></p><p>但是可以看出拼音和汉字不是一一对应的，因为拼音的长度不是固定的。想要实现对其可以一字一字拼了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>拼音<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ruby</span>&gt;</span>一<span class="tag">&lt;<span class="name">rt</span>&gt;</span><span class="tag">&lt;/<span class="name">rt</span>&gt;</span>yi<span class="tag">&lt;/<span class="name">ruby</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ruby</span>&gt;</span>字<span class="tag">&lt;<span class="name">rt</span>&gt;</span><span class="tag">&lt;/<span class="name">rt</span>&gt;</span>zi<span class="tag">&lt;/<span class="name">ruby</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ruby</span>&gt;</span>一<span class="tag">&lt;<span class="name">rt</span>&gt;</span><span class="tag">&lt;/<span class="name">rt</span>&gt;</span>yi<span class="tag">&lt;/<span class="name">ruby</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ruby</span>&gt;</span>拼<span class="tag">&lt;<span class="name">rt</span>&gt;</span><span class="tag">&lt;/<span class="name">rt</span>&gt;</span>pin<span class="tag">&lt;/<span class="name">ruby</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果是这样的：</p><p><img src="https://i.loli.net/2019/05/24/5ce7eb144792c88816.png" alt="结果"></p><p>可是这种拼音是没有声调的，这是输入法的问题，我使用的微软输入法不能输入带有音调的字母，想要加上声调，就下个X狗输入法吧。</p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这一切的开始</title>
      <link href="/LiYpoi.github.io/2019/05/23/%E9%9A%8F%E7%AC%94-2/"/>
      <url>/LiYpoi.github.io/2019/05/23/%E9%9A%8F%E7%AC%94-2/</url>
      
        <content type="html"><![CDATA[<p>今天在浏览阮大的博客时想了很多。当初为什么要写博客？以前只知道博客是什么，但从来没有想过会去写，我自认为自己一直是一个特别任性的人，做事只做自己喜欢的，像博客这种费劲的东西在以前我是不会想着搞的。</p><p>直到有一次看到这么一段话：“你天天打游戏，我问你，你还记得5天前你玩的这个游戏时赢了还是输了？用的什么英雄？最后的比分是多少？你每天就像打游戏一样过活，大学四年过去了，你还记得四年了每一天干了什么事吗？”当时我就想了，我应该做些什么事去将过去的东西积累沉淀一下。</p><p>德国哲学家海德格尔说过一句著名的话：人应该”向死而生”（Being-toward-death）。意思是人面对死亡，才会停止那些无谓琐碎的关注和困扰，体会到什么是重要的事情，从而达到真正的存在。</p><p>我应该想着前看了，那样也许才能找到前进的方向。</p><p>仔细想想当初为什么要选计算机专业？我自认为自己与计算机也没有什么不解之缘，只知道一句“富学金融，穷学IT”，可这好像也不是选择的理由。</p><p>就这样我不清不楚的选择了这个专业。</p><p>说实话，我对这个专业还是很有兴趣的，但是我究竟是喜欢编程这件事还是喜欢编程后的结果所带来的成就感，这两点我现在还没有搞明白。这两件事也许没有什么本质上的区别吧。</p><p>在一年的大学生活里，我发现主要的核心课程其实能很快学完，很多课程是浪费时间，我个人最讨厌非我主观意愿下的浪费时间。所以我开始学习其他的“旁门左道”来消遣我的时间。</p><p>加了一个PPT社群，搭建了自己的博客，开始学Git，在HTML和CSS上较为深入的学习了一下。以后的打算：将博客坚持写下去，将HTML5和CSS3系统学习一下，把Git学完，学ejs、js做一个hexo的主题，假期提前学Java，或许再会找几门网课学些旁门左道,这就牵扯到将来的计划了。</p><p>我只能说目前还是没有一个清楚的大方向，只能看到什么感兴趣的就去学什么。</p><p>感谢一下互联网，互联网将教育的自主权，交到了每个人自己的手里，我才能有各种学习的渠道，了解了更多的事。</p>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔</title>
      <link href="/LiYpoi.github.io/2019/05/23/%E9%9A%8F%E7%AC%94-1/"/>
      <url>/LiYpoi.github.io/2019/05/23/%E9%9A%8F%E7%AC%94-1/</url>
      
        <content type="html"><![CDATA[<p>今天刷着知乎，偶尔发现一个名字：阮一峰，突然感觉很熟悉，搜索了一下这个人，“中国第一的bloger”、”在阿里任职”，这几个都不是主要的，主要的是《黑客与画家》竟然是由他翻译的！之前在看书时一直没留意过译者是谁，而且《未来世界的幸存者》也是由他所写。</p><p>在浏览了阮大的博客后，我对“斜杠青年”这词有了新的认识，什么是斜杆青年啊，阮大才是真正的斜杆青年啊。</p>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git提交远程报错</title>
      <link href="/LiYpoi.github.io/2019/05/23/git%E6%8F%90%E4%BA%A4%E8%BF%9C%E7%A8%8B%E6%8A%A5%E9%94%99/"/>
      <url>/LiYpoi.github.io/2019/05/23/git%E6%8F%90%E4%BA%A4%E8%BF%9C%E7%A8%8B%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<p>在之前用<code>git push -u origin master</code>时，会出现这种错误：</p><p><img src="https://i.loli.net/2019/05/23/5ce671044b66746735.png" alt="错误1"></p><p>原因在于第一次在Github中<code>learn-Git</code>仓库里创建的Markdown文件不在本地代码目录中。</p><p>之前在出现此错误时，直接使用了<code>git push -f</code>命令强制推送，但会影响<code>commit</code>历史。</p><p>解决办法：使用<code>git pull --rebase origin master</code>进行合并，合并之后再使用<code>git push origin master</code>推上去</p><p><img src="https://i.loli.net/2019/05/23/5ce6732574d6d19488.png" alt="解决"></p><p>对Git的一些命令了解的还不是特别透彻。</p><p><code>git push origin master</code> ：本地master分支的最新修改推送至GitHub</p><p><code>git push -u origin master</code>：第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git的工作区与暂存区</title>
      <link href="/LiYpoi.github.io/2019/05/23/git-3/"/>
      <url>/LiYpoi.github.io/2019/05/23/git-3/</url>
      
        <content type="html"><![CDATA[<h4 id="工作区与暂存区"><a href="#工作区与暂存区" class="headerlink" title="工作区与暂存区"></a>工作区与暂存区</h4><p>Git和其他版本控制系统如SVN的一个不同之处就是有暂存区的概念。</p><p><strong>工作区</strong></p><p>在电脑中能看到的目录，比如我在电脑中能看到的<code>learn-Git</code>文件夹就是一个工作区.</p><p><strong>版本库</strong></p><p>工作区有一个隐藏目录<code>.git</code>，这个不算工作区，而是Git的版本库。</p><p>Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支<code>master</code>，以及指向<code>master</code>的一个指针叫<code>HEAD</code>。</p><p>前面说过把文件往Git版本库里添加的时候，是分两步执行的：</p><p>第一步是用<code>git add</code>把文件添加进去，实际上就是把文件修改添加到暂存区；</p><p>第二步是用<code>git commit</code>提交更改，实际上就是把暂存区的所有内容提交到当前分支。</p><p>因为我们创建Git版本库时，Git自动为我们创建了唯一一个<code>master</code>分支，所以，现在，<code>git commit</code>就是往<code>master</code>分支上提交更改。</p><p>你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。<code>git add</code>命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行<code>git commit</code>就可以一次性把暂存区的所有修改提交到分支。</p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git的版本退回</title>
      <link href="/LiYpoi.github.io/2019/05/22/git-2/"/>
      <url>/LiYpoi.github.io/2019/05/22/git-2/</url>
      
        <content type="html"><![CDATA[<h4 id="git的版本退回"><a href="#git的版本退回" class="headerlink" title="git的版本退回"></a>git的版本退回</h4><p>在对文件不断修改后，每一次的修改记录可以通过最近的<code>commit</code>进行恢复，然后重新修改提交，这一点就像我们玩RPG游戏一样，每通过一关都要SAVE一下，下一关的boss打不过时重新LOAD。</p><p>举个例子：</p><p>版本1：wrote a readme file</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Git is a version control system.</span><br><span class="line">Git is free software.</span><br></pre></td></tr></table></figure><p>版本2：add distributed</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Git is a distributed version control system.</span><br><span class="line">Git is free software.</span><br></pre></td></tr></table></figure><p>版本3：append GPL</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Git is a distributed version control system.</span><br><span class="line">Git is free software distributed under the GPL.</span><br></pre></td></tr></table></figure><p>在Git中，我们可以通过<code>git log</code>命令查看版本系统中的提交修改历史纪录。<code>git log</code>命令显示从最近到最远的提交日志，每提交一个新版本，实际上Git就会把它们自动串成一条时间线。如果使用可视化工具查看Git历史，就可以更清楚地看到提交历史的时间线.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ git log</span><br><span class="line">commit 1094adb7b9b3807259d8cb349e7df1d4d6477073 (HEAD -&gt; master)</span><br><span class="line">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class="line">Date:   Fri May 18 21:06:15 2018 +0800</span><br><span class="line"></span><br><span class="line">    append GPL</span><br><span class="line"></span><br><span class="line">commit e475afc93c209a690c39c13a46716e8fa000c366</span><br><span class="line">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class="line">Date:   Fri May 18 21:03:36 2018 +0800</span><br><span class="line"></span><br><span class="line">    add distributed</span><br><span class="line"></span><br><span class="line">commit eaadf4e385e865d25c48e7ca9c8395c3f7dfaef0</span><br><span class="line">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class="line">Date:   Fri May 18 20:59:18 2018 +0800</span><br><span class="line"></span><br><span class="line">    wrote a readme file</span><br></pre></td></tr></table></figure><p>我们可以看到3次提交，最近的一次是<code>append GPL</code>，上一次是<code>add distributed</code>，最早的一次是<code>wrote a readme file</code>。</p><p>如果嫌输出信息太多，看得眼花缭乱的，可以试试加上<code>--pretty=oneline</code>参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git log --pretty=oneline</span><br><span class="line">1094adb7b9b3807259d8cb349e7df1d4d6477073 (HEAD -&gt; master) append GPL</span><br><span class="line">e475afc93c209a690c39c13a46716e8fa000c366 add distributed</span><br><span class="line">eaadf4e385e865d25c48e7ca9c8395c3f7dfaef0 wrote a readme file</span><br></pre></td></tr></table></figure><p>看到的一大串类似<code>1094adb...</code>的是<code>commit id</code>（版本号）</p><p><strong>版本返回</strong></p><p>在Git中，用<code>HEAD</code>表示当前版本，上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个<code>^</code>比较容易数不过来，所以写成<code>HEAD~100</code>。</p><p>现在，我们要把当前版本回退到上一个版本，就可以使用<code>git reset</code>命令。</p><p>再用<code>git log</code>查看现在版本库的状态，就会发现已经返回了，当想要再返回去时，只要上面的命令行窗口还没关闭，找到之前的<code>commit id</code>（版本号）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard commit id//commit id的名字不必写全</span><br><span class="line">HEAD is now at 83b0afe append GPL//之前的版本</span><br></pre></td></tr></table></figure><p>Git的版本回退速度非常快，因为Git在内部有个指向当前版本的<code>HEAD</code>指针，当你回退版本的时候，Git仅仅是把HEAD从指向<code>append GPL</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">┌────┐</span><br><span class="line">│HEAD│</span><br><span class="line">└────┘</span><br><span class="line">   │</span><br><span class="line">   └──&gt; ○ append GPL</span><br><span class="line">        │</span><br><span class="line">        ○ add distributed</span><br><span class="line">        │</span><br><span class="line">        ○ wrote a readme file</span><br></pre></td></tr></table></figure><p>改为指向<code>add distributed</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">┌────┐</span><br><span class="line">│HEAD│</span><br><span class="line">└────┘</span><br><span class="line">   │</span><br><span class="line">   │    ○ append GPL</span><br><span class="line">   │    │</span><br><span class="line">   └──&gt; ○ add distributed</span><br><span class="line">        │</span><br><span class="line">        ○ wrote a readme file</span><br></pre></td></tr></table></figure><p>然后顺便把工作区的文件更新了。所以你让<code>HEAD</code>指向哪个版本号，你就把当前版本定位在哪。</p><p>现在，你回退到了某个版本，关掉了电脑，第二天早上就后悔了，想恢复到新版本怎么办？找不到新版本的<code>commit id</code>怎么办？</p><p>在Git中，总是有后悔药可以吃的。当你用<code>$ git reset --hard HEAD^</code>回退到<code>add distributed</code>版本时，再想恢复到<code>append GPL</code>，就必须找到<code>append GPL</code>的commit id。Git提供了一个命令<code>git reflog</code>用来记录你的每一次命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git reflog</span><br><span class="line">e475afc HEAD@&#123;1&#125;: reset: moving to HEAD^</span><br><span class="line">1094adb (HEAD -&gt; master) HEAD@&#123;2&#125;: commit: append GPL</span><br><span class="line">e475afc HEAD@&#123;3&#125;: commit: add distributed</span><br><span class="line">eaadf4e HEAD@&#123;4&#125;: commit (initial): wrote a readme file</span><br></pre></td></tr></table></figure><p>终于舒了口气，从输出可知，<code>append GPL</code>的commit id是<code>1094adb</code>，现在，你又可以乘坐时光机回到未来了。</p><p><strong>小结</strong></p><ul><li><code>HEAD</code>指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code>。</li><li>穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本。</li><li>要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔</title>
      <link href="/LiYpoi.github.io/2019/05/21/%E9%9A%8F%E7%AC%941/"/>
      <url>/LiYpoi.github.io/2019/05/21/%E9%9A%8F%E7%AC%941/</url>
      
        <content type="html"><![CDATA[<p>主题成功换成了Next，果然还是Next集成的好，各种功能都有，开始学习Git了。</p><p>今天不学习，明天当咸鱼。</p>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git简介</title>
      <link href="/LiYpoi.github.io/2019/05/21/git-1/"/>
      <url>/LiYpoi.github.io/2019/05/21/git-1/</url>
      
        <content type="html"><![CDATA[<h4 id="一、Git简史"><a href="#一、Git简史" class="headerlink" title="一、Git简史"></a>一、Git简史</h4><h5 id="1、Git的诞生"><a href="#1、Git的诞生" class="headerlink" title="1、Git的诞生"></a>1、Git的诞生</h5><p>Linux 内核开源项目有着为数众多的参与者。 绝大多数的 Linux 内核维护工作都花在了提交补丁和保存归档的繁琐事务上（1991－2002年间）。 到 2002 年，整个项目组开始启用一个专有的分布式版本控制系统 BitKeeper 来管理和维护代码。</p><p>到了 2005 年，开发 BitKeeper 的商业公司同 Linux 内核开源社区的合作关系结束，他们收回了 Linux 内核社区免费使用 BitKeeper 的权力。 这就迫使 Linux 开源社区（特别是 Linux 的缔造者 Linus Torvalds）基于使用 BitKeeper 时的经验教训，开发出自己的版本系统。 他们对新的系统制订了若干目标：</p><ul><li>速度</li><li>简单的设计</li><li>对非线性开发模式的强力支持</li><li>完全分布式</li><li>可以管理超大规模项目</li></ul><p>于是就有了Git，这个最流行的分布式版本控制系统（据说Git是由Linux之父LInus花了两周的时间自己用C语言写的）。</p><hr><h5 id="2、集中式与分布式"><a href="#2、集中式与分布式" class="headerlink" title="2、集中式与分布式"></a>2、集中式与分布式</h5><p>先说说<strong>什么是版本控制系统？</strong></p><p>版本控制最主要的功能就是追踪文件的变更。它将什么时候、什么人更改了文件的什么内容等信息忠实地了已录下来。每一次文件的改变，文件的版本号都将增加。除了记录版本变更外，版本控制的另一个重要功能是并行开发。软件开发往往是多人协同作业，版本控制可以有效地解决版本的同步以及不同开发者之间的开发通信问题，提高协同开发的效率。并行开发中最常见的不同版本软件的错误(Bug)修正问题也可以通过版本控制中分支与合并的方法有效地解决。</p><p>版本控制器下分集中式（SVN、CVS）和分布式（Git）的，二者区别在于：</p><p>集中式版本控制系统的版本库是集中存放在中央服务器的，而干活的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始干活，干完活了，再把自己的活推送给中央服务器。中央服务器就好比是一个图书馆，你要改一本书，必须先从图书馆借出来，然后回到家自己改，改完了，再放回图书馆，这一切需要联网才能工作。</p><p>分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样，在工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？比方说你在自己电脑上改了文件A，你的同事也在他的电脑上改了文件A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。</p><p>和集中式版本控制系统相比，分布式版本控制系统的安全性要高很多，因为每个人电脑里都有完整的版本库，某一个人的电脑坏掉了不要紧，随便从其他人那里复制一个就可以了。而集中式版本控制系统的中央服务器要是出了问题，所有人都没法干活了。</p><p>在实际使用分布式版本控制系统的时候，其实很少在两人之间的电脑上推送版本库的修改，因为可能你们俩不在一个局域网内，两台电脑互相访问不了，也可能今天你的同事病了，他的电脑压根没有开机。因此，分布式版本控制系统通常也有一台充当“中央服务器”的电脑，但这个服务器的作用仅仅是用来方便“交换”大家的修改，没有它大家也一样干活，只是交换修改不方便而已。</p><hr><h4 id="二、Git基础操作"><a href="#二、Git基础操作" class="headerlink" title="二、Git基础操作"></a>二、Git基础操作</h4><h5 id="1、获取与创建项目命令"><a href="#1、获取与创建项目命令" class="headerlink" title="1、获取与创建项目命令"></a>1、获取与创建项目命令</h5><p><strong>git inti</strong></p><p>用git init在目录中创建新的Git仓库。你可以在任何时候，任何目录中这么做，完全是本地化的。</p><p>在目录中执行git init，就可以创建一个Git仓库了。比如我们创建learn-git项目：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir learn-git</span><br><span class="line">$ cd learn-git /</span><br><span class="line">$ git init</span><br><span class="line">Initialized empty Git repository in /Users/learn-git/www/learn-git/.git/</span><br><span class="line"># 在 /www/learn-git/.git/ 目录初始化空 Git 仓库完毕。</span><br></pre></td></tr></table></figure><p>现在你可以看到在你的项目中生成了.git这个子目录。这就是你的Git仓库了，所有有关你的此项目的快照数据都存放在这里。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls -a</span><br><span class="line">xxx文件</span><br><span class="line">xxx文件</span><br></pre></td></tr></table></figure><p><strong>git clone</strong></p><p>使用 git clone 拷贝一个 Git 仓库到本地，让自己能够查看该项目，或者进行修改。</p><p>如果你需要与他人合作一个项目，或者想要复制一个项目，看看代码，你就可以克隆那个项目。 执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone [url]</span><br></pre></td></tr></table></figure><p>[url] 为你想要复制的项目，就可以了。</p><p>例如我们克隆 Github 上的项目：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git clone git@github.com:schacon/simplegit.git</span><br><span class="line">Cloning into &apos;simplegit&apos;...</span><br><span class="line">remote: Counting objects: 13, done.</span><br><span class="line">remote: Total 13 (delta 0), reused 0 (delta 0), pack-reused 13</span><br><span class="line">Receiving objects: 100% (13/13), done.</span><br><span class="line">Resolving deltas: 100% (2/2), done.</span><br><span class="line">Checking connectivity... done.</span><br></pre></td></tr></table></figure><p>克隆完成后，在当前目录下会生成一个 simplegit 目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd simplegit/</span><br><span class="line">$ ls</span><br><span class="line">README   Rakefile lib</span><br></pre></td></tr></table></figure><p>上述操作将复制该项目的全部记录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ls -a</span><br><span class="line">.        ..       .git     README   Rakefile lib</span><br><span class="line">$ cd .git</span><br><span class="line">$ ls</span><br><span class="line">HEAD        description info        packed-refs</span><br><span class="line">branches    hooks       logs        refs</span><br><span class="line">config      index       objects</span><br></pre></td></tr></table></figure><p>默认情况下，Git 会按照你提供的 URL 所指示的项目的名称创建你的本地项目目录。 通常就是该 URL 最后一个 / 之后的项目名称。如果你想要一个不一样的名字， 你可以在该命令后加上你想要的名称。</p><h5 id="2、基本快照"><a href="#2、基本快照" class="headerlink" title="2、基本快照"></a>2、基本快照</h5><p>编写一个<code>readme.txt</code>文件，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Git is a version control system.</span><br><span class="line">Git is free software.</span><br></pre></td></tr></table></figure><p>一定要放到<code>learn-git</code>目录下（子目录也行），因为这是一个Git仓库，放到其他地方Git再厉害也找不到这个文件。</p><p>和把大象放到冰箱需要3步相比，把一个文件放到Git仓库只需要两步。</p><p>第一步，用命令<code>git add</code>告诉Git，把文件添加到仓库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add readme.txt</span><br></pre></td></tr></table></figure><p>执行上面的命令，没有任何显示，说明添加成功。</p><p>第二步，用命令<code>git commit</code>告诉Git，把文件提交到仓库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m &quot;wrote a readme file&quot;</span><br><span class="line">[master (root-commit) eaadf4e] wrote a readme file</span><br><span class="line"> 1 file changed, 2 insertions(+)</span><br><span class="line"> create mode 100644 readme.txt</span><br></pre></td></tr></table></figure><p>简单解释一下<code>git commit</code>命令，<code>-m</code>后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。</p><p>嫌麻烦不想输入<code>-m &quot;xxx&quot;</code>行不行？确实有办法可以这么干，但是强烈不建议你这么干，因为输入说明对自己对别人阅读都很重要。实在不想输入说明的童鞋请自行Google，我不告诉你这个参数。</p><p><code>git commit</code>命令执行成功后会告诉你，<code>1 file changed</code>：1个文件被改动（我们新添加的readme.txt文件）；<code>2 insertions</code>：插入了两行内容（readme.txt有两行内容）。</p><p>为什么Git添加文件需要<code>add</code>，<code>commit</code>一共两步呢？因为<code>commit</code>可以一次提交很多文件，所以你可以多次<code>add</code>不同的文件，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add file1.txt</span><br><span class="line">$ git add file2.txt file3.txt</span><br><span class="line">$ git commit -m &quot;add 3 files.&quot;</span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><p>初始化一个Git仓库，使用<code>git init</code>命令。</p><p>添加文件到Git仓库，分两步：</p><ol><li>使用命令<code>git add &lt;file&gt;</code>，注意，可反复多次使用，添加多个文件；</li><li>使用命令<code>git commit -m &lt;message&gt;</code>，完成。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript基础操作</title>
      <link href="/LiYpoi.github.io/2019/05/21/js2/"/>
      <url>/LiYpoi.github.io/2019/05/21/js2/</url>
      
        <content type="html"><![CDATA[<h4 id="JS的引入"><a href="#JS的引入" class="headerlink" title="JS的引入"></a>JS的引入</h4><p>1.将JS代码嵌入在元素”事件”中</p><p>虽然可以写在标签属性中，但是他们属于结构与行为耦合，不方便维护，不推荐使用。</p><p>2.将JS代码嵌入在<script>标签中</p><p>3.将JS代码写在外部脚本文件中</p><p>写在外部文件中在不同的页面中可以同时引用，也可以利用浏览器的缓存机制，推荐使用。</p><p>当script标签一旦用于引用外部文件，就不能再编写代码，即使编写了浏览器也会忽略,如果有需要可以再创建一</p><p>个新的script标签用于编写内部代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">可以将js代码写在超链接的href属性中，这样当点击超链接时，会执行js代码。</span><br><span class="line">&lt;a href=<span class="string">"javascript:alert('让你点你就点')"</span>&gt;你也点我一下&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">&lt;a href="javascript:"&gt;你也点我一下&lt;/</span>a&gt;<span class="xml"><span class="comment">&lt;!--点击后无响应--&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="JS中添加注释"><a href="#JS中添加注释" class="headerlink" title="JS中添加注释"></a>JS中添加注释</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.js中严格区分大小写</span><br><span class="line">2.js中每一条语句以分号（;）结尾</span><br><span class="line">不写分号也可以，浏览器会自动添加，但是会消耗一些系统，而且有些时候会加错分号，所以开发中分号必须写（英文）</span><br><span class="line">3.js中会忽略多个空格和换行，所以我们可以利用空格和换行对代码进行格式化</span><br><span class="line">4./*js文件中注释，多行注释，注释中的内容不会被执行，但是可以在源代码中查看*/</span><br><span class="line">  //单行注释</span><br></pre></td></tr></table></figure><h4 id="JS变量"><a href="#JS变量" class="headerlink" title="JS变量"></a>JS变量</h4><p><strong>声明变量</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> a; <span class="comment">/*声明和赋值可以同时,在js中使用var关键字来声明一个变量*/</span></span><br><span class="line">        a= <span class="number">123</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line">        <span class="keyword">var</span> b=<span class="number">1345</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(b);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><strong>标识符</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-在JS中所有可以由我们自主命名的都可以成为标识符</span><br><span class="line">-例如：变量名、函数名、属性名都属于标识符</span><br><span class="line">-命名标识符时需要遵循一下原则</span><br><span class="line"><span class="number">1.</span>标识符中可以含有字母、数字、_、$</span><br><span class="line"><span class="number">2.</span>标识符不能以数字开头</span><br><span class="line"><span class="number">3.</span>标识符不能是ES中的关键字和保留字</span><br><span class="line"><span class="number">4.</span>标识符一般都采用驼峰命名法</span><br><span class="line">-首字母小写，每个单词的开头字母大写，其余字母小写</span><br><span class="line">例如：helloWorld xxxYyyZzz</span><br><span class="line">-JS底层保存标识符实际上是采用Unicode编码，所以理论上讲所有utf<span class="number">-8</span>中含有的内容都可以作为标识符（汉字）</span><br></pre></td></tr></table></figure><h4 id="三个关键输出语句"><a href="#三个关键输出语句" class="headerlink" title="三个关键输出语句"></a>三个关键输出语句</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;<span class="xml"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        alert(<span class="string">"哥，你真帅啊"</span>);<span class="comment">/*在浏览器窗口弹出一个警告框*/</span></span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">"看我出不出来"</span>);<span class="comment">/*文档显示，向body中输出一个内容*/</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"你猜我在哪出来呢"</span>);<span class="comment">/*向控制台输出一个内容*/</span></span><br><span class="line">        <span class="comment">/*从上到下依次执行*/</span></span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure></script></p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔</title>
      <link href="/LiYpoi.github.io/2019/05/17/%E9%9A%8F%E7%AC%94/"/>
      <url>/LiYpoi.github.io/2019/05/17/%E9%9A%8F%E7%AC%94/</url>
      
        <content type="html"><![CDATA[<p>发现写的文章内容过长时会无法正常显示，目前这个问题还没能解决，加<code>&lt;!--more--&gt;</code>会无法显示出“阅读全文”。或许应该换一个主题了，等假期试试能不能自己做一个。</p>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript简介</title>
      <link href="/LiYpoi.github.io/2019/05/09/Javascript1/"/>
      <url>/LiYpoi.github.io/2019/05/09/Javascript1/</url>
      
        <content type="html"><![CDATA[<h2 id="Javascript简介"><a href="#Javascript简介" class="headerlink" title="Javascript简介"></a>Javascript简介</h2><h3 id="简史"><a href="#简史" class="headerlink" title="简史"></a>简史</h3><ul><li><p>Javascript是由<strong>网景</strong>公司发明，最初命名为LiveScript，后来由于<strong>SUN</strong>公司的介入更名为Javascript。</p></li><li><p>1996年微软公司在其最新的IE3浏览器中引入了自己对Javascript的实现<strong>JScript</strong>。</p></li><li><p>于是市面上存在两个版本的Javascript，一个是网景公司的Javascript和微软的JScript。</p></li><li><p>为了确保不同的浏览器上运行的Javascript标准一致，所以几个公司共同制定了JS的标准命名为<strong>ECMAScript</strong>.</p><a id="more"></a><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul><li><p>ECMAScript是一个标准，而这个标准需要各个厂商去实现。</p></li><li><p>不同的浏览器厂商对该标准有不同的实现。</p><p>| 浏览器     | Javascript实现方式 |<br>| ———- | —————–: |<br>| FireFox    |       SpiderMonkey |<br>| IE         |     JScript/Chakra |<br>| Safari     |     JavascriptCore |<br>| <strong>Chrome</strong> |             <strong>V8</strong> |</p></li></ul><p>注：Chrome浏览器是对Javascript实现最好的</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li><p>JS的特点</p><p>—解释型语言</p><p>—类似于C和Java的语法结构</p><p>—动态语言</p><p>—基于原型的面向对象</p><p>—弱类型语言由数据来决定数据类型</p></li></ul></li></ul><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><p>1.核心(ECMAScript)<br>2.文档对象模型(DOM,Document Object Model) 让JS<br>有能力与网页进行对话<br>3.浏览器对象模型(BOM,Browser Object Model) 让<br>JS有能力与浏览器进行对话</p><h3 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h3><p>1.直接在浏览器Console（F12）中输入并执行JS<br>2.将JS脚本嵌入在HTML页面中执行</p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown基础语法</title>
      <link href="/LiYpoi.github.io/2019/05/05/Markdown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95-1/"/>
      <url>/LiYpoi.github.io/2019/05/05/Markdown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95-1/</url>
      
        <content type="html"><![CDATA[<p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，可以使普通文本内容具有一定的格式，应用于文档快速排版，有着简单、轻量的特点。<em>详细介绍见<a href="https://baike.baidu.com/item/markdown/3245829?fr=aladdin" target="_blank" rel="noopener">Markdown</a></em></p><h2 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h2><p>在想要设为标题的文字前加#，#后面添加空格。</p><p>一个#是一级标题，两个#是二级标题，支持1-6级标题（如果你有HTML的基础，相信这些对你来说很好理解）</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.# 一级标题</span><br><span class="line">2.## 二级标题</span><br><span class="line">3.### 三级标题</span><br><span class="line">4.#### 四级标题</span><br><span class="line">5.##### 五级标题</span><br><span class="line">6.###### 六级标题</span><br></pre></td></tr></table></figure><p>效果：</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="二、字体"><a href="#二、字体" class="headerlink" title="二、字体"></a>二、字体</h2><p>加粗</p><p>要加粗的文字前后用两个*包裹</p><p>斜体</p><p>要倾斜的文字前后用一个*包裹</p><p>斜体加粗</p><p>要倾斜加粗的文字前后用三个***包裹</p><p>删除线</p><p>要加删除线的文字前后用两个~~包裹</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">**文字加粗**</span><br><span class="line">*文字倾斜*</span><br><span class="line">***文字加粗倾斜***</span><br><span class="line">~~文字删除线~~</span><br></pre></td></tr></table></figure><p>效果：</p><p><strong>文字加粗</strong><br><em>文字倾斜</em><br><strong><em>文字加粗倾斜</em></strong><br><del>文字删除线</del></p><p>注脚：</p><p>使用 [^keyword] 表示注脚。</p><p>这是一个注脚[^footnote]的样例。</p><p>这是第二个注脚[^footnote2]的样例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">内容区</span><br><span class="line">内容区</span><br><span class="line">内容区</span><br><span class="line">内容区</span><br><span class="line">内容区</span><br><span class="line">内容区</span><br><span class="line">内容区</span><br><span class="line">内容区</span><br><span class="line">内容区</span><br><span class="line">内容区</span><br><span class="line">内容区</span><br><span class="line">内容区</span><br><span class="line">内容区</span><br><span class="line">内容区</span><br><span class="line">内容区</span><br><span class="line">内容区</span><br></pre></td></tr></table></figure><p>[^footnote]: 这是一个 <em>注脚</em> 的 <strong>文本</strong>。<br>[^footnote2]: 这是另一个 <em>注脚</em> 的 <strong>文本</strong>。</p><h2 id="三、引用"><a href="#三、引用" class="headerlink" title="三、引用"></a>三、引用</h2><p>在引用的文字前加&gt;,引用可以嵌套。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;引用内容</span><br></pre></td></tr></table></figure><p>效果：</p><blockquote><p>引用内容</p></blockquote><h2 id="四、插入图片"><a href="#四、插入图片" class="headerlink" title="四、插入图片"></a>四、插入图片</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">![图片alt](图片地址 &apos;&apos;图片title&apos;&apos;)</span><br><span class="line"></span><br><span class="line">图片alt是对图片内容的解释。</span><br><span class="line">图片title是图片的标题，当鼠标移到图片上时显示的内容，itle可加可不加。</span><br></pre></td></tr></table></figure><p>示例：</p><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1557162167109&amp;di=e218f9947a8606b0890d692bae05b853&amp;imgtype=0&amp;src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201707%2F23%2F20170723132656_vZMCN.jpeg" alt="樱花"></p><h2 id="五、分割线"><a href="#五、分割线" class="headerlink" title="五、分割线"></a>五、分割线</h2><p>用三个或三个以上的*或-表示</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.---</span><br><span class="line">2.----</span><br><span class="line">3.***</span><br><span class="line">4.****</span><br></pre></td></tr></table></figure><p>效果：</p><hr><hr><hr><hr><h2 id="六、超链接"><a href="#六、超链接" class="headerlink" title="六、超链接"></a>六、超链接</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[超链接名]（超链接地址 &quot;超链接title&quot;）title可加可不加</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[百度](http://baidu.com)</span><br></pre></td></tr></table></figure><p>效果：</p><p><a href="http://baidu.com" target="_blank" rel="noopener">百度</a></p><h2 id="七、列表"><a href="#七、列表" class="headerlink" title="七、列表"></a>七、列表</h2><p>一、无序列表</p><p>在列表内容前用+或-或 *加空格</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.+ 列表内容</span><br><span class="line">2.- 列表内容</span><br><span class="line">3.* 列表内容</span><br></pre></td></tr></table></figure><p>效果：</p><ul><li><p>列表内容</p><ul><li><p>列表内容</p><ul><li>列表内容</li></ul></li></ul></li></ul><p>二、有序列表</p><p>在列表内容前数字加点加空格</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 列表内容</span><br><span class="line">2. 列表内容</span><br><span class="line">3. 列表内容</span><br></pre></td></tr></table></figure><p>效果：</p><ol><li>列表内容</li><li>列表内容</li><li>列表内容</li></ol><p>三、列表嵌套</p><p>可以有序套有序、有序套无序、无序套无序、无序套有序</p><p>在上一级和下一级之间加三个空格</p><h2 id="八、表格"><a href="#八、表格" class="headerlink" title="八、表格"></a>八、表格</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| 项目        | 价格   |  数量  |</span><br><span class="line">| --------   | -----:  | :----:  |</span><br><span class="line">| 计算机     | \$1600 |   5     |</span><br><span class="line">| 手机        |   \$12   |   12   |</span><br><span class="line">| 管线        |    \$1    |  234  |</span><br></pre></td></tr></table></figure><p>文字默认居左<br>-两边加：表示文字居中<br>-右边加：表示文字居右,第二行分割表头和内容,-有一个就可以。</p><p>效果：</p><table><thead><tr><th>项目</th><th style="text-align:right">价格</th><th style="text-align:center">数量</th></tr></thead><tbody><tr><td>计算机</td><td style="text-align:right">\$1600</td><td style="text-align:center">5</td></tr><tr><td>手机</td><td style="text-align:right">\$12</td><td style="text-align:center">12</td></tr><tr><td>管线</td><td style="text-align:right">\$1</td><td style="text-align:center">234</td></tr></tbody></table><h2 id="九、代码块"><a href="#九、代码块" class="headerlink" title="九、代码块"></a>九、代码块</h2><p>行内代码块，使用 `代码` 表示行内代码块。</p><p>示例：</p><p>让我们聊聊 <code>html</code>。</p><p>单行代码：代码之间分别用一个反引号包起来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`代码内容`</span><br></pre></td></tr></table></figure><p>代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">​</span><br></pre></td></tr></table></figure><p>  代码…<br>  代码…<br>  代码…<br>​<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line"></span><br><span class="line">`代码内容`</span><br><span class="line"></span><br><span class="line">```c++</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">   return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="十、LaTeX公式"><a href="#十、LaTeX公式" class="headerlink" title="十、LaTeX公式"></a>十、LaTeX公式</h2><p>LaTeX 公式</p><p>$ 表示行内公式： </p><p>质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。</p><p>$$ 表示整行公式：</p><p>$$\sum_{i=1}^n a_i=0$$</p><p>$$f(x_1,x_x,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2 $$</p><p>$$\sum^{j-1}<em>{k=0}{\widehat{\gamma}</em>{kj} z_k}$$</p><p>访问 <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="noopener">MathJax</a> 参考更多使用方法。</p><h2 id="十一、图"><a href="#十一、图" class="headerlink" title="十一、图"></a>十一、图</h2><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Alice-&gt;Bob: Hello Bob, how are you?</span><br><span class="line">Note right of Bob: Bob thinks</span><br><span class="line">Bob--&gt;Alice: I am good thanks!</span><br></pre></td></tr></table></figure><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Title: Here is a title</span><br><span class="line">A-&gt;B: Normal line</span><br><span class="line">B--&gt;C: Dashed line</span><br><span class="line">C-&gt;&gt;D: Open arrow</span><br><span class="line">D--&gt;&gt;A: Dashed open arrow</span><br></pre></td></tr></table></figure><h4 id="更多语法参考：序列图语法参考"><a href="#更多语法参考：序列图语法参考" class="headerlink" title="更多语法参考：序列图语法参考"></a>更多语法参考：<a href="http://bramp.github.io/js-sequence-diagrams/" target="_blank" rel="noopener">序列图语法参考</a></h4><h3 id="甘特图"><a href="#甘特图" class="headerlink" title="甘特图"></a>甘特图</h3><p>甘特图内在思想简单。基本是一条线条图，横轴表示时间，纵轴表示活动（项目），线条表示在整个期间上计划和实际的活动完成情况。它直观地表明任务计划在什么时候进行，及实际进展与计划要求的对比。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">title 项目开发流程</span><br><span class="line">section 项目确定</span><br><span class="line">    需求分析       :a1, 2016-06-22, 3d</span><br><span class="line">    可行性报告     :after a1, 5d</span><br><span class="line">    概念验证       : 5d</span><br><span class="line">section 项目实施</span><br><span class="line">    概要设计      :2016-07-05  , 5d</span><br><span class="line">    详细设计      :2016-07-08, 10d</span><br><span class="line">    编码          :2016-07-15, 10d</span><br><span class="line">    测试          :2016-07-22, 5d</span><br><span class="line">section 发布验收</span><br><span class="line">    发布: 2d</span><br><span class="line">    验收: 3d</span><br></pre></td></tr></table></figure><h4 id="更多语法参考：甘特图语法参考"><a href="#更多语法参考：甘特图语法参考" class="headerlink" title="更多语法参考：甘特图语法参考"></a>更多语法参考：<a href="https://knsv.github.io/mermaid/#gant-diagrams" target="_blank" rel="noopener">甘特图语法参考</a></h4><h3 id="Mermaid-流程图"><a href="#Mermaid-流程图" class="headerlink" title="Mermaid 流程图"></a>Mermaid 流程图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A[Hard edge] --&gt;|Link text| B(Round edge)</span><br><span class="line">B --&gt; C&#123;Decision&#125;</span><br><span class="line">C --&gt;|One| D[Result one]</span><br><span class="line">C --&gt;|Two| E[Result two]</span><br></pre></td></tr></table></figure><h4 id="更多语法参考：Mermaid-流程图语法参考"><a href="#更多语法参考：Mermaid-流程图语法参考" class="headerlink" title="更多语法参考：Mermaid 流程图语法参考"></a>更多语法参考：<a href="https://knsv.github.io/mermaid/#flowcharts-basic-syntax" target="_blank" rel="noopener">Mermaid 流程图语法参考</a></h4><h3 id="Mermaid-序列图"><a href="#Mermaid-序列图" class="headerlink" title="Mermaid 序列图"></a>Mermaid 序列图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Alice-&gt;John: Hello John, how are you?</span><br><span class="line">loop every minute</span><br><span class="line">    John--&gt;Alice: Great!</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h4 id="更多语法参考：Mermaid-序列图语法参考"><a href="#更多语法参考：Mermaid-序列图语法参考" class="headerlink" title="更多语法参考：Mermaid 序列图语法参考"></a>更多语法参考：<a href="https://knsv.github.io/mermaid/#sequence-diagrams" target="_blank" rel="noopener">Mermaid 序列图语法参考</a></h4><h2 id="后序"><a href="#后序" class="headerlink" title="后序"></a>后序</h2><p>部分Markdown语法在不同的编译器上显示的效果有小部分不同，有些编译器可以显示出甘特图，有些没有效果的显示，我所用的编译器是Cmd Markdown,功能较为全面而且能同步到云端，后续我会单独写一篇文对当前市面上大部分的Markdown编译器进行一个详细的对比评价。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建站历史-2</title>
      <link href="/LiYpoi.github.io/2019/05/04/%E5%BB%BA%E7%AB%99%E5%8E%86%E5%8F%B2-2/"/>
      <url>/LiYpoi.github.io/2019/05/04/%E5%BB%BA%E7%AB%99%E5%8E%86%E5%8F%B2-2/</url>
      
        <content type="html"><![CDATA[<ul><li>解决了文章无法显示标签和分类，问题出在Markdown文本中<code>tags:</code>，再一次被中英文符号坑了</li><li>解决文章摘要问题。</li><li>去除了页面左侧网易云音乐。</li><li>添加了站内到访数和页面访问量。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 建站历史 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书笔记-《黑客与画家》</title>
      <link href="/LiYpoi.github.io/2019/05/04/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/LiYpoi.github.io/2019/05/04/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>这篇文章是关于《黑客与画家》这本书的一些笔记和摘要。</p><p>书呆子们不受欢迎的原因在于他们脑子中想的其他的事情，这里“其他”是指他们并不热衷于大众、流行的事情，他们清楚的明白做这些事情并不能对自身有所提升，他们的注意力都放在读书或是观察世界上，而不是穿衣打扮、开晚会上面。</p><p>书呆子在学校中不受欢迎=受欺负。一般来说成年人不回去欺负书呆子 ，小孩子才会这样。其中原因，一方面是为了使自己感觉好些，你踩水时，水踩下去，你就会浮上来。同样，在任何社会等级制度中，那些对自己没自信的人就会通过欺负他们眼中的下等人来凸显自己地位。另一方面，欺负书呆子也与如何受欢迎有关。如何才能更受欢迎，除了个人魅力，考虑结盟是重要一点。没有什么比一个共同的敌人能使人们更团结了。</p><p>所以一群人的虐待远比一个人的虐待残酷的多。</p><p>事实上，最受欢迎的孩子并不需要踩在书呆子身上来垫高自己，大部分的欺负来自于处于下一等级的学生，那些数量庞大而处于焦虑的中间层。</p><p>书呆子并不是失败者，他们只是在玩着一个与众不同的游戏，一个更加接近真实世界的游戏，学校像是一个小型的人生，里面无所不包，但又不是世界真实的样子，它只是一个暂时的过程，只要你向前看，你就能超越它。</p><p>校园生活的真正问题是空虚，书呆子们过的却格外丰富。</p><p>如何去学习编程?正如画家学习绘画的方法主要是动手去画，黑客学习编程的方法也理应如此。大多数黑客不是通过大学课程学会编程的，他们从实践中学习。黑客通过实践学习编程这是一个标志，说明黑客与科学家的区别在于：科学家不会通过干活来学习科学，而是通过做实验和解题来学习，黑客出发点是原创，最终得到一个优美的</p><p>结果；而科学家的出发点是别人的优美的结果，最终得到原创性。</p><p>创作者另一个学习途径是通过范例。对画家来说，博物馆就是美术技巧的图书馆。同样的，黑客可以通过观看优秀的程序学会编程，不是看它们的执行结果，而是看它们的源代码。</p><p>在编程时，你不能盼望先有一个完美的规格设计，然后再动手编程，这样是不现实的。如果你预先承认规格设计是不完美的，在编程的时候，就可以根据需要当场修改规格，最总会有一个更好的结果。</p><p>伟大的画家对待自己每一份作品都一丝不苟，优秀的软件也要求对美的狂热追求，如果你查看优秀软件的内部，就会发现那些预料中没有人会看见的部分也是优美的。</p><p>黑客与画家一样，工作起来是有心理周期的，在工作时要去投入巨大的热情，其他不需要操心的琐碎事在厌倦的时候去做是一个不错的选择。</p><p>普通黑客与优秀黑客的所有区别之中，会不会“换位思考”可能是最总要的单个因素。判断一个人是否具备“换位思考”的能力有一个好方法，那就是看他怎么向没有技术背景的人解释技术问题。软件的部分功能就是解释自身，为了写出优秀的软件你必须假设用户对软件一无所知<del>他们不会看用户手册的</del>。程序是写给人看的，附带能在机器上运行。</p><h3 id="现在正是编程的黄金年代，编程到底能够有多酷，取决于我们能够用这种媒介做出怎样的工作"><a href="#现在正是编程的黄金年代，编程到底能够有多酷，取决于我们能够用这种媒介做出怎样的工作" class="headerlink" title="现在正是编程的黄金年代，编程到底能够有多酷，取决于我们能够用这种媒介做出怎样的工作!"></a>现在正是编程的黄金年代，编程到底能够有多酷，取决于我们能够用这种媒介做出怎样的工作!</h3><p>所谓“流行”本质上就是自己看不见自己的样子。否则就不会有流行了，对于那些被流行抓住的人，流行就不再是流行，而是应该要做的正确事情。只有保持一定的距离才能观察到人们观念的变化，发现流行（也就是人们自以为正确的事）到底是什么。</p><p>你如果想要清晰地思考，就必须远离人群。但走的越远，你的处境就会越困难，受到的阻力也会越大，应为你没有迎合社会习俗，而是一步步地与它背道而驰。小时候每个人都会鼓励你不断成长，但是很少有人鼓励你继续成长，变成一个怀疑和抵制社会错误潮流的人。如果自己就是潮水的一部分，怎么能看见潮流的方向？</p>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建站历史-1</title>
      <link href="/LiYpoi.github.io/2019/05/04/%E5%BB%BA%E7%AB%99%E5%8E%86%E5%8F%B2-1/"/>
      <url>/LiYpoi.github.io/2019/05/04/%E5%BB%BA%E7%AB%99%E5%8E%86%E5%8F%B2-1/</url>
      
        <content type="html"><![CDATA[<ul><li>添加字数统计和阅读时长</li><li><p>添加标签和分类功能</p></li><li><p>鼠标点击效果</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 建站历史 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/LiYpoi.github.io/2019/04/28/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/LiYpoi.github.io/2019/04/28/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="在踩坑中学习"><a href="#在踩坑中学习" class="headerlink" title="在踩坑中学习"></a>在踩坑中学习</h2><p>在4月28日的时候看着b站上的视频，一步一步将博客搭建部署起来，其中踩过的坑不计其数，git不怎么会用，面对dos界面中的各种error，简直是煎熬。当时也就停留在搭建一个框架了，终于等到五一劳动节，有大把时间可以完善博客后续的功能，添加主题，改图标背景，加头像，加音乐，看似几个简单的步骤，可就是有许多莫名其妙的error,查过的博客已经数不清了，查错的过程也算是历练的一种吧，现在把所有的坑踩完了，以后就不会踩了<del>（或许）</del>。</p><a id="more"></a><p>为什么要建这个博客？总结下来就八个字：积累自己，分享知识<br>将个人的学习心得记录下来，在初入这个专业的时候，我一直希望有一个人能够带带我，但是这种人太少了，知乎是个好东西，它让我这个普通的人看到了更大的世界，从生活到学习，知乎上的回答给了我很多帮助，上大学后，CSDN也对我影响不小。所以我总想着要做些什么，也能帮助他人，这个博客的内容如果对你有用，那将是我的荣幸了。</p>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
