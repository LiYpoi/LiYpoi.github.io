<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Thinking&amp;Coding</title>
  
  <subtitle>我们有很多的声音而没有真理，我们来自一个良心却各自藏起。</subtitle>
  <link href="/LiYpoi.github.io/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-06-03T10:22:22.995Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>LiY</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于利用时间的一些感悟</title>
    <link href="http://yoursite.com/2019/06/03/%E5%85%B3%E4%BA%8E%E5%88%A9%E7%94%A8%E6%97%B6%E9%97%B4%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%82%9F/"/>
    <id>http://yoursite.com/2019/06/03/关于利用时间的一些感悟/</id>
    <published>2019-06-03T09:01:20.000Z</published>
    <updated>2019-06-03T10:22:22.995Z</updated>
    
    <content type="html"><![CDATA[<p><em>童年时，我在经济上最大的误解是：人们通过高昂的薪水来致富。</em></p><p><em>这是错的：你变得富有，是因为你用有某种能够快速增值的东西。</em></p><p><em>它可能是商业、房地产、自然资源、知识产权，或其他什么东西–无论如何，你需要拥有它的权益，而非单靠出卖你的时间。</em></p><p>​                                                                                                                                   <em>—Same Altman</em></p><p>在成长中，我们被一直教导做一个努力的人，努力学习，进一个好学校，然后有一份好工作，努力工作。而其中<code>努力</code>一词被许多人误解为在某件事上花费大量时间，人们好像都热衷于做一些花费时间却又不怎么需要动脑的事，有时候比起思考，机械式的完成更让人舒适。</p><p>但你的<code>时间</code>真正的价值体现在哪里？时间的价值体现在你在这段时间中所做的事，它意味着成长、积累等等，它有着无限的可能性。将这份可能性只用于机械性的工作似乎是很不划算的，那么如何这份时间利用起来就是下面要说的了。</p><p><strong>尽量不做短期的事</strong></p><p>我们其实都知道，短期的事情给予的反馈一般微乎其微，长期经营才会有所回报。比如在英语学习上，我们明明知道这是一项需要长期积累长期学习才可以掌握的技能，却总是想着“三十天掌握XXX”的这种课程，我们感性中总是容易短视，总是把目光放在当前的任务上。</p><p>在心理学上，这种现象称为“时间贴现”。</p><p>用自己举例，以前我想着要好好背英语单词，于是制定了一个计划：每天背30个单词，执行了十几天后，计划失败了。失败的原因在于每天的作业量都不同，有时作业多，加上有一些计划之外的事发生，背单词这件事就被延期了，这种情况发生了几次后，于是计划也破产了。</p><p>这也是拖延症的前期症状，如何解决？</p><p>我觉得想要将一件事长期经营下来，并不是要强迫自己去完成它，而是要有去完成它的“趋势”。</p><p>什么是完成的“趋势”？我个人认为，完成的“趋势”是在主动的状态下要去做这件事。用我写博客这件事举个例子。我基本上每天都会写，它花费不了多长时间，我也不必要每次写多少实用的内容，哪怕每天只写一些个人的感悟随笔，我依然将这件事坚持了下去。</p><p>那么偶尔出现一些突发状况，该如何应对呢？</p><p><strong>搭建一个自运转的系统</strong></p><p>在遇到一个突发问题时，先不着急着手去解决，先去思考：这种问题会不会再次出现？</p><p>我们可以设计一套流程去解决相应问题，或者优化环节、减少步骤，来避免它再次出现。</p><p>比起遇到一件事就去解决一件事，这是一种更长期的视角，也更行之有效。</p><p><strong>延伸自己与世界的接触</strong></p><p>或者说拓宽自己的知识网络，在这个时代，比起专精一个领域，多方面的涉猎更为重要。当你接触的知识节点越多，你就越能把它们连接起来，构成一张网。成功的人有一个共同的特点：保持敏锐。</p><p>对一切新事物保持好奇心，不断去思考：它会带来什么？它意味着什么？它与我之间有什么关系？绝大多数的机会，都是从各种各样的“可能性”中孕育而生的。</p><p>所以为什么要倡导“终生学习”？其实重点不在于知识本身，而是通过学习，不断更新自己的知识触点，扩展自己的知识网络，保持对新事物的好奇心。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;童年时，我在经济上最大的误解是：人们通过高昂的薪水来致富。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;这是错的：你变得富有，是因为你用有某种能够快速增值的东西。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;它可能是商业、房地产、自然资源、知识产权，或其他什么东西–无论如何，你需要拥有它的
      
    
    </summary>
    
      <category term="Left" scheme="http://yoursite.com/categories/Left/"/>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>用CSS实现图片轮播</title>
    <link href="http://yoursite.com/2019/06/02/%E7%94%A8CSS%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E8%BD%AE%E6%92%AD/"/>
    <id>http://yoursite.com/2019/06/02/用CSS实现图片轮播/</id>
    <published>2019-06-02T12:47:15.000Z</published>
    <updated>2019-06-02T13:15:47.648Z</updated>
    
    <content type="html"><![CDATA[<p>在之前的多媒体作业中为了使banner区的图片不呆板，用CSS实现的对图片的轮播效果，虽然用JS也可以实现，但这对<code>margin</code>的作用也算是一种新的了解。</p><p><strong>效果</strong></p><p><img src="https://i.loli.net/2019/06/02/5cf3c6903235c24426.gif" alt="xiaoguo"></p><p><strong>CSS部分</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#container</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">            <span class="attribute">overflow</span>: hidden;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-id">#photo</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">2400px</span>;</span><br><span class="line">            <span class="attribute">animation</span>: switch <span class="number">10s</span> ease-out infinite;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-id">#photo</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">            <span class="attribute">float</span>: left;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @<span class="keyword">keyframes</span> switch &#123;</span><br><span class="line">            0%,25%&#123;</span><br><span class="line">                <span class="attribute">margin-left</span>: <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          35%,60% &#123;</span><br><span class="line">                <span class="attribute">margin-left</span>: -<span class="number">800px</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            70%,100%&#123;</span><br><span class="line">                <span class="attribute">margin-left</span>: -<span class="number">1600px</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><strong>HTML部分</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"photo"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"imageli/banner1.png"</span> <span class="attr">alt</span>=<span class="string">"樱花节"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"imageli/banner2.png"</span> <span class="attr">alt</span>=<span class="string">"樱花节"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"imageli/banner3.png"</span> <span class="attr">alt</span>=<span class="string">"樱花节"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实现的关键在于<code>@keyframes</code>定义关键帧中<code>margin-left</code>,可以看出来，第二个和第三个<code>margin-left</code>的值为负，在网页的世界中，默认的文档流是水平方向的，当<code>margin-left</code>的值为负时，会使对应的标签向左缩进，从代码中可以看出，图片从0px开始变换了三次到1600px,每一次减少800px，而所加的三张图片的<code>width</code>都为800px,所以图片向左缩进，最终实现了轮播的效果。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在之前的多媒体作业中为了使banner区的图片不呆板，用CSS实现的对图片的轮播效果，虽然用JS也可以实现，但这对&lt;code&gt;margin&lt;/code&gt;的作用也算是一种新的了解。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;效果&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;htt
      
    
    </summary>
    
      <category term="Study" scheme="http://yoursite.com/categories/Study/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>HTML5之Canvas动画制作架构</title>
    <link href="http://yoursite.com/2019/06/01/HTML5%E4%B9%8BCanvas%E5%8A%A8%E7%94%BB%E5%88%B6%E4%BD%9C%E6%9E%B6%E6%9E%84/"/>
    <id>http://yoursite.com/2019/06/01/HTML5之Canvas动画制作架构/</id>
    <published>2019-06-01T09:21:49.000Z</published>
    <updated>2019-06-01T09:25:50.309Z</updated>
    
    <content type="html"><![CDATA[<p>Animation</p><p>使用<code>setlnterval</code>架构逐帧动画</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">setlnterval(</span><br><span class="line">function()&#123;      //匿名函数表示在每一帧的时候做什么事情</span><br><span class="line">render();    //绘制当前画面</span><br><span class="line">update();    //根据画面所需的数据结构，对数据结构进行调整</span><br><span class="line">&#125;,</span><br><span class="line">50              //传入时间，单位毫秒，控制动画帧率，表示每隔多长时间执行一次匿名函数</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Animation&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;setlnterval&lt;/code&gt;架构逐帧动画&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line
      
    
    </summary>
    
      <category term="Study" scheme="http://yoursite.com/categories/Study/"/>
    
    
      <category term="Canvas" scheme="http://yoursite.com/tags/Canvas/"/>
    
  </entry>
  
  <entry>
    <title>Canvas画弧线和圆</title>
    <link href="http://yoursite.com/2019/05/30/Canvas%E7%94%BB%E5%BC%A7%E7%BA%BF%E5%92%8C%E5%9C%86/"/>
    <id>http://yoursite.com/2019/05/30/Canvas画弧线和圆/</id>
    <published>2019-05-30T08:46:01.000Z</published>
    <updated>2019-05-30T09:14:14.457Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line">        <span class="keyword">var</span> context = canvas.getContext(<span class="string">"2d"</span>) </span><br><span class="line">        context.lineWidth =<span class="number">5</span></span><br><span class="line">        context.strokeStyle = <span class="string">"#005588"</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="number">10</span>  ; i ++)&#123;</span><br><span class="line">            </span><br><span class="line">            context.beginPath()</span><br><span class="line">            context.arc(<span class="number">50</span> + i*<span class="number">100</span>,<span class="number">60</span>,<span class="number">40</span>,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI*(i+<span class="number">1</span>)/<span class="number">10</span>) </span><br><span class="line">            <span class="comment">//第六个参数描述绘图的顺序，默认false逆时针，true顺时针</span></span><br><span class="line">            context.closePath()</span><br><span class="line">            <span class="comment">// 当绘制的图形不是封闭的时，closePath（）会自动将图形的首位连接起来</span></span><br><span class="line">            context.stroke()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="number">10</span>  ; i ++)&#123;</span><br><span class="line">            context.beginPath()</span><br><span class="line">            context.arc(<span class="number">50</span> + i*<span class="number">100</span>,<span class="number">180</span>,<span class="number">40</span>,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI*(i+<span class="number">1</span>)/<span class="number">10</span>)</span><br><span class="line">            <span class="comment">//context.closePath()/* 当绘制的图形不是封闭的时，closePath（）会自动将图形的首尾连接起来*/</span></span><br><span class="line">            context.stroke()<span class="comment">/* 此时图形的首尾不相连*/</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/05/30/5cef9dd95a86e53188.png" alt="2"></p><p>Canvas画圆的参数</p><p><img src="https://i.loli.net/2019/05/30/5cef9e567e93454885.png" alt="4"></p><p><img src="https://i.loli.net/2019/05/30/5cef9dfc7b1f613603.png" alt="5"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
      <category term="Study" scheme="http://yoursite.com/categories/Study/"/>
    
    
      <category term="Canvas" scheme="http://yoursite.com/tags/Canvas/"/>
    
  </entry>
  
  <entry>
    <title>创建Canvas以及画条线</title>
    <link href="http://yoursite.com/2019/05/30/%E5%88%9B%E5%BB%BACanvas%E4%BB%A5%E5%8F%8A%E7%94%BB%E6%9D%A1%E7%BA%BF/"/>
    <id>http://yoursite.com/2019/05/30/创建Canvas以及画条线/</id>
    <published>2019-05-30T08:45:07.000Z</published>
    <updated>2019-05-30T09:32:39.664Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Canvas的历史"><a href="#Canvas的历史" class="headerlink" title="Canvas的历史"></a>Canvas的历史</h2><p>这个 HTML 元素是为了客户端矢量图形而设计的。它自己没有行为，但却把一个绘图 API 展现给客户端 JavaScript 以使脚本能够把想绘制的东西都绘制到一块画布上。要从同一图形的一个 canvas标记中移除元素，往往需要擦掉绘图重新绘制它，大多数 Canvas 绘图 API 都没有定义在 canvas元素本身上，而是定义在通过画布的 <a href="http://www.w3school.com.cn/jsref/met_canvas_getcontext.asp" target="_blank" rel="noopener">getContext() 方法</a>获得的一个“绘图环境”对象上。Canvas API 也使用了路径的表示法。但是，路径由一系列的方法调用来定义，而不是描述为字母和数字的字符串，比如调用 beginPath() 和 arc() 方法。一旦定义了路径，其他的方法，如 fill()，都是对此路径操作。绘图环境的各种属性，比如 fillStyle，说明了这些操作如何使用。</p><p><strong>注释：</strong>Canvas API 非常紧凑的一个原因上它没有对绘制文本提供任何支持。要把文本加入到一个 canvas图形，必须要么自己绘制它再用位图图像合并它，或者在canvas上方使用 CSS 定位来覆盖 HTML 文本。<strong>Canvas中的绘图使一种状态绘图，首先要进行状态设置，然后调用函数绘制，画布的设置中，以左上角为圆点，向右为X轴正方向。向下为Y轴正方向，canvas的绘制是基于状态的。</strong></p><hr><h2 id="写法"><a href="#写法" class="headerlink" title="写法"></a>写法</h2><p>Canvas</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HTML</span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Javascript</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cnavas=<span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> context=canvas.getContext(<span class="string">'2d'</span>)<span class="comment">//获得绘图环境,context提供了绘图的接口</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用canvas进行绘制</span></span><br></pre></td></tr></table></figure><h2 id="画一条线"><a href="#画一条线" class="headerlink" title="画一条线"></a>画一条线</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">context.beginPath()</span><br><span class="line">        context.moveTo(100,100) /*线的起点*/</span><br><span class="line">        context.lineTo(700,700)/*线的终点*/</span><br><span class="line">        context.lineTo(100,700)</span><br><span class="line">        context.lineTo(100,100)</span><br><span class="line">        context.closePath()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        context.lineWidth=5 /*线条宽度*/</span><br><span class="line">        context.strokeStyle="#66ccff"/*线条样式，主要是指线条的颜色*/</span><br><span class="line">        context.stroke()   /*stroke是笔画的意思，在Canvas中用来画线条*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        context.fillStyle="rgb(2,100,30)"/* 对多边形进行颜色填充*/</span><br><span class="line">        context.fill()</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/05/30/5cef9b1fb5ebd44215.png" alt="1"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用context.beginPath()和context.closePath()使两个路径分开,beginPath（）和closePath（）不一定要同时出现，beginPath（）代表规划一个路径，closePath（）表四结束当前的路径，如果当前的路径没有封闭上，就会让当前的路径封闭上。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Canvas的历史&quot;&gt;&lt;a href=&quot;#Canvas的历史&quot; class=&quot;headerlink&quot; title=&quot;Canvas的历史&quot;&gt;&lt;/a&gt;Canvas的历史&lt;/h2&gt;&lt;p&gt;这个 HTML 元素是为了客户端矢量图形而设计的。它自己没有行为，但却把一个绘图 A
      
    
    </summary>
    
      <category term="Study" scheme="http://yoursite.com/categories/Study/"/>
    
    
      <category term="Canvas" scheme="http://yoursite.com/tags/Canvas/"/>
    
  </entry>
  
  <entry>
    <title>随笔</title>
    <link href="http://yoursite.com/2019/05/29/%E9%9A%8F%E7%AC%94-3/"/>
    <id>http://yoursite.com/2019/05/29/随笔-3/</id>
    <published>2019-05-29T12:18:10.000Z</published>
    <updated>2019-05-29T12:18:10.458Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Git标签</title>
    <link href="http://yoursite.com/2019/05/28/Git%E6%A0%87%E7%AD%BE/"/>
    <id>http://yoursite.com/2019/05/28/Git标签/</id>
    <published>2019-05-28T09:25:09.000Z</published>
    <updated>2019-05-28T09:33:16.073Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git标签"><a href="#Git标签" class="headerlink" title="Git标签"></a>Git标签</h2><p>我们可以用 git tag -a v1.0 命令给最新一次提交打上（HEAD）”v1.0”的标签。</p><p>-a 选项意为”创建一个带注解的标签”。 不用 -a 选项也可以执行的，但它不会记录这标签是啥时候打的，谁打的，也不会让你添加个标签的注解。 我推荐一直创建带注解的标签。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -a v1.0</span><br></pre></td></tr></table></figure><p>当你执行 git tag -a 命令时，Git 会打开你的编辑器，让你写一句标签注解，就像你给提交写注解一样。</p><p>现在，注意当我们执行 git log –decorate 时，我们可以看到我们的标签了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git log --oneline --decorate --graph</span><br><span class="line">*   88afe0e (HEAD, tag: v1.0, master) Merge branch &apos;change_site&apos;</span><br></pre></td></tr></table></figure><p>如果我们要查看所有标签可以使用以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git tag</span><br><span class="line">v0.9</span><br><span class="line">v1.0</span><br></pre></td></tr></table></figure><p>指定标签信息命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -a &lt;tagname&gt; -m &quot;标签&quot;</span><br></pre></td></tr></table></figure><p>PGP签名标签命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -s &lt;tagname&gt; -m &quot;标签&quot;</span><br></pre></td></tr></table></figure><p>如果我们忘了给某个提交打标签，又将它发布了，我们可以给它追加标签。例如，假设我们发布了提交 85fc7e7，但是那时候忘了给它打标签。 我们现在也可以：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -a v0.9 85fc7e7</span><br></pre></td></tr></table></figure><hr><p><strong>更多有关Git的操作见<a href="https://www.w3cschool.cn/git/?" target="_blank" rel="noopener">git手册</a>。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Git标签&quot;&gt;&lt;a href=&quot;#Git标签&quot; class=&quot;headerlink&quot; title=&quot;Git标签&quot;&gt;&lt;/a&gt;Git标签&lt;/h2&gt;&lt;p&gt;我们可以用 git tag -a v1.0 命令给最新一次提交打上（HEAD）”v1.0”的标签。&lt;/p&gt;
&lt;p&gt;-
      
    
    </summary>
    
      <category term="Study" scheme="http://yoursite.com/categories/Study/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>分支管理</title>
    <link href="http://yoursite.com/2019/05/28/%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/"/>
    <id>http://yoursite.com/2019/05/28/分支管理/</id>
    <published>2019-05-28T09:02:44.000Z</published>
    <updated>2019-05-28T09:19:35.289Z</updated>
    
    <content type="html"><![CDATA[<h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><h4 id="列出分支"><a href="#列出分支" class="headerlink" title="列出分支"></a>列出分支</h4><p>列出分支基本命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><p>没有参数时，git branch 会列出你在本地的分支。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* master</span><br></pre></td></tr></table></figure><p>此例的意思就是，我们有一个叫做”master”的分支，并且该分支是当前分支。</p><p>当你执行 git init 的时候，缺省情况下 Git 就会为你创建”master”分支。</p><p>如果我们要手动创建一个分支，并切换过去。执行 git branch (branchname) 即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git branch testing</span><br><span class="line">$ git branch</span><br><span class="line">* master</span><br><span class="line">  testing</span><br></pre></td></tr></table></figure><p>现在我们可以看到，有了一个新分支 testing。</p><h4 id="合并冲突"><a href="#合并冲突" class="headerlink" title="合并冲突"></a>合并冲突</h4><p>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。</p><p>解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。</p><p>用<code>git log --graph</code>命令可以看到分支合并图。</p><p>合并分支时，加上<code>--no-ff</code>参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而<code>fast forward</code>合并就看不出来曾经做过合并。</p><h4 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h4><p>使用<code>git log</code>查看提交历史</p><p><img src="https://i.loli.net/2019/05/28/5cecfbe67adcd44419.png" alt="tijiao"></p><p>可以用<code>git log --oneline</code>选项来查看历史记录的简洁的版本。</p><p>我们还可以用<code>git log --oneline --graph</code>选项，查看历史中什么时候出现了分支，合并。</p><p>也可以用’–reverse’参数来逆向显示所有日志。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log --reverse --oneline</span><br></pre></td></tr></table></figure><p>如果只想查找指定用户的提交日志可以使用命令：git log –author，例如，比方说要找Git源码中Linus提交的部分：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log --author = Linus</span><br></pre></td></tr></table></figure><p>如果你要指定日期，可以执行几个选项： - 因为和–before，但是你也可以用–until和–after。</p><p>例如，如果我要看Git项目中三周前且在四月十八日之后的所有提交，我可以执行这个（我还用了–no-merges选项以隐藏合并提交）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log --oneline --before = &#123;3.weeks.ago&#125; --after = &#123;2010-04-18&#125; --no-merges</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;分支管理&quot;&gt;&lt;a href=&quot;#分支管理&quot; class=&quot;headerlink&quot; title=&quot;分支管理&quot;&gt;&lt;/a&gt;分支管理&lt;/h3&gt;&lt;h4 id=&quot;列出分支&quot;&gt;&lt;a href=&quot;#列出分支&quot; class=&quot;headerlink&quot; title=&quot;列出分支&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="Study" scheme="http://yoursite.com/categories/Study/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>创建分支与合并分支</title>
    <link href="http://yoursite.com/2019/05/27/%E5%88%9B%E5%BB%BA%E5%88%86%E6%94%AF%E4%B8%8E%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF/"/>
    <id>http://yoursite.com/2019/05/27/创建分支与合并分支/</id>
    <published>2019-05-27T11:49:36.000Z</published>
    <updated>2019-05-27T12:04:19.246Z</updated>
    
    <content type="html"><![CDATA[<p>查看分支：<code>git branch</code></p><p>创建分支：<code>git branch &lt;name&gt;</code></p><p>切换分支：<code>git checkout &lt;name&gt;</code></p><p>创建+切换分支：<code>git checkout -b &lt;name&gt;</code></p><p>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></p><p>删除分支：<code>git branch -d &lt;name&gt;</code></p><hr><p>创建一个text的分支,并且切换到text分支：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b text</span><br><span class="line">Switched to a new branch &apos;text&apos;</span><br></pre></td></tr></table></figure><p>然后，用<code>git branch</code>命令查看当前分支：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* text</span><br><span class="line">  master</span><br></pre></td></tr></table></figure><p><code>git branch</code>命令会列出所有分支，当前分支前面会标一个<code>*</code>号。</p><p>然后可以在分支上进行工作,然后提交上去。提交完后切换到<code>master</code>分支：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">Switched to branch &apos;master&apos;</span><br></pre></td></tr></table></figure><p>此时查看修改的文件发现添加的内容消失了，这是因为之前的提交是在<code>text</code>分支上，而<code>master</code>分支的提交点没有变。</p><p>使用<code>git merge</code>命令用于合并指定分支到当前分支。合并后，再查看修改目标文件的内容，就可以看到，和<code>text</code>分支的最新提交是完全一样的。</p><p>合并完成后，就可以放心地删除<code>text</code>分支了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d text</span><br><span class="line">Deleted branch text (was b17d20e).</span><br></pre></td></tr></table></figure><p>删除后，查看<code>branch</code>，就只剩下<code>master</code>分支了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* master</span><br></pre></td></tr></table></figure><p>因为创建、合并和删除分支非常快，所以Git鼓励使用分支完成某个任务，合并后再删掉分支，这和直接在<code>master</code>分支上工作效果是一样的，但过程更安全。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;查看分支：&lt;code&gt;git branch&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;创建分支：&lt;code&gt;git branch &amp;lt;name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;切换分支：&lt;code&gt;git checkout &amp;lt;name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;创
      
    
    </summary>
    
      <category term="Study" scheme="http://yoursite.com/categories/Study/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>远程仓库</title>
    <link href="http://yoursite.com/2019/05/27/%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/"/>
    <id>http://yoursite.com/2019/05/27/远程仓库/</id>
    <published>2019-05-27T11:37:11.000Z</published>
    <updated>2019-05-27T11:45:55.905Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、添加远程仓库"><a href="#一、添加远程仓库" class="headerlink" title="一、添加远程仓库"></a>一、添加远程仓库</h3><p>所使用的远程仓库是<strong>GitHub</strong>，要关联一个远程库，使用命令<code>git remote add origin git@server-name:path/repo-name.git</code>；</p><p>关联后，使用命令<code>git push -u origin master</code>第一次推送master分支的所有内容；</p><p>此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改；</p><p>分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步。</p><h3 id="二、远程仓库克隆"><a href="#二、远程仓库克隆" class="headerlink" title="二、远程仓库克隆"></a>二、远程仓库克隆</h3><p>要克隆一个仓库，首先必须知道仓库的地址，然后使用<code>git clone</code>命令克隆。</p><p>Git支持多种协议，包括<code>https</code>，但通过<code>ssh</code>支持的原生<code>git</code>协议速度最快。</p><p>在多个人协作开发时，每个人各自从远程克隆一份就可以了。</p><p>GitHub给出的地址不止一个，还可以<code>https://github.com/XXXXX/XXXXX.git</code>这样的地址。实际上，Git支持多种协议，默认的<code>git://</code>使用ssh，但也可以使用<code>https</code>等其他协议。</p><p>使用<code>https</code>除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用<code>ssh</code>协议而只能用<code>https</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、添加远程仓库&quot;&gt;&lt;a href=&quot;#一、添加远程仓库&quot; class=&quot;headerlink&quot; title=&quot;一、添加远程仓库&quot;&gt;&lt;/a&gt;一、添加远程仓库&lt;/h3&gt;&lt;p&gt;所使用的远程仓库是&lt;strong&gt;GitHub&lt;/strong&gt;，要关联一个远程库，使用命令
      
    
    </summary>
    
      <category term="Study" scheme="http://yoursite.com/categories/Study/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>撤销修改与删除文件</title>
    <link href="http://yoursite.com/2019/05/26/%E6%92%A4%E9%94%80%E4%BF%AE%E6%94%B9%E4%B8%8E%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2019/05/26/撤销修改与删除文件/</id>
    <published>2019-05-26T09:38:37.000Z</published>
    <updated>2019-05-26T09:51:00.679Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、撤销修改"><a href="#一、撤销修改" class="headerlink" title="一、撤销修改"></a>一、撤销修改</h3><p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。让这个文件回到最近一次<code>git commit</code>或<code>git add</code>时的状态。</p><p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD &lt;file&gt;</code>，就回到了场景1，第二步按场景1操作。<code>git reset</code>命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用<code>HEAD</code>时，表示最新的版本。</p><p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本退会一文，不过前提是没有推送到远程库。</p><h3 id="二、删除文件"><a href="#二、删除文件" class="headerlink" title="二、删除文件"></a>二、删除文件</h3><p>命令<code>git rm</code>用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失<strong>最近一次提交后你修改的内容</strong>。</p><p>如果删错了文件，使用<code>$ git checkout -- 目标文件</code>可以将误删的文件恢复到最新的版本，<code>git checkout</code>其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</p><p><strong><code>注意：从来没有被添加到版本库就被删除的文件，是无法恢复的！</code></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、撤销修改&quot;&gt;&lt;a href=&quot;#一、撤销修改&quot; class=&quot;headerlink&quot; title=&quot;一、撤销修改&quot;&gt;&lt;/a&gt;一、撤销修改&lt;/h3&gt;&lt;p&gt;场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令&lt;code&gt;git checkout
      
    
    </summary>
    
      <category term="Study" scheme="http://yoursite.com/categories/Study/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>网页配色方案</title>
    <link href="http://yoursite.com/2019/05/26/%E7%BD%91%E9%A1%B5%E9%85%8D%E8%89%B2%E6%96%B9%E6%A1%88/"/>
    <id>http://yoursite.com/2019/05/26/网页配色方案/</id>
    <published>2019-05-26T08:52:41.000Z</published>
    <updated>2019-05-26T09:13:58.572Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、Flat-UI色表"><a href="#一、Flat-UI色表" class="headerlink" title="一、Flat UI色表"></a>一、Flat UI色表</h3><p>最常用的方法就是在<a href="http://designmodo.github.io/Flat-UI/" target="_blank" rel="noopener">Flat UI官网</a>找配色。</p><p><img src="https://i.loli.net/2019/05/26/5cea55516f26153359.png" alt="色图"></p><p>对于简单的网页配色已经够用了。</p><p><img src="https://i.loli.net/2019/05/26/5cea55f957e6f59817.png" alt="setu"></p><p>还提供一些网页元素的配色方案。</p><h3 id="二、配色的经典方案"><a href="#二、配色的经典方案" class="headerlink" title="二、配色的经典方案"></a>二、配色的经典方案</h3><p><a href="https://docs.sendwithses.com/random-stuff/easy-to-remember-color-guide-for-non-designers" target="_blank" rel="noopener">原文</a></p><h4 id="1-网页主题色"><a href="#1-网页主题色" class="headerlink" title="1.网页主题色"></a>1.网页主题色</h4><p>深颜色使用<code>c</code>、<code>f</code>、<code>6</code>、<code>9</code>这四个字符，组合成RGB色值</p><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019031608.jpg" alt="lizi"></p><p>紫罗兰色，靛蓝色，蓝色，绿色。</p><p><img src="https://blobscdn.gitbook.com/v0/b/gitbook-28427.appspot.com/o/assets%2F-LUFI_-_gHZ4pIVzoRlq%2F-L_bOd9rj2aX7LMVYlPE%2F-L_bfI-npsXbpu-N2oQS%2FYOOR.png?alt=media&amp;token=f00c3544-2239-487f-a67a-0e45c5952691" alt="lizi2"></p><p>黄色，橙色，另一种橙色，红色。</p><p>淡颜色使用<code>a</code>、<code>b</code>、<code>c</code>、<code>d</code>、<code>e</code>、<code>f</code>这六个字符，组合生成 RGB 色值。</p><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019031610.jpg" alt="lizi3"></p><h4 id="2-文本颜色"><a href="#2-文本颜色" class="headerlink" title="2.文本颜色"></a>2.文本颜色</h4><p>文字最好不要使用全黑，而是使用深蓝色，可以从下面几种颜色挑。<code>1a2a3a</code>最深，<code>2a3a4a</code>次之，<code>7a8a9a</code>最浅。</p><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019031611.jpg" alt="lizi4"></p><h4 id="3-背景色、阴影色、边框色"><a href="#3-背景色、阴影色、边框色" class="headerlink" title="3.背景色、阴影色、边框色"></a>3.背景色、阴影色、边框色</h4><p>背景色、阴影色、边框色都属于衬托，建议使用灰色，可以从<code>aaaaa</code>、<code>bbbbbb</code>、<code>cccccc</code>、<code>dddddd</code>这四个色值挑选。</p><p><img src="https://blobscdn.gitbook.com/v0/b/gitbook-28427.appspot.com/o/assets%2F-LUFI_-_gHZ4pIVzoRlq%2F-L_bOd9rj2aX7LMVYlPE%2F-L_bngDe3TB8V2KdsQ6L%2FGREYS.png?alt=media&amp;token=b66786d6-d154-4af0-97ff-ba1a0ee449de" alt="lizi5"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、Flat-UI色表&quot;&gt;&lt;a href=&quot;#一、Flat-UI色表&quot; class=&quot;headerlink&quot; title=&quot;一、Flat UI色表&quot;&gt;&lt;/a&gt;一、Flat UI色表&lt;/h3&gt;&lt;p&gt;最常用的方法就是在&lt;a href=&quot;http://designmod
      
    
    </summary>
    
      <category term="Study" scheme="http://yoursite.com/categories/Study/"/>
    
    
      <category term="网页设计" scheme="http://yoursite.com/tags/%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>Git管理修改</title>
    <link href="http://yoursite.com/2019/05/24/Git%E7%AE%A1%E7%90%86%E4%BF%AE%E6%94%B9/"/>
    <id>http://yoursite.com/2019/05/24/Git管理修改/</id>
    <published>2019-05-24T14:02:57.000Z</published>
    <updated>2019-05-24T14:04:25.502Z</updated>
    
    <content type="html"><![CDATA[<p>Git比其他版本控制器优秀的原因在于，Git跟踪并管理的是修改，而不是文件。</p><p>在对目标文件进行一个修改后<code>git add</code>,然后再次修改文件，提交<code>$git commit -m &quot;修改说明&quot;</code>。</p><p>提交之后使用<code>$git status</code>查看状态。 会发现第二次的修改并没有提交。</p><p>回顾一下操作过程：第一次修改-&gt;<code>git add</code>-&gt;第二次修改-&gt;<code>git commit</code></p><p>在使用<code>git add</code>后，在工作区的第一次修改被放在<strong>暂存区</strong>，准备提交，但是，在工作区的<strong>第二次修改并没有放入暂存区</strong>，所以，<code>git commit</code>只负责把暂存区的修改提交了，第二次不会被提交。</p><p>如何提交第二次修改呢？</p><p>可以继续<code>git add</code> 再<code>git commit</code>，或进行两次修改后再<code>git add</code>,然后<code>git commit</code>,相当于把两次修改合并后一起提交了。</p><p><strong>每次修改，如果不用<code>git add</code>到暂存区。那就不会加入到<code>commit</code>中。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Git比其他版本控制器优秀的原因在于，Git跟踪并管理的是修改，而不是文件。&lt;/p&gt;
&lt;p&gt;在对目标文件进行一个修改后&lt;code&gt;git add&lt;/code&gt;,然后再次修改文件，提交&lt;code&gt;$git commit -m &amp;quot;修改说明&amp;quot;&lt;/code&gt;。&lt;
      
    
    </summary>
    
      <category term="Study" scheme="http://yoursite.com/categories/Study/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>用HTML标签为汉字加拼音</title>
    <link href="http://yoursite.com/2019/05/24/%E7%94%A8HTML%E6%A0%87%E7%AD%BE%E4%B8%BA%E6%B1%89%E5%AD%97%E5%8A%A0%E6%8B%BC%E9%9F%B3/"/>
    <id>http://yoursite.com/2019/05/24/用HTML标签为汉字加拼音/</id>
    <published>2019-05-24T12:45:42.000Z</published>
    <updated>2019-05-24T13:08:28.551Z</updated>
    
    <content type="html"><![CDATA[<p>在知乎上看到的，一个没有什么用但有趣的小知识。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>拼音<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ruby</span>&gt;</span>拼音<span class="tag">&lt;<span class="name">rt</span>&gt;</span>pingyin<span class="tag">&lt;/<span class="name">rt</span>&gt;</span><span class="tag">&lt;/<span class="name">ruby</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果是这样的：</p><p><img src="https://i.loli.net/2019/05/24/5ce7e9301614927314.png" alt="运行结果"></p><p>但是可以看出拼音和汉字不是一一对应的，因为拼音的长度不是固定的。想要实现对其可以一字一字拼了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>拼音<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ruby</span>&gt;</span>一<span class="tag">&lt;<span class="name">rt</span>&gt;</span><span class="tag">&lt;/<span class="name">rt</span>&gt;</span>yi<span class="tag">&lt;/<span class="name">ruby</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ruby</span>&gt;</span>字<span class="tag">&lt;<span class="name">rt</span>&gt;</span><span class="tag">&lt;/<span class="name">rt</span>&gt;</span>zi<span class="tag">&lt;/<span class="name">ruby</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ruby</span>&gt;</span>一<span class="tag">&lt;<span class="name">rt</span>&gt;</span><span class="tag">&lt;/<span class="name">rt</span>&gt;</span>yi<span class="tag">&lt;/<span class="name">ruby</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ruby</span>&gt;</span>拼<span class="tag">&lt;<span class="name">rt</span>&gt;</span><span class="tag">&lt;/<span class="name">rt</span>&gt;</span>pin<span class="tag">&lt;/<span class="name">ruby</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果是这样的：</p><p><img src="https://i.loli.net/2019/05/24/5ce7eb144792c88816.png" alt="结果"></p><p>可是这种拼音是没有声调的，这是输入法的问题，我使用的微软输入法不能输入带有音调的字母，想要加上声调，就下个X狗输入法吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在知乎上看到的，一个没有什么用但有趣的小知识。&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
      <category term="Study" scheme="http://yoursite.com/categories/Study/"/>
    
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>这一切的开始</title>
    <link href="http://yoursite.com/2019/05/23/%E9%9A%8F%E7%AC%94-2/"/>
    <id>http://yoursite.com/2019/05/23/随笔-2/</id>
    <published>2019-05-23T11:58:53.000Z</published>
    <updated>2019-05-23T12:51:06.477Z</updated>
    
    <content type="html"><![CDATA[<p>今天在浏览阮大的博客时想了很多。当初为什么要写博客？以前只知道博客是什么，但从来没有想过会去写，我自认为自己一直是一个特别任性的人，做事只做自己喜欢的，像博客这种费劲的东西在以前我是不会想着搞的。</p><p>直到有一次看到这么一段话：“你天天打游戏，我问你，你还记得5天前你玩的这个游戏时赢了还是输了？用的什么英雄？最后的比分是多少？你每天就像打游戏一样过活，大学四年过去了，你还记得四年了每一天干了什么事吗？”当时我就想了，我应该做些什么事去将过去的东西积累沉淀一下。</p><p>德国哲学家海德格尔说过一句著名的话：人应该”向死而生”（Being-toward-death）。意思是人面对死亡，才会停止那些无谓琐碎的关注和困扰，体会到什么是重要的事情，从而达到真正的存在。</p><p>我应该想着前看了，那样也许才能找到前进的方向。</p><p>仔细想想当初为什么要选计算机专业？我自认为自己与计算机也没有什么不解之缘，只知道一句“富学金融，穷学IT”，可这好像也不是选择的理由。</p><p>就这样我不清不楚的选择了这个专业。</p><p>说实话，我对这个专业还是很有兴趣的，但是我究竟是喜欢编程这件事还是喜欢编程后的结果所带来的成就感，这两点我现在还没有搞明白。这两件事也许没有什么本质上的区别吧。</p><p>在一年的大学生活里，我发现主要的核心课程其实能很快学完，很多课程是浪费时间，我个人最讨厌非我主观意愿下的浪费时间。所以我开始学习其他的“旁门左道”来消遣我的时间。</p><p>加了一个PPT社群，搭建了自己的博客，开始学Git，在HTML和CSS上较为深入的学习了一下。以后的打算：将博客坚持写下去，将HTML5和CSS3系统学习一下，把Git学完，学ejs、js做一个hexo的主题，假期提前学Java，或许再会找几门网课学些旁门左道,这就牵扯到将来的计划了。</p><p>我只能说目前还是没有一个清楚的大方向，只能看到什么感兴趣的就去学什么。</p><p>感谢一下互联网，互联网将教育的自主权，交到了每个人自己的手里，我才能有各种学习的渠道，了解了更多的事。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天在浏览阮大的博客时想了很多。当初为什么要写博客？以前只知道博客是什么，但从来没有想过会去写，我自认为自己一直是一个特别任性的人，做事只做自己喜欢的，像博客这种费劲的东西在以前我是不会想着搞的。&lt;/p&gt;
&lt;p&gt;直到有一次看到这么一段话：“你天天打游戏，我问你，你还记得5天
      
    
    </summary>
    
      <category term="Life" scheme="http://yoursite.com/categories/Life/"/>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>随笔</title>
    <link href="http://yoursite.com/2019/05/23/%E9%9A%8F%E7%AC%94-1/"/>
    <id>http://yoursite.com/2019/05/23/随笔-1/</id>
    <published>2019-05-23T11:37:25.000Z</published>
    <updated>2019-05-23T11:58:08.450Z</updated>
    
    <content type="html"><![CDATA[<p>今天刷着知乎，偶尔发现一个名字：阮一峰，突然感觉很熟悉，搜索了一下这个人，“中国第一的bloger”、”在阿里任职”，这几个都不是主要的，主要的是《黑客与画家》竟然是由他翻译的！之前在看书时一直没留意过译者是谁，而且《未来世界的幸存者》也是由他所写。</p><p>在浏览了阮大的博客后，我对“斜杠青年”这词有了新的认识，什么是斜杆青年啊，阮大才是真正的斜杆青年啊。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天刷着知乎，偶尔发现一个名字：阮一峰，突然感觉很熟悉，搜索了一下这个人，“中国第一的bloger”、”在阿里任职”，这几个都不是主要的，主要的是《黑客与画家》竟然是由他翻译的！之前在看书时一直没留意过译者是谁，而且《未来世界的幸存者》也是由他所写。&lt;/p&gt;
&lt;p&gt;在浏览了
      
    
    </summary>
    
      <category term="Life" scheme="http://yoursite.com/categories/Life/"/>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Git提交远程报错</title>
    <link href="http://yoursite.com/2019/05/23/git%E6%8F%90%E4%BA%A4%E8%BF%9C%E7%A8%8B%E6%8A%A5%E9%94%99/"/>
    <id>http://yoursite.com/2019/05/23/git提交远程报错/</id>
    <published>2019-05-23T10:00:26.000Z</published>
    <updated>2019-05-23T10:46:49.866Z</updated>
    
    <content type="html"><![CDATA[<p>在之前用<code>git push -u origin master</code>时，会出现这种错误：</p><p><img src="https://i.loli.net/2019/05/23/5ce671044b66746735.png" alt="错误1"></p><p>原因在于第一次在Github中<code>learn-Git</code>仓库里创建的Markdown文件不在本地代码目录中。</p><p>之前在出现此错误时，直接使用了<code>git push -f</code>命令强制推送，但会影响<code>commit</code>历史。</p><p>解决办法：使用<code>git pull --rebase origin master</code>进行合并，合并之后再使用<code>git push origin master</code>推上去</p><p><img src="https://i.loli.net/2019/05/23/5ce6732574d6d19488.png" alt="解决"></p><p>对Git的一些命令了解的还不是特别透彻。</p><p><code>git push origin master</code> ：本地master分支的最新修改推送至GitHub</p><p><code>git push -u origin master</code>：第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在之前用&lt;code&gt;git push -u origin master&lt;/code&gt;时，会出现这种错误：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/05/23/5ce671044b66746735.png&quot; alt=&quot;错误1&quot;&gt;&lt;/p
      
    
    </summary>
    
      <category term="Study" scheme="http://yoursite.com/categories/Study/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git的工作区与暂存区</title>
    <link href="http://yoursite.com/2019/05/23/git-3/"/>
    <id>http://yoursite.com/2019/05/23/git-3/</id>
    <published>2019-05-23T09:58:26.000Z</published>
    <updated>2019-05-23T10:02:47.826Z</updated>
    
    <content type="html"><![CDATA[<h4 id="工作区与暂存区"><a href="#工作区与暂存区" class="headerlink" title="工作区与暂存区"></a>工作区与暂存区</h4><p>Git和其他版本控制系统如SVN的一个不同之处就是有暂存区的概念。</p><p><strong>工作区</strong></p><p>在电脑中能看到的目录，比如我在电脑中能看到的<code>learn-Git</code>文件夹就是一个工作区.</p><p><strong>版本库</strong></p><p>工作区有一个隐藏目录<code>.git</code>，这个不算工作区，而是Git的版本库。</p><p>Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支<code>master</code>，以及指向<code>master</code>的一个指针叫<code>HEAD</code>。</p><p>前面说过把文件往Git版本库里添加的时候，是分两步执行的：</p><p>第一步是用<code>git add</code>把文件添加进去，实际上就是把文件修改添加到暂存区；</p><p>第二步是用<code>git commit</code>提交更改，实际上就是把暂存区的所有内容提交到当前分支。</p><p>因为我们创建Git版本库时，Git自动为我们创建了唯一一个<code>master</code>分支，所以，现在，<code>git commit</code>就是往<code>master</code>分支上提交更改。</p><p>你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。<code>git add</code>命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行<code>git commit</code>就可以一次性把暂存区的所有修改提交到分支。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;工作区与暂存区&quot;&gt;&lt;a href=&quot;#工作区与暂存区&quot; class=&quot;headerlink&quot; title=&quot;工作区与暂存区&quot;&gt;&lt;/a&gt;工作区与暂存区&lt;/h4&gt;&lt;p&gt;Git和其他版本控制系统如SVN的一个不同之处就是有暂存区的概念。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;工
      
    
    </summary>
    
      <category term="Study" scheme="http://yoursite.com/categories/Study/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git的版本退回</title>
    <link href="http://yoursite.com/2019/05/22/git-2/"/>
    <id>http://yoursite.com/2019/05/22/git-2/</id>
    <published>2019-05-22T15:27:22.000Z</published>
    <updated>2019-05-23T10:45:48.551Z</updated>
    
    <content type="html"><![CDATA[<h4 id="git的版本退回"><a href="#git的版本退回" class="headerlink" title="git的版本退回"></a>git的版本退回</h4><p>在对文件不断修改后，每一次的修改记录可以通过最近的<code>commit</code>进行恢复，然后重新修改提交，这一点就像我们玩RPG游戏一样，每通过一关都要SAVE一下，下一关的boss打不过时重新LOAD。</p><p>举个例子：</p><p>版本1：wrote a readme file</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Git is a version control system.</span><br><span class="line">Git is free software.</span><br></pre></td></tr></table></figure><p>版本2：add distributed</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Git is a distributed version control system.</span><br><span class="line">Git is free software.</span><br></pre></td></tr></table></figure><p>版本3：append GPL</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Git is a distributed version control system.</span><br><span class="line">Git is free software distributed under the GPL.</span><br></pre></td></tr></table></figure><p>在Git中，我们可以通过<code>git log</code>命令查看版本系统中的提交修改历史纪录。<code>git log</code>命令显示从最近到最远的提交日志，每提交一个新版本，实际上Git就会把它们自动串成一条时间线。如果使用可视化工具查看Git历史，就可以更清楚地看到提交历史的时间线.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ git log</span><br><span class="line">commit 1094adb7b9b3807259d8cb349e7df1d4d6477073 (HEAD -&gt; master)</span><br><span class="line">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class="line">Date:   Fri May 18 21:06:15 2018 +0800</span><br><span class="line"></span><br><span class="line">    append GPL</span><br><span class="line"></span><br><span class="line">commit e475afc93c209a690c39c13a46716e8fa000c366</span><br><span class="line">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class="line">Date:   Fri May 18 21:03:36 2018 +0800</span><br><span class="line"></span><br><span class="line">    add distributed</span><br><span class="line"></span><br><span class="line">commit eaadf4e385e865d25c48e7ca9c8395c3f7dfaef0</span><br><span class="line">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class="line">Date:   Fri May 18 20:59:18 2018 +0800</span><br><span class="line"></span><br><span class="line">    wrote a readme file</span><br></pre></td></tr></table></figure><p>我们可以看到3次提交，最近的一次是<code>append GPL</code>，上一次是<code>add distributed</code>，最早的一次是<code>wrote a readme file</code>。</p><p>如果嫌输出信息太多，看得眼花缭乱的，可以试试加上<code>--pretty=oneline</code>参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git log --pretty=oneline</span><br><span class="line">1094adb7b9b3807259d8cb349e7df1d4d6477073 (HEAD -&gt; master) append GPL</span><br><span class="line">e475afc93c209a690c39c13a46716e8fa000c366 add distributed</span><br><span class="line">eaadf4e385e865d25c48e7ca9c8395c3f7dfaef0 wrote a readme file</span><br></pre></td></tr></table></figure><p>看到的一大串类似<code>1094adb...</code>的是<code>commit id</code>（版本号）</p><p><strong>版本返回</strong></p><p>在Git中，用<code>HEAD</code>表示当前版本，上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个<code>^</code>比较容易数不过来，所以写成<code>HEAD~100</code>。</p><p>现在，我们要把当前版本回退到上一个版本，就可以使用<code>git reset</code>命令。</p><p>再用<code>git log</code>查看现在版本库的状态，就会发现已经返回了，当想要再返回去时，只要上面的命令行窗口还没关闭，找到之前的<code>commit id</code>（版本号）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard commit id//commit id的名字不必写全</span><br><span class="line">HEAD is now at 83b0afe append GPL//之前的版本</span><br></pre></td></tr></table></figure><p>Git的版本回退速度非常快，因为Git在内部有个指向当前版本的<code>HEAD</code>指针，当你回退版本的时候，Git仅仅是把HEAD从指向<code>append GPL</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">┌────┐</span><br><span class="line">│HEAD│</span><br><span class="line">└────┘</span><br><span class="line">   │</span><br><span class="line">   └──&gt; ○ append GPL</span><br><span class="line">        │</span><br><span class="line">        ○ add distributed</span><br><span class="line">        │</span><br><span class="line">        ○ wrote a readme file</span><br></pre></td></tr></table></figure><p>改为指向<code>add distributed</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">┌────┐</span><br><span class="line">│HEAD│</span><br><span class="line">└────┘</span><br><span class="line">   │</span><br><span class="line">   │    ○ append GPL</span><br><span class="line">   │    │</span><br><span class="line">   └──&gt; ○ add distributed</span><br><span class="line">        │</span><br><span class="line">        ○ wrote a readme file</span><br></pre></td></tr></table></figure><p>然后顺便把工作区的文件更新了。所以你让<code>HEAD</code>指向哪个版本号，你就把当前版本定位在哪。</p><p>现在，你回退到了某个版本，关掉了电脑，第二天早上就后悔了，想恢复到新版本怎么办？找不到新版本的<code>commit id</code>怎么办？</p><p>在Git中，总是有后悔药可以吃的。当你用<code>$ git reset --hard HEAD^</code>回退到<code>add distributed</code>版本时，再想恢复到<code>append GPL</code>，就必须找到<code>append GPL</code>的commit id。Git提供了一个命令<code>git reflog</code>用来记录你的每一次命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git reflog</span><br><span class="line">e475afc HEAD@&#123;1&#125;: reset: moving to HEAD^</span><br><span class="line">1094adb (HEAD -&gt; master) HEAD@&#123;2&#125;: commit: append GPL</span><br><span class="line">e475afc HEAD@&#123;3&#125;: commit: add distributed</span><br><span class="line">eaadf4e HEAD@&#123;4&#125;: commit (initial): wrote a readme file</span><br></pre></td></tr></table></figure><p>终于舒了口气，从输出可知，<code>append GPL</code>的commit id是<code>1094adb</code>，现在，你又可以乘坐时光机回到未来了。</p><p><strong>小结</strong></p><ul><li><code>HEAD</code>指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code>。</li><li>穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本。</li><li>要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;git的版本退回&quot;&gt;&lt;a href=&quot;#git的版本退回&quot; class=&quot;headerlink&quot; title=&quot;git的版本退回&quot;&gt;&lt;/a&gt;git的版本退回&lt;/h4&gt;&lt;p&gt;在对文件不断修改后，每一次的修改记录可以通过最近的&lt;code&gt;commit&lt;/code&gt;进行
      
    
    </summary>
    
      <category term="Study" scheme="http://yoursite.com/categories/Study/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>随笔</title>
    <link href="http://yoursite.com/2019/05/21/%E9%9A%8F%E7%AC%941/"/>
    <id>http://yoursite.com/2019/05/21/随笔1/</id>
    <published>2019-05-21T15:58:25.000Z</published>
    <updated>2019-05-22T16:19:25.991Z</updated>
    
    <content type="html"><![CDATA[<p>主题成功换成了Next，果然还是Next集成的好，各种功能都有，开始学习Git了。</p><p>今天不学习，明天当咸鱼。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;主题成功换成了Next，果然还是Next集成的好，各种功能都有，开始学习Git了。&lt;/p&gt;
&lt;p&gt;今天不学习，明天当咸鱼。&lt;/p&gt;

      
    
    </summary>
    
      <category term="Life" scheme="http://yoursite.com/categories/Life/"/>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
